
Door_Locker_Security_System_MCU_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002edc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b8  00800060  00002edc  00002f70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800118  00800118  00003028  2**0
                  ALLOC
  3 .stab         00002c40  00000000  00000000  00003028  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013bd  00000000  00000000  00005c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007025  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007165  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000072d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009e09  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000abb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ad18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000afa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b773  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <__vector_3>
      10:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 72 0a 	jmp	0x14e4	; 0x14e4 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__vector_8>
      24:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 31       	cpi	r26, 0x18	; 24
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e1       	ldi	r26, 0x18	; 24
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 32       	cpi	r26, 0x26	; 38
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e0       	ldi	r26, 0x05	; 5
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	85 e0       	ldi	r24, 0x05	; 5
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 00 17 	jmp	0x2e00	; 0x2e00 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:




int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	e2 97       	sbiw	r28, 0x32	; 50
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	SREG |= (1 << 7); // enable global interrupt //
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24

	LCD_init();
     b68:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <LCD_init>

	Uart_Config Uart = {_8_BIT,DISABLED,_1_BIT};
     b6c:	ce 01       	movw	r24, r28
     b6e:	4f 96       	adiw	r24, 0x1f	; 31
     b70:	9a a7       	std	Y+42, r25	; 0x2a
     b72:	89 a7       	std	Y+41, r24	; 0x29
     b74:	e4 e1       	ldi	r30, 0x14	; 20
     b76:	f1 e0       	ldi	r31, 0x01	; 1
     b78:	fc a7       	std	Y+44, r31	; 0x2c
     b7a:	eb a7       	std	Y+43, r30	; 0x2b
     b7c:	f3 e0       	ldi	r31, 0x03	; 3
     b7e:	fd a7       	std	Y+45, r31	; 0x2d
     b80:	eb a5       	ldd	r30, Y+43	; 0x2b
     b82:	fc a5       	ldd	r31, Y+44	; 0x2c
     b84:	00 80       	ld	r0, Z
     b86:	8b a5       	ldd	r24, Y+43	; 0x2b
     b88:	9c a5       	ldd	r25, Y+44	; 0x2c
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	9c a7       	std	Y+44, r25	; 0x2c
     b8e:	8b a7       	std	Y+43, r24	; 0x2b
     b90:	e9 a5       	ldd	r30, Y+41	; 0x29
     b92:	fa a5       	ldd	r31, Y+42	; 0x2a
     b94:	00 82       	st	Z, r0
     b96:	89 a5       	ldd	r24, Y+41	; 0x29
     b98:	9a a5       	ldd	r25, Y+42	; 0x2a
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	9a a7       	std	Y+42, r25	; 0x2a
     b9e:	89 a7       	std	Y+41, r24	; 0x29
     ba0:	9d a5       	ldd	r25, Y+45	; 0x2d
     ba2:	91 50       	subi	r25, 0x01	; 1
     ba4:	9d a7       	std	Y+45, r25	; 0x2d
     ba6:	ed a5       	ldd	r30, Y+45	; 0x2d
     ba8:	ee 23       	and	r30, r30
     baa:	51 f7       	brne	.-44     	; 0xb80 <main+0x3a>

	UART_init(9600,&Uart);
     bac:	9e 01       	movw	r18, r28
     bae:	21 5e       	subi	r18, 0xE1	; 225
     bb0:	3f 4f       	sbci	r19, 0xFF	; 255
     bb2:	60 e8       	ldi	r22, 0x80	; 128
     bb4:	75 e2       	ldi	r23, 0x25	; 37
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	a9 01       	movw	r20, r18
     bbc:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <UART_init>

	/* Timer freq = 8MHz/1024, one clock-cycle time = 128 uSecond
			 so to force the timer to produce an interrupt every 1 second:
			 we set the compare value to be 1/(128u) = 7813 */

	TIMER_Config timer_config = {Timer1,CTC,F_CPU_1024,7813,0};
     bc0:	ce 01       	movw	r24, r28
     bc2:	82 96       	adiw	r24, 0x22	; 34
     bc4:	9f a7       	std	Y+47, r25	; 0x2f
     bc6:	8e a7       	std	Y+46, r24	; 0x2e
     bc8:	ed e0       	ldi	r30, 0x0D	; 13
     bca:	f1 e0       	ldi	r31, 0x01	; 1
     bcc:	f9 ab       	std	Y+49, r31	; 0x31
     bce:	e8 ab       	std	Y+48, r30	; 0x30
     bd0:	f7 e0       	ldi	r31, 0x07	; 7
     bd2:	fa ab       	std	Y+50, r31	; 0x32
     bd4:	e8 a9       	ldd	r30, Y+48	; 0x30
     bd6:	f9 a9       	ldd	r31, Y+49	; 0x31
     bd8:	00 80       	ld	r0, Z
     bda:	88 a9       	ldd	r24, Y+48	; 0x30
     bdc:	99 a9       	ldd	r25, Y+49	; 0x31
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	99 ab       	std	Y+49, r25	; 0x31
     be2:	88 ab       	std	Y+48, r24	; 0x30
     be4:	ee a5       	ldd	r30, Y+46	; 0x2e
     be6:	ff a5       	ldd	r31, Y+47	; 0x2f
     be8:	00 82       	st	Z, r0
     bea:	8e a5       	ldd	r24, Y+46	; 0x2e
     bec:	9f a5       	ldd	r25, Y+47	; 0x2f
     bee:	01 96       	adiw	r24, 0x01	; 1
     bf0:	9f a7       	std	Y+47, r25	; 0x2f
     bf2:	8e a7       	std	Y+46, r24	; 0x2e
     bf4:	9a a9       	ldd	r25, Y+50	; 0x32
     bf6:	91 50       	subi	r25, 0x01	; 1
     bf8:	9a ab       	std	Y+50, r25	; 0x32
     bfa:	ea a9       	ldd	r30, Y+50	; 0x32
     bfc:	ee 23       	and	r30, r30
     bfe:	51 f7       	brne	.-44     	; 0xbd4 <main+0x8e>
	Timer_init(&timer_config);
     c00:	ce 01       	movw	r24, r28
     c02:	82 96       	adiw	r24, 0x22	; 34
     c04:	0e 94 41 0b 	call	0x1682	; 0x1682 <Timer_init>
	Timer1_setCallBack(timerCallBack);
     c08:	8b ee       	ldi	r24, 0xEB	; 235
     c0a:	98 e0       	ldi	r25, 0x08	; 8
     c0c:	0e 94 1d 0b 	call	0x163a	; 0x163a <Timer1_setCallBack>

	initializePassword(); /* initialize first-time password */
     c10:	0e 94 16 08 	call	0x102c	; 0x102c <initializePassword>
	appMainOptions(); /* Display application options */
     c14:	0e 94 ff 07 	call	0xffe	; 0xffe <appMainOptions>
	uint8 receivedByte = 0, key = 0;
     c18:	1e 8e       	std	Y+30, r1	; 0x1e
     c1a:	1d 8e       	std	Y+29, r1	; 0x1d

	while(1)
	{
		key = KEYPAD_getPressedKey();
     c1c:	0e 94 03 10 	call	0x2006	; 0x2006 <KEYPAD_getPressedKey>
     c20:	8d 8f       	std	Y+29, r24	; 0x1d
		if (key == '+')
     c22:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c24:	8b 32       	cpi	r24, 0x2B	; 43
     c26:	09 f0       	breq	.+2      	; 0xc2a <main+0xe4>
     c28:	9c c0       	rjmp	.+312    	; 0xd62 <main+0x21c>
		{
			LCD_clearScreen();
     c2a:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <LCD_clearScreen>
			LCD_displayString("Enter the Pass:");
     c2e:	80 e6       	ldi	r24, 0x60	; 96
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <LCD_displayString>
			getPassword(g_inputPassword);
     c36:	81 e2       	ldi	r24, 0x21	; 33
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	0e 94 53 07 	call	0xea6	; 0xea6 <getPassword>
			UART_sendByte(READY_TO_SEND); /* inform Control ECU to start sending */
     c3e:	85 e1       	ldi	r24, 0x15	; 21
     c40:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <UART_sendByte>
			sendPasswordViaUART(g_inputPassword);
     c44:	81 e2       	ldi	r24, 0x21	; 33
     c46:	91 e0       	ldi	r25, 0x01	; 1
     c48:	0e 94 3e 09 	call	0x127c	; 0x127c <sendPasswordViaUART>
			/* inform Control ECU the option that user chose */
			UART_sendByte('+');
     c4c:	8b e2       	ldi	r24, 0x2B	; 43
     c4e:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <UART_sendByte>

			/* Control ECU responses [either the password is correct or wrong] */
			receivedByte = UART_recieveByte();
     c52:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <UART_recieveByte>
     c56:	8e 8f       	std	Y+30, r24	; 0x1e
			if (receivedByte == UNLOCKING_DOOR)
     c58:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c5a:	85 32       	cpi	r24, 0x25	; 37
     c5c:	19 f4       	brne	.+6      	; 0xc64 <main+0x11e>
			{
				DoorOpeningTask(); /* start displaying door status on LCD */
     c5e:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <DoorOpeningTask>
     c62:	7c c0       	rjmp	.+248    	; 0xd5c <main+0x216>

			}
			else if (receivedByte == WRONG_PASSWORD)
     c64:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c66:	80 33       	cpi	r24, 0x30	; 48
     c68:	09 f0       	breq	.+2      	; 0xc6c <main+0x126>
     c6a:	78 c0       	rjmp	.+240    	; 0xd5c <main+0x216>
			{
				LCD_clearScreen();
     c6c:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <LCD_clearScreen>
				LCD_displayString("Wrong Password");
     c70:	80 e7       	ldi	r24, 0x70	; 112
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <LCD_displayString>
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e4       	ldi	r25, 0x40	; 64
     c7c:	ac e9       	ldi	r26, 0x9C	; 156
     c7e:	b5 e4       	ldi	r27, 0x45	; 69
     c80:	89 8f       	std	Y+25, r24	; 0x19
     c82:	9a 8f       	std	Y+26, r25	; 0x1a
     c84:	ab 8f       	std	Y+27, r26	; 0x1b
     c86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c88:	69 8d       	ldd	r22, Y+25	; 0x19
     c8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	4a e7       	ldi	r20, 0x7A	; 122
     c96:	53 e4       	ldi	r21, 0x43	; 67
     c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c9c:	dc 01       	movw	r26, r24
     c9e:	cb 01       	movw	r24, r22
     ca0:	8d 8b       	std	Y+21, r24	; 0x15
     ca2:	9e 8b       	std	Y+22, r25	; 0x16
     ca4:	af 8b       	std	Y+23, r26	; 0x17
     ca6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ca8:	6d 89       	ldd	r22, Y+21	; 0x15
     caa:	7e 89       	ldd	r23, Y+22	; 0x16
     cac:	8f 89       	ldd	r24, Y+23	; 0x17
     cae:	98 8d       	ldd	r25, Y+24	; 0x18
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e8       	ldi	r20, 0x80	; 128
     cb6:	5f e3       	ldi	r21, 0x3F	; 63
     cb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cbc:	88 23       	and	r24, r24
     cbe:	2c f4       	brge	.+10     	; 0xcca <main+0x184>
		__ticks = 1;
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	9c 8b       	std	Y+20, r25	; 0x14
     cc6:	8b 8b       	std	Y+19, r24	; 0x13
     cc8:	3f c0       	rjmp	.+126    	; 0xd48 <main+0x202>
	else if (__tmp > 65535)
     cca:	6d 89       	ldd	r22, Y+21	; 0x15
     ccc:	7e 89       	ldd	r23, Y+22	; 0x16
     cce:	8f 89       	ldd	r24, Y+23	; 0x17
     cd0:	98 8d       	ldd	r25, Y+24	; 0x18
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	3f ef       	ldi	r19, 0xFF	; 255
     cd6:	4f e7       	ldi	r20, 0x7F	; 127
     cd8:	57 e4       	ldi	r21, 0x47	; 71
     cda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cde:	18 16       	cp	r1, r24
     ce0:	4c f5       	brge	.+82     	; 0xd34 <main+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ce2:	69 8d       	ldd	r22, Y+25	; 0x19
     ce4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ce6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ce8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	40 e2       	ldi	r20, 0x20	; 32
     cf0:	51 e4       	ldi	r21, 0x41	; 65
     cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf6:	dc 01       	movw	r26, r24
     cf8:	cb 01       	movw	r24, r22
     cfa:	bc 01       	movw	r22, r24
     cfc:	cd 01       	movw	r24, r26
     cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	9c 8b       	std	Y+20, r25	; 0x14
     d08:	8b 8b       	std	Y+19, r24	; 0x13
     d0a:	0f c0       	rjmp	.+30     	; 0xd2a <main+0x1e4>
     d0c:	89 e1       	ldi	r24, 0x19	; 25
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	9a 8b       	std	Y+18, r25	; 0x12
     d12:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d14:	89 89       	ldd	r24, Y+17	; 0x11
     d16:	9a 89       	ldd	r25, Y+18	; 0x12
     d18:	01 97       	sbiw	r24, 0x01	; 1
     d1a:	f1 f7       	brne	.-4      	; 0xd18 <main+0x1d2>
     d1c:	9a 8b       	std	Y+18, r25	; 0x12
     d1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d20:	8b 89       	ldd	r24, Y+19	; 0x13
     d22:	9c 89       	ldd	r25, Y+20	; 0x14
     d24:	01 97       	sbiw	r24, 0x01	; 1
     d26:	9c 8b       	std	Y+20, r25	; 0x14
     d28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d2a:	8b 89       	ldd	r24, Y+19	; 0x13
     d2c:	9c 89       	ldd	r25, Y+20	; 0x14
     d2e:	00 97       	sbiw	r24, 0x00	; 0
     d30:	69 f7       	brne	.-38     	; 0xd0c <main+0x1c6>
     d32:	14 c0       	rjmp	.+40     	; 0xd5c <main+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d34:	6d 89       	ldd	r22, Y+21	; 0x15
     d36:	7e 89       	ldd	r23, Y+22	; 0x16
     d38:	8f 89       	ldd	r24, Y+23	; 0x17
     d3a:	98 8d       	ldd	r25, Y+24	; 0x18
     d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	9c 8b       	std	Y+20, r25	; 0x14
     d46:	8b 8b       	std	Y+19, r24	; 0x13
     d48:	8b 89       	ldd	r24, Y+19	; 0x13
     d4a:	9c 89       	ldd	r25, Y+20	; 0x14
     d4c:	98 8b       	std	Y+16, r25	; 0x10
     d4e:	8f 87       	std	Y+15, r24	; 0x0f
     d50:	8f 85       	ldd	r24, Y+15	; 0x0f
     d52:	98 89       	ldd	r25, Y+16	; 0x10
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	f1 f7       	brne	.-4      	; 0xd54 <main+0x20e>
     d58:	98 8b       	std	Y+16, r25	; 0x10
     d5a:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(DISPLAY_MESSAGE_DELAY);
			}
			appMainOptions(); /* system back to idle & display main options */
     d5c:	0e 94 ff 07 	call	0xffe	; 0xffe <appMainOptions>
     d60:	5d cf       	rjmp	.-326    	; 0xc1c <main+0xd6>


		}
		else if (key == '-')
     d62:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d64:	8d 32       	cpi	r24, 0x2D	; 45
     d66:	09 f0       	breq	.+2      	; 0xd6a <main+0x224>
     d68:	59 cf       	rjmp	.-334    	; 0xc1c <main+0xd6>
		{
			LCD_clearScreen();
     d6a:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <LCD_clearScreen>
			LCD_displayString("Enter Old Pass:");
     d6e:	8f e7       	ldi	r24, 0x7F	; 127
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <LCD_displayString>
			getPassword(g_inputPassword);
     d76:	81 e2       	ldi	r24, 0x21	; 33
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	0e 94 53 07 	call	0xea6	; 0xea6 <getPassword>
			UART_sendByte(READY_TO_SEND); /* inform Control ECU to start sending */
     d7e:	85 e1       	ldi	r24, 0x15	; 21
     d80:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <UART_sendByte>
			sendPasswordViaUART(g_inputPassword);
     d84:	81 e2       	ldi	r24, 0x21	; 33
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	0e 94 3e 09 	call	0x127c	; 0x127c <sendPasswordViaUART>

			/* inform Control ECU the option that user chose */
			UART_sendByte(CHANGE_PASSWORD_OPTION);
     d8c:	88 e1       	ldi	r24, 0x18	; 24
     d8e:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <UART_sendByte>

			receivedByte = UART_recieveByte();
     d92:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <UART_recieveByte>
     d96:	8e 8f       	std	Y+30, r24	; 0x1e
			if (receivedByte == CHANGING_PASSWORD)
     d98:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d9a:	81 33       	cpi	r24, 0x31	; 49
     d9c:	29 f4       	brne	.+10     	; 0xda8 <main+0x262>
			{
				initializePassword();
     d9e:	0e 94 16 08 	call	0x102c	; 0x102c <initializePassword>
				LCD_clearScreen();
     da2:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <LCD_clearScreen>
     da6:	7c c0       	rjmp	.+248    	; 0xea0 <main+0x35a>
			}
			else if (receivedByte == WRONG_PASSWORD)
     da8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     daa:	80 33       	cpi	r24, 0x30	; 48
     dac:	09 f0       	breq	.+2      	; 0xdb0 <main+0x26a>
     dae:	78 c0       	rjmp	.+240    	; 0xea0 <main+0x35a>
			{
				LCD_clearScreen();
     db0:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <LCD_clearScreen>
				LCD_displayString("Wrong Password");
     db4:	80 e7       	ldi	r24, 0x70	; 112
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <LCD_displayString>
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	90 e4       	ldi	r25, 0x40	; 64
     dc0:	ac e9       	ldi	r26, 0x9C	; 156
     dc2:	b5 e4       	ldi	r27, 0x45	; 69
     dc4:	8b 87       	std	Y+11, r24	; 0x0b
     dc6:	9c 87       	std	Y+12, r25	; 0x0c
     dc8:	ad 87       	std	Y+13, r26	; 0x0d
     dca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dcc:	6b 85       	ldd	r22, Y+11	; 0x0b
     dce:	7c 85       	ldd	r23, Y+12	; 0x0c
     dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	4a e7       	ldi	r20, 0x7A	; 122
     dda:	53 e4       	ldi	r21, 0x43	; 67
     ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	8f 83       	std	Y+7, r24	; 0x07
     de6:	98 87       	std	Y+8, r25	; 0x08
     de8:	a9 87       	std	Y+9, r26	; 0x09
     dea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dec:	6f 81       	ldd	r22, Y+7	; 0x07
     dee:	78 85       	ldd	r23, Y+8	; 0x08
     df0:	89 85       	ldd	r24, Y+9	; 0x09
     df2:	9a 85       	ldd	r25, Y+10	; 0x0a
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	40 e8       	ldi	r20, 0x80	; 128
     dfa:	5f e3       	ldi	r21, 0x3F	; 63
     dfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e00:	88 23       	and	r24, r24
     e02:	2c f4       	brge	.+10     	; 0xe0e <main+0x2c8>
		__ticks = 1;
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	9e 83       	std	Y+6, r25	; 0x06
     e0a:	8d 83       	std	Y+5, r24	; 0x05
     e0c:	3f c0       	rjmp	.+126    	; 0xe8c <main+0x346>
	else if (__tmp > 65535)
     e0e:	6f 81       	ldd	r22, Y+7	; 0x07
     e10:	78 85       	ldd	r23, Y+8	; 0x08
     e12:	89 85       	ldd	r24, Y+9	; 0x09
     e14:	9a 85       	ldd	r25, Y+10	; 0x0a
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	3f ef       	ldi	r19, 0xFF	; 255
     e1a:	4f e7       	ldi	r20, 0x7F	; 127
     e1c:	57 e4       	ldi	r21, 0x47	; 71
     e1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e22:	18 16       	cp	r1, r24
     e24:	4c f5       	brge	.+82     	; 0xe78 <main+0x332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e26:	6b 85       	ldd	r22, Y+11	; 0x0b
     e28:	7c 85       	ldd	r23, Y+12	; 0x0c
     e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	40 e2       	ldi	r20, 0x20	; 32
     e34:	51 e4       	ldi	r21, 0x41	; 65
     e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	bc 01       	movw	r22, r24
     e40:	cd 01       	movw	r24, r26
     e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	9e 83       	std	Y+6, r25	; 0x06
     e4c:	8d 83       	std	Y+5, r24	; 0x05
     e4e:	0f c0       	rjmp	.+30     	; 0xe6e <main+0x328>
     e50:	89 e1       	ldi	r24, 0x19	; 25
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	9c 83       	std	Y+4, r25	; 0x04
     e56:	8b 83       	std	Y+3, r24	; 0x03
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	9c 81       	ldd	r25, Y+4	; 0x04
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	f1 f7       	brne	.-4      	; 0xe5c <main+0x316>
     e60:	9c 83       	std	Y+4, r25	; 0x04
     e62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e64:	8d 81       	ldd	r24, Y+5	; 0x05
     e66:	9e 81       	ldd	r25, Y+6	; 0x06
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	9e 83       	std	Y+6, r25	; 0x06
     e6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e6e:	8d 81       	ldd	r24, Y+5	; 0x05
     e70:	9e 81       	ldd	r25, Y+6	; 0x06
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	69 f7       	brne	.-38     	; 0xe50 <main+0x30a>
     e76:	14 c0       	rjmp	.+40     	; 0xea0 <main+0x35a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e78:	6f 81       	ldd	r22, Y+7	; 0x07
     e7a:	78 85       	ldd	r23, Y+8	; 0x08
     e7c:	89 85       	ldd	r24, Y+9	; 0x09
     e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	9e 83       	std	Y+6, r25	; 0x06
     e8a:	8d 83       	std	Y+5, r24	; 0x05
     e8c:	8d 81       	ldd	r24, Y+5	; 0x05
     e8e:	9e 81       	ldd	r25, Y+6	; 0x06
     e90:	9a 83       	std	Y+2, r25	; 0x02
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	9a 81       	ldd	r25, Y+2	; 0x02
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	f1 f7       	brne	.-4      	; 0xe98 <main+0x352>
     e9c:	9a 83       	std	Y+2, r25	; 0x02
     e9e:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(DISPLAY_MESSAGE_DELAY);
			}
			appMainOptions();
     ea0:	0e 94 ff 07 	call	0xffe	; 0xffe <appMainOptions>
     ea4:	bb ce       	rjmp	.-650    	; 0xc1c <main+0xd6>

00000ea6 <getPassword>:
/********************************************************/
/*             Functions Defintions                     */
/********************************************************/

void getPassword(uint8 * arrayName)
{
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	62 97       	sbiw	r28, 0x12	; 18
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	cd bf       	out	0x3d, r28	; 61
     eba:	9a 8b       	std	Y+18, r25	; 0x12
     ebc:	89 8b       	std	Y+17, r24	; 0x11
	LCD_moveCursor(1, 0);
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <LCD_moveCursor>
	uint8 i = 0;
     ec6:	18 8a       	std	Y+16, r1	; 0x10
     ec8:	88 c0       	rjmp	.+272    	; 0xfda <getPassword+0x134>
	uint8 key;

	while(i != PASSWORD_LENGTH)
	{
		key = KEYPAD_getPressedKey();
     eca:	0e 94 03 10 	call	0x2006	; 0x2006 <KEYPAD_getPressedKey>
     ece:	8f 87       	std	Y+15, r24	; 0x0f
		if (key >= 0 && key <= 9)
     ed0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed2:	8a 30       	cpi	r24, 0x0A	; 10
     ed4:	80 f4       	brcc	.+32     	; 0xef6 <getPassword+0x50>
		{
			LCD_displayCharacter('*');
     ed6:	8a e2       	ldi	r24, 0x2A	; 42
     ed8:	0e 94 12 13 	call	0x2624	; 0x2624 <LCD_displayCharacter>
			*(arrayName + i) = key;
     edc:	88 89       	ldd	r24, Y+16	; 0x10
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	89 89       	ldd	r24, Y+17	; 0x11
     ee4:	9a 89       	ldd	r25, Y+18	; 0x12
     ee6:	fc 01       	movw	r30, r24
     ee8:	e2 0f       	add	r30, r18
     eea:	f3 1f       	adc	r31, r19
     eec:	8f 85       	ldd	r24, Y+15	; 0x0f
     eee:	80 83       	st	Z, r24
			i++;
     ef0:	88 89       	ldd	r24, Y+16	; 0x10
     ef2:	8f 5f       	subi	r24, 0xFF	; 255
     ef4:	88 8b       	std	Y+16, r24	; 0x10
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e8       	ldi	r25, 0x80	; 128
     efa:	ab e3       	ldi	r26, 0x3B	; 59
     efc:	b5 e4       	ldi	r27, 0x45	; 69
     efe:	8b 87       	std	Y+11, r24	; 0x0b
     f00:	9c 87       	std	Y+12, r25	; 0x0c
     f02:	ad 87       	std	Y+13, r26	; 0x0d
     f04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f06:	6b 85       	ldd	r22, Y+11	; 0x0b
     f08:	7c 85       	ldd	r23, Y+12	; 0x0c
     f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	4a e7       	ldi	r20, 0x7A	; 122
     f14:	53 e4       	ldi	r21, 0x43	; 67
     f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	8f 83       	std	Y+7, r24	; 0x07
     f20:	98 87       	std	Y+8, r25	; 0x08
     f22:	a9 87       	std	Y+9, r26	; 0x09
     f24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f26:	6f 81       	ldd	r22, Y+7	; 0x07
     f28:	78 85       	ldd	r23, Y+8	; 0x08
     f2a:	89 85       	ldd	r24, Y+9	; 0x09
     f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e8       	ldi	r20, 0x80	; 128
     f34:	5f e3       	ldi	r21, 0x3F	; 63
     f36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f3a:	88 23       	and	r24, r24
     f3c:	2c f4       	brge	.+10     	; 0xf48 <getPassword+0xa2>
		__ticks = 1;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	9e 83       	std	Y+6, r25	; 0x06
     f44:	8d 83       	std	Y+5, r24	; 0x05
     f46:	3f c0       	rjmp	.+126    	; 0xfc6 <getPassword+0x120>
	else if (__tmp > 65535)
     f48:	6f 81       	ldd	r22, Y+7	; 0x07
     f4a:	78 85       	ldd	r23, Y+8	; 0x08
     f4c:	89 85       	ldd	r24, Y+9	; 0x09
     f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	3f ef       	ldi	r19, 0xFF	; 255
     f54:	4f e7       	ldi	r20, 0x7F	; 127
     f56:	57 e4       	ldi	r21, 0x47	; 71
     f58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f5c:	18 16       	cp	r1, r24
     f5e:	4c f5       	brge	.+82     	; 0xfb2 <getPassword+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f60:	6b 85       	ldd	r22, Y+11	; 0x0b
     f62:	7c 85       	ldd	r23, Y+12	; 0x0c
     f64:	8d 85       	ldd	r24, Y+13	; 0x0d
     f66:	9e 85       	ldd	r25, Y+14	; 0x0e
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e2       	ldi	r20, 0x20	; 32
     f6e:	51 e4       	ldi	r21, 0x41	; 65
     f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	bc 01       	movw	r22, r24
     f7a:	cd 01       	movw	r24, r26
     f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	9e 83       	std	Y+6, r25	; 0x06
     f86:	8d 83       	std	Y+5, r24	; 0x05
     f88:	0f c0       	rjmp	.+30     	; 0xfa8 <getPassword+0x102>
     f8a:	89 e1       	ldi	r24, 0x19	; 25
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	9c 83       	std	Y+4, r25	; 0x04
     f90:	8b 83       	std	Y+3, r24	; 0x03
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	9c 81       	ldd	r25, Y+4	; 0x04
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	f1 f7       	brne	.-4      	; 0xf96 <getPassword+0xf0>
     f9a:	9c 83       	std	Y+4, r25	; 0x04
     f9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9e:	8d 81       	ldd	r24, Y+5	; 0x05
     fa0:	9e 81       	ldd	r25, Y+6	; 0x06
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	9e 83       	std	Y+6, r25	; 0x06
     fa6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa8:	8d 81       	ldd	r24, Y+5	; 0x05
     faa:	9e 81       	ldd	r25, Y+6	; 0x06
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	69 f7       	brne	.-38     	; 0xf8a <getPassword+0xe4>
     fb0:	14 c0       	rjmp	.+40     	; 0xfda <getPassword+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb2:	6f 81       	ldd	r22, Y+7	; 0x07
     fb4:	78 85       	ldd	r23, Y+8	; 0x08
     fb6:	89 85       	ldd	r24, Y+9	; 0x09
     fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	9e 83       	std	Y+6, r25	; 0x06
     fc4:	8d 83       	std	Y+5, r24	; 0x05
     fc6:	8d 81       	ldd	r24, Y+5	; 0x05
     fc8:	9e 81       	ldd	r25, Y+6	; 0x06
     fca:	9a 83       	std	Y+2, r25	; 0x02
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	9a 81       	ldd	r25, Y+2	; 0x02
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <getPassword+0x12c>
     fd6:	9a 83       	std	Y+2, r25	; 0x02
     fd8:	89 83       	std	Y+1, r24	; 0x01
{
	LCD_moveCursor(1, 0);
	uint8 i = 0;
	uint8 key;

	while(i != PASSWORD_LENGTH)
     fda:	88 89       	ldd	r24, Y+16	; 0x10
     fdc:	85 30       	cpi	r24, 0x05	; 5
     fde:	09 f0       	breq	.+2      	; 0xfe2 <getPassword+0x13c>
     fe0:	74 cf       	rjmp	.-280    	; 0xeca <getPassword+0x24>
			*(arrayName + i) = key;
			i++;
		}
		_delay_ms(KEYPAD_INPUT_DELAY);
	}
	key = 0;
     fe2:	1f 86       	std	Y+15, r1	; 0x0f

	/* stay till user pushes Enter */
	while(KEYPAD_getPressedKey() != 13);
     fe4:	0e 94 03 10 	call	0x2006	; 0x2006 <KEYPAD_getPressedKey>
     fe8:	8d 30       	cpi	r24, 0x0D	; 13
     fea:	e1 f7       	brne	.-8      	; 0xfe4 <getPassword+0x13e>
}
     fec:	62 96       	adiw	r28, 0x12	; 18
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <appMainOptions>:

void appMainOptions(void)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1006:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+: Open Door");
    100a:	2f e8       	ldi	r18, 0x8F	; 143
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	a9 01       	movw	r20, r18
    1014:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "-: Change Pass");
    1018:	2c e9       	ldi	r18, 0x9C	; 156
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	a9 01       	movw	r20, r18
    1022:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <LCD_displayStringRowColumn>
}
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <initializePassword>:

void initializePassword(void)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	2e 97       	sbiw	r28, 0x0e	; 14
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	ba c0       	rjmp	.+372    	; 0x11b6 <initializePassword+0x18a>
	while(g_password_match_status == PASSWORD_MISMATCHED)
	{
		LCD_clearScreen();
    1042:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <LCD_clearScreen>
		LCD_displayString("Enter Pass:");
    1046:	8b ea       	ldi	r24, 0xAB	; 171
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <LCD_displayString>
		LCD_moveCursor(1, 0);
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <LCD_moveCursor>
		getPassword(g_inputPassword); /* get the password from user */
    1056:	81 e2       	ldi	r24, 0x21	; 33
    1058:	91 e0       	ldi	r25, 0x01	; 1
    105a:	0e 94 53 07 	call	0xea6	; 0xea6 <getPassword>
		UART_sendByte(READY_TO_SEND);
    105e:	85 e1       	ldi	r24, 0x15	; 21
    1060:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <UART_sendByte>
		while (UART_recieveByte() != READY_TO_RECEIVE); /* wait for a response */
    1064:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <UART_recieveByte>
    1068:	86 31       	cpi	r24, 0x16	; 22
    106a:	e1 f7       	brne	.-8      	; 0x1064 <initializePassword+0x38>
		sendPasswordViaUART(g_inputPassword);
    106c:	81 e2       	ldi	r24, 0x21	; 33
    106e:	91 e0       	ldi	r25, 0x01	; 1
    1070:	0e 94 3e 09 	call	0x127c	; 0x127c <sendPasswordViaUART>

		/* get confirm password from user */
		LCD_clearScreen();
    1074:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Re-enter Pass:");
    1078:	27 eb       	ldi	r18, 0xB7	; 183
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	a9 01       	movw	r20, r18
    1082:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <LCD_moveCursor>
		getPassword(g_inputPassword);
    108e:	81 e2       	ldi	r24, 0x21	; 33
    1090:	91 e0       	ldi	r25, 0x01	; 1
    1092:	0e 94 53 07 	call	0xea6	; 0xea6 <getPassword>
		UART_sendByte(READY_TO_SEND);
    1096:	85 e1       	ldi	r24, 0x15	; 21
    1098:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <UART_sendByte>
		while (UART_recieveByte() != READY_TO_RECEIVE);
    109c:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <UART_recieveByte>
    10a0:	86 31       	cpi	r24, 0x16	; 22
    10a2:	e1 f7       	brne	.-8      	; 0x109c <initializePassword+0x70>
		sendPasswordViaUART(g_inputPassword);
    10a4:	81 e2       	ldi	r24, 0x21	; 33
    10a6:	91 e0       	ldi	r25, 0x01	; 1
    10a8:	0e 94 3e 09 	call	0x127c	; 0x127c <sendPasswordViaUART>

		/* wait for a response from Control ECU about passwords matching */
		while (UART_recieveByte() != READY_TO_SEND);
    10ac:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <UART_recieveByte>
    10b0:	85 31       	cpi	r24, 0x15	; 21
    10b2:	e1 f7       	brne	.-8      	; 0x10ac <initializePassword+0x80>
		g_password_match_status = UART_recieveByte();
    10b4:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <UART_recieveByte>
    10b8:	80 93 18 01 	sts	0x0118, r24

		if (g_password_match_status == PASSWORD_MISMATCHED)
    10bc:	80 91 18 01 	lds	r24, 0x0118
    10c0:	88 23       	and	r24, r24
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <initializePassword+0x9a>
    10c4:	78 c0       	rjmp	.+240    	; 0x11b6 <initializePassword+0x18a>
		{
			LCD_clearScreen();
    10c6:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <LCD_clearScreen>
			LCD_displayString("Pass Mismatch");
    10ca:	86 ec       	ldi	r24, 0xC6	; 198
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <LCD_displayString>
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e4       	ldi	r25, 0x40	; 64
    10d6:	ac e9       	ldi	r26, 0x9C	; 156
    10d8:	b5 e4       	ldi	r27, 0x45	; 69
    10da:	8b 87       	std	Y+11, r24	; 0x0b
    10dc:	9c 87       	std	Y+12, r25	; 0x0c
    10de:	ad 87       	std	Y+13, r26	; 0x0d
    10e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	4a e7       	ldi	r20, 0x7A	; 122
    10f0:	53 e4       	ldi	r21, 0x43	; 67
    10f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	8f 83       	std	Y+7, r24	; 0x07
    10fc:	98 87       	std	Y+8, r25	; 0x08
    10fe:	a9 87       	std	Y+9, r26	; 0x09
    1100:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1102:	6f 81       	ldd	r22, Y+7	; 0x07
    1104:	78 85       	ldd	r23, Y+8	; 0x08
    1106:	89 85       	ldd	r24, Y+9	; 0x09
    1108:	9a 85       	ldd	r25, Y+10	; 0x0a
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e8       	ldi	r20, 0x80	; 128
    1110:	5f e3       	ldi	r21, 0x3F	; 63
    1112:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1116:	88 23       	and	r24, r24
    1118:	2c f4       	brge	.+10     	; 0x1124 <initializePassword+0xf8>
		__ticks = 1;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	9e 83       	std	Y+6, r25	; 0x06
    1120:	8d 83       	std	Y+5, r24	; 0x05
    1122:	3f c0       	rjmp	.+126    	; 0x11a2 <initializePassword+0x176>
	else if (__tmp > 65535)
    1124:	6f 81       	ldd	r22, Y+7	; 0x07
    1126:	78 85       	ldd	r23, Y+8	; 0x08
    1128:	89 85       	ldd	r24, Y+9	; 0x09
    112a:	9a 85       	ldd	r25, Y+10	; 0x0a
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	3f ef       	ldi	r19, 0xFF	; 255
    1130:	4f e7       	ldi	r20, 0x7F	; 127
    1132:	57 e4       	ldi	r21, 0x47	; 71
    1134:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1138:	18 16       	cp	r1, r24
    113a:	4c f5       	brge	.+82     	; 0x118e <initializePassword+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    113c:	6b 85       	ldd	r22, Y+11	; 0x0b
    113e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1140:	8d 85       	ldd	r24, Y+13	; 0x0d
    1142:	9e 85       	ldd	r25, Y+14	; 0x0e
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e2       	ldi	r20, 0x20	; 32
    114a:	51 e4       	ldi	r21, 0x41	; 65
    114c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	bc 01       	movw	r22, r24
    1156:	cd 01       	movw	r24, r26
    1158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	9e 83       	std	Y+6, r25	; 0x06
    1162:	8d 83       	std	Y+5, r24	; 0x05
    1164:	0f c0       	rjmp	.+30     	; 0x1184 <initializePassword+0x158>
    1166:	89 e1       	ldi	r24, 0x19	; 25
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	9c 83       	std	Y+4, r25	; 0x04
    116c:	8b 83       	std	Y+3, r24	; 0x03
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	f1 f7       	brne	.-4      	; 0x1172 <initializePassword+0x146>
    1176:	9c 83       	std	Y+4, r25	; 0x04
    1178:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	9e 81       	ldd	r25, Y+6	; 0x06
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	9e 83       	std	Y+6, r25	; 0x06
    1182:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	69 f7       	brne	.-38     	; 0x1166 <initializePassword+0x13a>
    118c:	14 c0       	rjmp	.+40     	; 0x11b6 <initializePassword+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    118e:	6f 81       	ldd	r22, Y+7	; 0x07
    1190:	78 85       	ldd	r23, Y+8	; 0x08
    1192:	89 85       	ldd	r24, Y+9	; 0x09
    1194:	9a 85       	ldd	r25, Y+10	; 0x0a
    1196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	9e 83       	std	Y+6, r25	; 0x06
    11a0:	8d 83       	std	Y+5, r24	; 0x05
    11a2:	8d 81       	ldd	r24, Y+5	; 0x05
    11a4:	9e 81       	ldd	r25, Y+6	; 0x06
    11a6:	9a 83       	std	Y+2, r25	; 0x02
    11a8:	89 83       	std	Y+1, r24	; 0x01
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	9a 81       	ldd	r25, Y+2	; 0x02
    11ae:	01 97       	sbiw	r24, 0x01	; 1
    11b0:	f1 f7       	brne	.-4      	; 0x11ae <initializePassword+0x182>
    11b2:	9a 83       	std	Y+2, r25	; 0x02
    11b4:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayStringRowColumn(1, 0, "-: Change Pass");
}

void initializePassword(void)
{
	while(g_password_match_status == PASSWORD_MISMATCHED)
    11b6:	80 91 18 01 	lds	r24, 0x0118
    11ba:	88 23       	and	r24, r24
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <initializePassword+0x194>
    11be:	41 cf       	rjmp	.-382    	; 0x1042 <initializePassword+0x16>
			LCD_clearScreen();
			LCD_displayString("Pass Mismatch");
			_delay_ms(DISPLAY_MESSAGE_DELAY);
		}
	}
	g_password_match_status = PASSWORD_MISMATCHED; /* reset password match to MISMATCH for later usage */
    11c0:	10 92 18 01 	sts	0x0118, r1
}
    11c4:	2e 96       	adiw	r28, 0x0e	; 14
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <timerCallBack>:

void timerCallBack(void)
{
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
	g_seconds++;
    11de:	80 91 19 01 	lds	r24, 0x0119
    11e2:	90 91 1a 01 	lds	r25, 0x011A
    11e6:	01 96       	adiw	r24, 0x01	; 1
    11e8:	90 93 1a 01 	sts	0x011A, r25
    11ec:	80 93 19 01 	sts	0x0119, r24
}
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <DoorOpeningTask>:

void DoorOpeningTask(void)
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
	/* hold the system for 15 seconds & display to user that door is unlocking */
	g_seconds = 0;
    11fe:	10 92 1a 01 	sts	0x011A, r1
    1202:	10 92 19 01 	sts	0x0119, r1
	LCD_clearScreen();
    1206:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is Opening");
    120a:	24 ed       	ldi	r18, 0xD4	; 212
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	a9 01       	movw	r20, r18
    1214:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <LCD_displayStringRowColumn>
	while (g_seconds < DOOR_UNLOCKING_PERIOD);
    1218:	80 91 19 01 	lds	r24, 0x0119
    121c:	90 91 1a 01 	lds	r25, 0x011A
    1220:	8f 30       	cpi	r24, 0x0F	; 15
    1222:	91 05       	cpc	r25, r1
    1224:	c8 f3       	brcs	.-14     	; 0x1218 <DoorOpeningTask+0x22>

	/* let the door be open for 3 seconds */
	g_seconds = 0;
    1226:	10 92 1a 01 	sts	0x011A, r1
    122a:	10 92 19 01 	sts	0x0119, r1
	LCD_clearScreen();
    122e:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is Now Open");
    1232:	24 ee       	ldi	r18, 0xE4	; 228
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	a9 01       	movw	r20, r18
    123c:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <LCD_displayStringRowColumn>
	while (g_seconds < DOOR_LEFT_OPEN_PERIOD);
    1240:	80 91 19 01 	lds	r24, 0x0119
    1244:	90 91 1a 01 	lds	r25, 0x011A
    1248:	83 30       	cpi	r24, 0x03	; 3
    124a:	91 05       	cpc	r25, r1
    124c:	c8 f3       	brcs	.-14     	; 0x1240 <DoorOpeningTask+0x4a>

	/* hold the system for 15 seconds & display to user that door is locking */
	g_seconds = 0;
    124e:	10 92 1a 01 	sts	0x011A, r1
    1252:	10 92 19 01 	sts	0x0119, r1
	LCD_clearScreen();
    1256:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is Closing");
    125a:	25 ef       	ldi	r18, 0xF5	; 245
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	a9 01       	movw	r20, r18
    1264:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <LCD_displayStringRowColumn>
	while (g_seconds < DOOR_UNLOCKING_PERIOD);
    1268:	80 91 19 01 	lds	r24, 0x0119
    126c:	90 91 1a 01 	lds	r25, 0x011A
    1270:	8f 30       	cpi	r24, 0x0F	; 15
    1272:	91 05       	cpc	r25, r1
    1274:	c8 f3       	brcs	.-14     	; 0x1268 <DoorOpeningTask+0x72>
}
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <sendPasswordViaUART>:

void sendPasswordViaUART(uint8 * passwordArray)
{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	61 97       	sbiw	r28, 0x11	; 17
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	f8 94       	cli
    128a:	de bf       	out	0x3e, r29	; 62
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	cd bf       	out	0x3d, r28	; 61
    1290:	99 8b       	std	Y+17, r25	; 0x11
    1292:	88 8b       	std	Y+16, r24	; 0x10
	uint8 cnt;

	for (cnt = 0; cnt < PASSWORD_LENGTH; cnt++)
    1294:	1f 86       	std	Y+15, r1	; 0x0f
    1296:	80 c0       	rjmp	.+256    	; 0x1398 <sendPasswordViaUART+0x11c>
	{
		UART_sendByte(passwordArray[cnt]);
    1298:	8f 85       	ldd	r24, Y+15	; 0x0f
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	88 89       	ldd	r24, Y+16	; 0x10
    12a0:	99 89       	ldd	r25, Y+17	; 0x11
    12a2:	fc 01       	movw	r30, r24
    12a4:	e2 0f       	add	r30, r18
    12a6:	f3 1f       	adc	r31, r19
    12a8:	80 81       	ld	r24, Z
    12aa:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <UART_sendByte>
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	a8 ec       	ldi	r26, 0xC8	; 200
    12b4:	b2 e4       	ldi	r27, 0x42	; 66
    12b6:	8b 87       	std	Y+11, r24	; 0x0b
    12b8:	9c 87       	std	Y+12, r25	; 0x0c
    12ba:	ad 87       	std	Y+13, r26	; 0x0d
    12bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12be:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	4a e7       	ldi	r20, 0x7A	; 122
    12cc:	53 e4       	ldi	r21, 0x43	; 67
    12ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	8f 83       	std	Y+7, r24	; 0x07
    12d8:	98 87       	std	Y+8, r25	; 0x08
    12da:	a9 87       	std	Y+9, r26	; 0x09
    12dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12de:	6f 81       	ldd	r22, Y+7	; 0x07
    12e0:	78 85       	ldd	r23, Y+8	; 0x08
    12e2:	89 85       	ldd	r24, Y+9	; 0x09
    12e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 e8       	ldi	r20, 0x80	; 128
    12ec:	5f e3       	ldi	r21, 0x3F	; 63
    12ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12f2:	88 23       	and	r24, r24
    12f4:	2c f4       	brge	.+10     	; 0x1300 <sendPasswordViaUART+0x84>
		__ticks = 1;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	9e 83       	std	Y+6, r25	; 0x06
    12fc:	8d 83       	std	Y+5, r24	; 0x05
    12fe:	3f c0       	rjmp	.+126    	; 0x137e <sendPasswordViaUART+0x102>
	else if (__tmp > 65535)
    1300:	6f 81       	ldd	r22, Y+7	; 0x07
    1302:	78 85       	ldd	r23, Y+8	; 0x08
    1304:	89 85       	ldd	r24, Y+9	; 0x09
    1306:	9a 85       	ldd	r25, Y+10	; 0x0a
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	3f ef       	ldi	r19, 0xFF	; 255
    130c:	4f e7       	ldi	r20, 0x7F	; 127
    130e:	57 e4       	ldi	r21, 0x47	; 71
    1310:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1314:	18 16       	cp	r1, r24
    1316:	4c f5       	brge	.+82     	; 0x136a <sendPasswordViaUART+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1318:	6b 85       	ldd	r22, Y+11	; 0x0b
    131a:	7c 85       	ldd	r23, Y+12	; 0x0c
    131c:	8d 85       	ldd	r24, Y+13	; 0x0d
    131e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 e2       	ldi	r20, 0x20	; 32
    1326:	51 e4       	ldi	r21, 0x41	; 65
    1328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	bc 01       	movw	r22, r24
    1332:	cd 01       	movw	r24, r26
    1334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	9e 83       	std	Y+6, r25	; 0x06
    133e:	8d 83       	std	Y+5, r24	; 0x05
    1340:	0f c0       	rjmp	.+30     	; 0x1360 <sendPasswordViaUART+0xe4>
    1342:	89 e1       	ldi	r24, 0x19	; 25
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	9c 83       	std	Y+4, r25	; 0x04
    1348:	8b 83       	std	Y+3, r24	; 0x03
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	01 97       	sbiw	r24, 0x01	; 1
    1350:	f1 f7       	brne	.-4      	; 0x134e <sendPasswordViaUART+0xd2>
    1352:	9c 83       	std	Y+4, r25	; 0x04
    1354:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1356:	8d 81       	ldd	r24, Y+5	; 0x05
    1358:	9e 81       	ldd	r25, Y+6	; 0x06
    135a:	01 97       	sbiw	r24, 0x01	; 1
    135c:	9e 83       	std	Y+6, r25	; 0x06
    135e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1360:	8d 81       	ldd	r24, Y+5	; 0x05
    1362:	9e 81       	ldd	r25, Y+6	; 0x06
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	69 f7       	brne	.-38     	; 0x1342 <sendPasswordViaUART+0xc6>
    1368:	14 c0       	rjmp	.+40     	; 0x1392 <sendPasswordViaUART+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    136a:	6f 81       	ldd	r22, Y+7	; 0x07
    136c:	78 85       	ldd	r23, Y+8	; 0x08
    136e:	89 85       	ldd	r24, Y+9	; 0x09
    1370:	9a 85       	ldd	r25, Y+10	; 0x0a
    1372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	9e 83       	std	Y+6, r25	; 0x06
    137c:	8d 83       	std	Y+5, r24	; 0x05
    137e:	8d 81       	ldd	r24, Y+5	; 0x05
    1380:	9e 81       	ldd	r25, Y+6	; 0x06
    1382:	9a 83       	std	Y+2, r25	; 0x02
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	9a 81       	ldd	r25, Y+2	; 0x02
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	f1 f7       	brne	.-4      	; 0x138a <sendPasswordViaUART+0x10e>
    138e:	9a 83       	std	Y+2, r25	; 0x02
    1390:	89 83       	std	Y+1, r24	; 0x01

void sendPasswordViaUART(uint8 * passwordArray)
{
	uint8 cnt;

	for (cnt = 0; cnt < PASSWORD_LENGTH; cnt++)
    1392:	8f 85       	ldd	r24, Y+15	; 0x0f
    1394:	8f 5f       	subi	r24, 0xFF	; 255
    1396:	8f 87       	std	Y+15, r24	; 0x0f
    1398:	8f 85       	ldd	r24, Y+15	; 0x0f
    139a:	85 30       	cpi	r24, 0x05	; 5
    139c:	08 f4       	brcc	.+2      	; 0x13a0 <sendPasswordViaUART+0x124>
    139e:	7c cf       	rjmp	.-264    	; 0x1298 <sendPasswordViaUART+0x1c>
	{
		UART_sendByte(passwordArray[cnt]);
		_delay_ms(100);
	}
}
    13a0:	61 96       	adiw	r28, 0x11	; 17
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <__vector_9>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    13b2:	1f 92       	push	r1
    13b4:	0f 92       	push	r0
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	0f 92       	push	r0
    13ba:	11 24       	eor	r1, r1
    13bc:	2f 93       	push	r18
    13be:	3f 93       	push	r19
    13c0:	4f 93       	push	r20
    13c2:	5f 93       	push	r21
    13c4:	6f 93       	push	r22
    13c6:	7f 93       	push	r23
    13c8:	8f 93       	push	r24
    13ca:	9f 93       	push	r25
    13cc:	af 93       	push	r26
    13ce:	bf 93       	push	r27
    13d0:	ef 93       	push	r30
    13d2:	ff 93       	push	r31
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR)
    13dc:	80 91 1b 01 	lds	r24, 0x011B
    13e0:	90 91 1c 01 	lds	r25, 0x011C
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	29 f0       	breq	.+10     	; 0x13f2 <__vector_9+0x40>
	{
		(*g_Timer0CallBackPtr)();
    13e8:	e0 91 1b 01 	lds	r30, 0x011B
    13ec:	f0 91 1c 01 	lds	r31, 0x011C
    13f0:	09 95       	icall
	}
}
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	ff 91       	pop	r31
    13f8:	ef 91       	pop	r30
    13fa:	bf 91       	pop	r27
    13fc:	af 91       	pop	r26
    13fe:	9f 91       	pop	r25
    1400:	8f 91       	pop	r24
    1402:	7f 91       	pop	r23
    1404:	6f 91       	pop	r22
    1406:	5f 91       	pop	r21
    1408:	4f 91       	pop	r20
    140a:	3f 91       	pop	r19
    140c:	2f 91       	pop	r18
    140e:	0f 90       	pop	r0
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	0f 90       	pop	r0
    1414:	1f 90       	pop	r1
    1416:	18 95       	reti

00001418 <__vector_19>:

/* Timer0 compare */
ISR(TIMER0_COMP_vect)
{
    1418:	1f 92       	push	r1
    141a:	0f 92       	push	r0
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	0f 92       	push	r0
    1420:	11 24       	eor	r1, r1
    1422:	2f 93       	push	r18
    1424:	3f 93       	push	r19
    1426:	4f 93       	push	r20
    1428:	5f 93       	push	r21
    142a:	6f 93       	push	r22
    142c:	7f 93       	push	r23
    142e:	8f 93       	push	r24
    1430:	9f 93       	push	r25
    1432:	af 93       	push	r26
    1434:	bf 93       	push	r27
    1436:	ef 93       	push	r30
    1438:	ff 93       	push	r31
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR)
    1442:	80 91 1b 01 	lds	r24, 0x011B
    1446:	90 91 1c 01 	lds	r25, 0x011C
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	29 f0       	breq	.+10     	; 0x1458 <__vector_19+0x40>
	{
		(*g_Timer0CallBackPtr)();
    144e:	e0 91 1b 01 	lds	r30, 0x011B
    1452:	f0 91 1c 01 	lds	r31, 0x011C
    1456:	09 95       	icall
	}
}
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	ff 91       	pop	r31
    145e:	ef 91       	pop	r30
    1460:	bf 91       	pop	r27
    1462:	af 91       	pop	r26
    1464:	9f 91       	pop	r25
    1466:	8f 91       	pop	r24
    1468:	7f 91       	pop	r23
    146a:	6f 91       	pop	r22
    146c:	5f 91       	pop	r21
    146e:	4f 91       	pop	r20
    1470:	3f 91       	pop	r19
    1472:	2f 91       	pop	r18
    1474:	0f 90       	pop	r0
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	0f 90       	pop	r0
    147a:	1f 90       	pop	r1
    147c:	18 95       	reti

0000147e <__vector_8>:

/* Timer1 overflow*/
ISR(TIMER1_OVF_vect)
{
    147e:	1f 92       	push	r1
    1480:	0f 92       	push	r0
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	0f 92       	push	r0
    1486:	11 24       	eor	r1, r1
    1488:	2f 93       	push	r18
    148a:	3f 93       	push	r19
    148c:	4f 93       	push	r20
    148e:	5f 93       	push	r21
    1490:	6f 93       	push	r22
    1492:	7f 93       	push	r23
    1494:	8f 93       	push	r24
    1496:	9f 93       	push	r25
    1498:	af 93       	push	r26
    149a:	bf 93       	push	r27
    149c:	ef 93       	push	r30
    149e:	ff 93       	push	r31
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR)
    14a8:	80 91 1d 01 	lds	r24, 0x011D
    14ac:	90 91 1e 01 	lds	r25, 0x011E
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	29 f0       	breq	.+10     	; 0x14be <__vector_8+0x40>
	{
		(*g_Timer1CallBackPtr)();
    14b4:	e0 91 1d 01 	lds	r30, 0x011D
    14b8:	f0 91 1e 01 	lds	r31, 0x011E
    14bc:	09 95       	icall
	}
}
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	ff 91       	pop	r31
    14c4:	ef 91       	pop	r30
    14c6:	bf 91       	pop	r27
    14c8:	af 91       	pop	r26
    14ca:	9f 91       	pop	r25
    14cc:	8f 91       	pop	r24
    14ce:	7f 91       	pop	r23
    14d0:	6f 91       	pop	r22
    14d2:	5f 91       	pop	r21
    14d4:	4f 91       	pop	r20
    14d6:	3f 91       	pop	r19
    14d8:	2f 91       	pop	r18
    14da:	0f 90       	pop	r0
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	0f 90       	pop	r0
    14e0:	1f 90       	pop	r1
    14e2:	18 95       	reti

000014e4 <__vector_6>:

/* Timer1 compare */
ISR(TIMER1_COMPA_vect)
{
    14e4:	1f 92       	push	r1
    14e6:	0f 92       	push	r0
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	0f 92       	push	r0
    14ec:	11 24       	eor	r1, r1
    14ee:	2f 93       	push	r18
    14f0:	3f 93       	push	r19
    14f2:	4f 93       	push	r20
    14f4:	5f 93       	push	r21
    14f6:	6f 93       	push	r22
    14f8:	7f 93       	push	r23
    14fa:	8f 93       	push	r24
    14fc:	9f 93       	push	r25
    14fe:	af 93       	push	r26
    1500:	bf 93       	push	r27
    1502:	ef 93       	push	r30
    1504:	ff 93       	push	r31
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR)
    150e:	80 91 1d 01 	lds	r24, 0x011D
    1512:	90 91 1e 01 	lds	r25, 0x011E
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	29 f0       	breq	.+10     	; 0x1524 <__vector_6+0x40>
	{
		(*g_Timer1CallBackPtr)();
    151a:	e0 91 1d 01 	lds	r30, 0x011D
    151e:	f0 91 1e 01 	lds	r31, 0x011E
    1522:	09 95       	icall
	}
}
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	ff 91       	pop	r31
    152a:	ef 91       	pop	r30
    152c:	bf 91       	pop	r27
    152e:	af 91       	pop	r26
    1530:	9f 91       	pop	r25
    1532:	8f 91       	pop	r24
    1534:	7f 91       	pop	r23
    1536:	6f 91       	pop	r22
    1538:	5f 91       	pop	r21
    153a:	4f 91       	pop	r20
    153c:	3f 91       	pop	r19
    153e:	2f 91       	pop	r18
    1540:	0f 90       	pop	r0
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	0f 90       	pop	r0
    1546:	1f 90       	pop	r1
    1548:	18 95       	reti

0000154a <__vector_4>:

/* Timer2 overflow*/
ISR(TIMER2_OVF_vect)
{
    154a:	1f 92       	push	r1
    154c:	0f 92       	push	r0
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	0f 92       	push	r0
    1552:	11 24       	eor	r1, r1
    1554:	2f 93       	push	r18
    1556:	3f 93       	push	r19
    1558:	4f 93       	push	r20
    155a:	5f 93       	push	r21
    155c:	6f 93       	push	r22
    155e:	7f 93       	push	r23
    1560:	8f 93       	push	r24
    1562:	9f 93       	push	r25
    1564:	af 93       	push	r26
    1566:	bf 93       	push	r27
    1568:	ef 93       	push	r30
    156a:	ff 93       	push	r31
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR)
    1574:	80 91 1f 01 	lds	r24, 0x011F
    1578:	90 91 20 01 	lds	r25, 0x0120
    157c:	00 97       	sbiw	r24, 0x00	; 0
    157e:	29 f0       	breq	.+10     	; 0x158a <__vector_4+0x40>
	{
		(*g_Timer2CallBackPtr)();
    1580:	e0 91 1f 01 	lds	r30, 0x011F
    1584:	f0 91 20 01 	lds	r31, 0x0120
    1588:	09 95       	icall
	}
}
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	ff 91       	pop	r31
    1590:	ef 91       	pop	r30
    1592:	bf 91       	pop	r27
    1594:	af 91       	pop	r26
    1596:	9f 91       	pop	r25
    1598:	8f 91       	pop	r24
    159a:	7f 91       	pop	r23
    159c:	6f 91       	pop	r22
    159e:	5f 91       	pop	r21
    15a0:	4f 91       	pop	r20
    15a2:	3f 91       	pop	r19
    15a4:	2f 91       	pop	r18
    15a6:	0f 90       	pop	r0
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	0f 90       	pop	r0
    15ac:	1f 90       	pop	r1
    15ae:	18 95       	reti

000015b0 <__vector_3>:

/* Timer2 compare */
ISR(TIMER2_COMP_vect)
{
    15b0:	1f 92       	push	r1
    15b2:	0f 92       	push	r0
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	0f 92       	push	r0
    15b8:	11 24       	eor	r1, r1
    15ba:	2f 93       	push	r18
    15bc:	3f 93       	push	r19
    15be:	4f 93       	push	r20
    15c0:	5f 93       	push	r21
    15c2:	6f 93       	push	r22
    15c4:	7f 93       	push	r23
    15c6:	8f 93       	push	r24
    15c8:	9f 93       	push	r25
    15ca:	af 93       	push	r26
    15cc:	bf 93       	push	r27
    15ce:	ef 93       	push	r30
    15d0:	ff 93       	push	r31
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR)
    15da:	80 91 1f 01 	lds	r24, 0x011F
    15de:	90 91 20 01 	lds	r25, 0x0120
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	29 f0       	breq	.+10     	; 0x15f0 <__vector_3+0x40>
	{
		(*g_Timer2CallBackPtr)();
    15e6:	e0 91 1f 01 	lds	r30, 0x011F
    15ea:	f0 91 20 01 	lds	r31, 0x0120
    15ee:	09 95       	icall
	}
}
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	ff 91       	pop	r31
    15f6:	ef 91       	pop	r30
    15f8:	bf 91       	pop	r27
    15fa:	af 91       	pop	r26
    15fc:	9f 91       	pop	r25
    15fe:	8f 91       	pop	r24
    1600:	7f 91       	pop	r23
    1602:	6f 91       	pop	r22
    1604:	5f 91       	pop	r21
    1606:	4f 91       	pop	r20
    1608:	3f 91       	pop	r19
    160a:	2f 91       	pop	r18
    160c:	0f 90       	pop	r0
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	0f 90       	pop	r0
    1612:	1f 90       	pop	r1
    1614:	18 95       	reti

00001616 <Timer2_setCallBack>:
void Timer2_setCallBack(void(*a_ptr)(void))
{
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	00 d0       	rcall	.+0      	; 0x161c <Timer2_setCallBack+0x6>
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	9a 83       	std	Y+2, r25	; 0x02
    1622:	89 83       	std	Y+1, r24	; 0x01
	g_Timer2CallBackPtr = a_ptr;
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	9a 81       	ldd	r25, Y+2	; 0x02
    1628:	90 93 20 01 	sts	0x0120, r25
    162c:	80 93 1f 01 	sts	0x011F, r24
}
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	00 d0       	rcall	.+0      	; 0x1640 <Timer1_setCallBack+0x6>
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	9a 83       	std	Y+2, r25	; 0x02
    1646:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1CallBackPtr = a_ptr;
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	9a 81       	ldd	r25, Y+2	; 0x02
    164c:	90 93 1e 01 	sts	0x011E, r25
    1650:	80 93 1d 01 	sts	0x011D, r24
}
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <Timer0_setCallBack>:

void Timer0_setCallBack(void(*a_ptr)(void))
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	00 d0       	rcall	.+0      	; 0x1664 <Timer0_setCallBack+0x6>
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	9a 83       	std	Y+2, r25	; 0x02
    166a:	89 83       	std	Y+1, r24	; 0x01
	g_Timer2CallBackPtr = a_ptr;
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	9a 81       	ldd	r25, Y+2	; 0x02
    1670:	90 93 20 01 	sts	0x0120, r25
    1674:	80 93 1f 01 	sts	0x011F, r24
}
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	08 95       	ret

00001682 <Timer_init>:
void Timer_init(const TIMER_Config *Config_ptr)
{
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	00 d0       	rcall	.+0      	; 0x1688 <Timer_init+0x6>
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	9a 83       	std	Y+2, r25	; 0x02
    168e:	89 83       	std	Y+1, r24	; 0x01
if (Config_ptr -> Timer_ID == Timer0)
    1690:	e9 81       	ldd	r30, Y+1	; 0x01
    1692:	fa 81       	ldd	r31, Y+2	; 0x02
    1694:	80 81       	ld	r24, Z
    1696:	88 23       	and	r24, r24
    1698:	09 f0       	breq	.+2      	; 0x169c <Timer_init+0x1a>
    169a:	52 c0       	rjmp	.+164    	; 0x1740 <Timer_init+0xbe>
{
		/* starting with adjusting common bits for the timer, then mode-specific bits */

		SET_BIT(TCCR0,FOC0); /* for non-PWM */
    169c:	a3 e5       	ldi	r26, 0x53	; 83
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e3 e5       	ldi	r30, 0x53	; 83
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	80 68       	ori	r24, 0x80	; 128
    16a8:	8c 93       	st	X, r24
		TCNT0 =Config_ptr -> Initial_Value;
    16aa:	a2 e5       	ldi	r26, 0x52	; 82
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e9 81       	ldd	r30, Y+1	; 0x01
    16b0:	fa 81       	ldd	r31, Y+2	; 0x02
    16b2:	85 81       	ldd	r24, Z+5	; 0x05
    16b4:	96 81       	ldd	r25, Z+6	; 0x06
    16b6:	8c 93       	st	X, r24
		TCCR0 = 0;
    16b8:	e3 e5       	ldi	r30, 0x53	; 83
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	10 82       	st	Z, r1
		TCCR0 |= (Config_ptr -> clk_selection);
    16be:	a3 e5       	ldi	r26, 0x53	; 83
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e3 e5       	ldi	r30, 0x53	; 83
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	90 81       	ld	r25, Z
    16c8:	e9 81       	ldd	r30, Y+1	; 0x01
    16ca:	fa 81       	ldd	r31, Y+2	; 0x02
    16cc:	82 81       	ldd	r24, Z+2	; 0x02
    16ce:	89 2b       	or	r24, r25
    16d0:	8c 93       	st	X, r24

		if (Config_ptr -> mode == NORMAL)
    16d2:	e9 81       	ldd	r30, Y+1	; 0x01
    16d4:	fa 81       	ldd	r31, Y+2	; 0x02
    16d6:	81 81       	ldd	r24, Z+1	; 0x01
    16d8:	88 23       	and	r24, r24
    16da:	79 f4       	brne	.+30     	; 0x16fa <Timer_init+0x78>
		{
			SET_BIT(TIMSK,TOIE0); /* enable interrupts for overflow mode */
    16dc:	a9 e5       	ldi	r26, 0x59	; 89
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e9 e5       	ldi	r30, 0x59	; 89
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	81 60       	ori	r24, 0x01	; 1
    16e8:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV0); /* enable overflow flag */
    16ea:	a8 e5       	ldi	r26, 0x58	; 88
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e8 e5       	ldi	r30, 0x58	; 88
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	81 60       	ori	r24, 0x01	; 1
    16f6:	8c 93       	st	X, r24
    16f8:	d8 c0       	rjmp	.+432    	; 0x18aa <Timer_init+0x228>

		}
		else if (Config_ptr -> mode == CTC)
    16fa:	e9 81       	ldd	r30, Y+1	; 0x01
    16fc:	fa 81       	ldd	r31, Y+2	; 0x02
    16fe:	81 81       	ldd	r24, Z+1	; 0x01
    1700:	82 30       	cpi	r24, 0x02	; 2
    1702:	09 f0       	breq	.+2      	; 0x1706 <Timer_init+0x84>
    1704:	d2 c0       	rjmp	.+420    	; 0x18aa <Timer_init+0x228>
		{
			SET_BIT(TCCR0,WGM01);
    1706:	a3 e5       	ldi	r26, 0x53	; 83
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e3 e5       	ldi	r30, 0x53	; 83
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	88 60       	ori	r24, 0x08	; 8
    1712:	8c 93       	st	X, r24
			OCR0 = Config_ptr -> CompareValue;
    1714:	ac e5       	ldi	r26, 0x5C	; 92
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e9 81       	ldd	r30, Y+1	; 0x01
    171a:	fa 81       	ldd	r31, Y+2	; 0x02
    171c:	83 81       	ldd	r24, Z+3	; 0x03
    171e:	94 81       	ldd	r25, Z+4	; 0x04
    1720:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE0); /* enable interrupts for CTC mode */
    1722:	a9 e5       	ldi	r26, 0x59	; 89
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e9 e5       	ldi	r30, 0x59	; 89
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	82 60       	ori	r24, 0x02	; 2
    172e:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF0); /* enable CTC flag */
    1730:	a8 e5       	ldi	r26, 0x58	; 88
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e8 e5       	ldi	r30, 0x58	; 88
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	82 60       	ori	r24, 0x02	; 2
    173c:	8c 93       	st	X, r24
    173e:	b5 c0       	rjmp	.+362    	; 0x18aa <Timer_init+0x228>
		}



	}
else if (Config_ptr -> Timer_ID == Timer1)
    1740:	e9 81       	ldd	r30, Y+1	; 0x01
    1742:	fa 81       	ldd	r31, Y+2	; 0x02
    1744:	80 81       	ld	r24, Z
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	09 f0       	breq	.+2      	; 0x174c <Timer_init+0xca>
    174a:	59 c0       	rjmp	.+178    	; 0x17fe <Timer_init+0x17c>
	{
		TCCR1A =0;
    174c:	ef e4       	ldi	r30, 0x4F	; 79
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	10 82       	st	Z, r1
		SET_BIT(TCCR1A,FOC1A); /* for non-PWM mode */
    1752:	af e4       	ldi	r26, 0x4F	; 79
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	ef e4       	ldi	r30, 0x4F	; 79
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	88 60       	ori	r24, 0x08	; 8
    175e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    1760:	af e4       	ldi	r26, 0x4F	; 79
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	ef e4       	ldi	r30, 0x4F	; 79
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	84 60       	ori	r24, 0x04	; 4
    176c:	8c 93       	st	X, r24
		TCCR1B = Config_ptr -> clk_selection;
    176e:	ae e4       	ldi	r26, 0x4E	; 78
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e9 81       	ldd	r30, Y+1	; 0x01
    1774:	fa 81       	ldd	r31, Y+2	; 0x02
    1776:	82 81       	ldd	r24, Z+2	; 0x02
    1778:	8c 93       	st	X, r24
		TCNT1 = Config_ptr -> Initial_Value;
    177a:	ac e4       	ldi	r26, 0x4C	; 76
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e9 81       	ldd	r30, Y+1	; 0x01
    1780:	fa 81       	ldd	r31, Y+2	; 0x02
    1782:	85 81       	ldd	r24, Z+5	; 0x05
    1784:	96 81       	ldd	r25, Z+6	; 0x06
    1786:	11 96       	adiw	r26, 0x01	; 1
    1788:	9c 93       	st	X, r25
    178a:	8e 93       	st	-X, r24

		if (Config_ptr -> mode == NORMAL)
    178c:	e9 81       	ldd	r30, Y+1	; 0x01
    178e:	fa 81       	ldd	r31, Y+2	; 0x02
    1790:	81 81       	ldd	r24, Z+1	; 0x01
    1792:	88 23       	and	r24, r24
    1794:	79 f4       	brne	.+30     	; 0x17b4 <Timer_init+0x132>
		{
			SET_BIT(TIMSK, TOIE1); /* enable interrupts for overflow mode */
    1796:	a9 e5       	ldi	r26, 0x59	; 89
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e9 e5       	ldi	r30, 0x59	; 89
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	84 60       	ori	r24, 0x04	; 4
    17a2:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV1);
    17a4:	a8 e5       	ldi	r26, 0x58	; 88
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e8 e5       	ldi	r30, 0x58	; 88
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	84 60       	ori	r24, 0x04	; 4
    17b0:	8c 93       	st	X, r24
    17b2:	7b c0       	rjmp	.+246    	; 0x18aa <Timer_init+0x228>

		}
		else if (Config_ptr -> mode == CTC)
    17b4:	e9 81       	ldd	r30, Y+1	; 0x01
    17b6:	fa 81       	ldd	r31, Y+2	; 0x02
    17b8:	81 81       	ldd	r24, Z+1	; 0x01
    17ba:	82 30       	cpi	r24, 0x02	; 2
    17bc:	09 f0       	breq	.+2      	; 0x17c0 <Timer_init+0x13e>
    17be:	75 c0       	rjmp	.+234    	; 0x18aa <Timer_init+0x228>
		{
			SET_BIT(TCCR1B, WGM12);
    17c0:	ae e4       	ldi	r26, 0x4E	; 78
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	ee e4       	ldi	r30, 0x4E	; 78
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	88 60       	ori	r24, 0x08	; 8
    17cc:	8c 93       	st	X, r24
			OCR1A = Config_ptr -> CompareValue;
    17ce:	aa e4       	ldi	r26, 0x4A	; 74
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e9 81       	ldd	r30, Y+1	; 0x01
    17d4:	fa 81       	ldd	r31, Y+2	; 0x02
    17d6:	83 81       	ldd	r24, Z+3	; 0x03
    17d8:	94 81       	ldd	r25, Z+4	; 0x04
    17da:	11 96       	adiw	r26, 0x01	; 1
    17dc:	9c 93       	st	X, r25
    17de:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, OCIE1A); /* enable interrupts for CTC mode */
    17e0:	a9 e5       	ldi	r26, 0x59	; 89
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e9 e5       	ldi	r30, 0x59	; 89
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	80 61       	ori	r24, 0x10	; 16
    17ec:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF1A); /* enable CTC flag */
    17ee:	a8 e5       	ldi	r26, 0x58	; 88
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e8 e5       	ldi	r30, 0x58	; 88
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	80 61       	ori	r24, 0x10	; 16
    17fa:	8c 93       	st	X, r24
    17fc:	56 c0       	rjmp	.+172    	; 0x18aa <Timer_init+0x228>
		}



	}
else if (Config_ptr -> Timer_ID == Timer2)
    17fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1800:	fa 81       	ldd	r31, Y+2	; 0x02
    1802:	80 81       	ld	r24, Z
    1804:	82 30       	cpi	r24, 0x02	; 2
    1806:	09 f0       	breq	.+2      	; 0x180a <Timer_init+0x188>
    1808:	50 c0       	rjmp	.+160    	; 0x18aa <Timer_init+0x228>
{
		SET_BIT(TCCR2, FOC2); /* for non-PWM */
    180a:	a5 e4       	ldi	r26, 0x45	; 69
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e5 e4       	ldi	r30, 0x45	; 69
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	80 68       	ori	r24, 0x80	; 128
    1816:	8c 93       	st	X, r24
		TCNT2 = Config_ptr -> Initial_Value;
    1818:	a4 e4       	ldi	r26, 0x44	; 68
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e9 81       	ldd	r30, Y+1	; 0x01
    181e:	fa 81       	ldd	r31, Y+2	; 0x02
    1820:	85 81       	ldd	r24, Z+5	; 0x05
    1822:	96 81       	ldd	r25, Z+6	; 0x06
    1824:	8c 93       	st	X, r24
		TCCR2 = 0;
    1826:	e5 e4       	ldi	r30, 0x45	; 69
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	10 82       	st	Z, r1
		TCCR2 |= (Config_ptr -> clk_selection);
    182c:	a5 e4       	ldi	r26, 0x45	; 69
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e5 e4       	ldi	r30, 0x45	; 69
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	90 81       	ld	r25, Z
    1836:	e9 81       	ldd	r30, Y+1	; 0x01
    1838:	fa 81       	ldd	r31, Y+2	; 0x02
    183a:	82 81       	ldd	r24, Z+2	; 0x02
    183c:	89 2b       	or	r24, r25
    183e:	8c 93       	st	X, r24

		if (Config_ptr -> mode == NORMAL)
    1840:	e9 81       	ldd	r30, Y+1	; 0x01
    1842:	fa 81       	ldd	r31, Y+2	; 0x02
    1844:	81 81       	ldd	r24, Z+1	; 0x01
    1846:	88 23       	and	r24, r24
    1848:	79 f4       	brne	.+30     	; 0x1868 <Timer_init+0x1e6>
		{
			SET_BIT(TIMSK, TOIE2); /* enable interrupts for overflow mode */
    184a:	a9 e5       	ldi	r26, 0x59	; 89
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e9 e5       	ldi	r30, 0x59	; 89
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	80 64       	ori	r24, 0x40	; 64
    1856:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV2); /* enable overflow flag */
    1858:	a8 e5       	ldi	r26, 0x58	; 88
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e8 e5       	ldi	r30, 0x58	; 88
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	80 64       	ori	r24, 0x40	; 64
    1864:	8c 93       	st	X, r24
    1866:	21 c0       	rjmp	.+66     	; 0x18aa <Timer_init+0x228>

		}
		else if (Config_ptr -> mode == CTC)
    1868:	e9 81       	ldd	r30, Y+1	; 0x01
    186a:	fa 81       	ldd	r31, Y+2	; 0x02
    186c:	81 81       	ldd	r24, Z+1	; 0x01
    186e:	82 30       	cpi	r24, 0x02	; 2
    1870:	e1 f4       	brne	.+56     	; 0x18aa <Timer_init+0x228>
		{
			SET_BIT(TCCR0, WGM21);
    1872:	a3 e5       	ldi	r26, 0x53	; 83
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e3 e5       	ldi	r30, 0x53	; 83
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	88 60       	ori	r24, 0x08	; 8
    187e:	8c 93       	st	X, r24
			OCR2 = Config_ptr -> CompareValue;
    1880:	a3 e4       	ldi	r26, 0x43	; 67
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e9 81       	ldd	r30, Y+1	; 0x01
    1886:	fa 81       	ldd	r31, Y+2	; 0x02
    1888:	83 81       	ldd	r24, Z+3	; 0x03
    188a:	94 81       	ldd	r25, Z+4	; 0x04
    188c:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE2); /* enable interrupts for CTC mode */
    188e:	a9 e5       	ldi	r26, 0x59	; 89
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e9 e5       	ldi	r30, 0x59	; 89
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	80 68       	ori	r24, 0x80	; 128
    189a:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF2); /* enable CTC flag */
    189c:	a8 e5       	ldi	r26, 0x58	; 88
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e8 e5       	ldi	r30, 0x58	; 88
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	80 68       	ori	r24, 0x80	; 128
    18a8:	8c 93       	st	X, r24
		}
	}
}
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <Timer_DeInit>:


void Timer_DeInit(TIMER_ID timer_ID)
{
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	0f 92       	push	r0
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	89 83       	std	Y+1, r24	; 0x01
	if (timer_ID == Timer0)
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	88 23       	and	r24, r24
    18c4:	e1 f4       	brne	.+56     	; 0x18fe <Timer_DeInit+0x4a>
	{
		TCCR0 = 0;
    18c6:	e3 e5       	ldi	r30, 0x53	; 83
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	10 82       	st	Z, r1
		TCNT0= 0; /* clear initial value */
    18cc:	e2 e5       	ldi	r30, 0x52	; 82
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	10 82       	st	Z, r1
		OCR0 = 0; /* clear compare value for CTC mode*/
    18d2:	ec e5       	ldi	r30, 0x5C	; 92
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE0); /* disable interrupts for CTC mode */
    18d8:	a9 e5       	ldi	r26, 0x59	; 89
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e9 e5       	ldi	r30, 0x59	; 89
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	8d 7f       	andi	r24, 0xFD	; 253
    18e4:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE0); /* disable interrupts for overflow mode */
    18e6:	a9 e5       	ldi	r26, 0x59	; 89
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e9 e5       	ldi	r30, 0x59	; 89
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	8e 7f       	andi	r24, 0xFE	; 254
    18f2:	8c 93       	st	X, r24
		g_Timer0CallBackPtr = NULL_PTR; /* clear the call-back function */
    18f4:	10 92 1c 01 	sts	0x011C, r1
    18f8:	10 92 1b 01 	sts	0x011B, r1
    18fc:	42 c0       	rjmp	.+132    	; 0x1982 <Timer_DeInit+0xce>

	}
	else if (timer_ID == Timer1)
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	81 30       	cpi	r24, 0x01	; 1
    1902:	09 f5       	brne	.+66     	; 0x1946 <Timer_DeInit+0x92>
	{
		TCCR1A =0;
    1904:	ef e4       	ldi	r30, 0x4F	; 79
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	10 82       	st	Z, r1
		TCCR1B = 0; /* disable clock */
    190a:	ee e4       	ldi	r30, 0x4E	; 78
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	10 82       	st	Z, r1
		TCNT1 = 0;
    1910:	ec e4       	ldi	r30, 0x4C	; 76
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	11 82       	std	Z+1, r1	; 0x01
    1916:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, TOIE1); /* disable interrupts for overflow mode */
    1918:	a9 e5       	ldi	r26, 0x59	; 89
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e9 e5       	ldi	r30, 0x59	; 89
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	8b 7f       	andi	r24, 0xFB	; 251
    1924:	8c 93       	st	X, r24
		OCR1A = 0;  /* clear compare value for CTC mode */
    1926:	ea e4       	ldi	r30, 0x4A	; 74
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	11 82       	std	Z+1, r1	; 0x01
    192c:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE1A); /* disable interrupts for CTC mode */
    192e:	a9 e5       	ldi	r26, 0x59	; 89
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e9 e5       	ldi	r30, 0x59	; 89
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	8f 7e       	andi	r24, 0xEF	; 239
    193a:	8c 93       	st	X, r24
		g_Timer1CallBackPtr = NULL_PTR;
    193c:	10 92 1e 01 	sts	0x011E, r1
    1940:	10 92 1d 01 	sts	0x011D, r1
    1944:	1e c0       	rjmp	.+60     	; 0x1982 <Timer_DeInit+0xce>

	}
	else if (timer_ID == Timer2)
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	82 30       	cpi	r24, 0x02	; 2
    194a:	d9 f4       	brne	.+54     	; 0x1982 <Timer_DeInit+0xce>
	{
		TCCR2 = 0;
    194c:	e5 e4       	ldi	r30, 0x45	; 69
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	10 82       	st	Z, r1
		TCNT2 = 0; /* clear initial value */
    1952:	e4 e4       	ldi	r30, 0x44	; 68
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	10 82       	st	Z, r1
		OCR2 = 0; /* clear compare value for CTC mode*/
    1958:	e3 e4       	ldi	r30, 0x43	; 67
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE2); /* disable interrupts for CTC mode */
    195e:	a9 e5       	ldi	r26, 0x59	; 89
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e9 e5       	ldi	r30, 0x59	; 89
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	8f 77       	andi	r24, 0x7F	; 127
    196a:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE2); /* disable interrupts for overflow mode */
    196c:	a9 e5       	ldi	r26, 0x59	; 89
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e9 e5       	ldi	r30, 0x59	; 89
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	8f 7b       	andi	r24, 0xBF	; 191
    1978:	8c 93       	st	X, r24
		g_Timer2CallBackPtr = NULL_PTR;
    197a:	10 92 20 01 	sts	0x0120, r1
    197e:	10 92 1f 01 	sts	0x011F, r1
	}
}
    1982:	0f 90       	pop	r0
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	00 d0       	rcall	.+0      	; 0x1990 <GPIO_setupPinDirection+0x6>
    1990:	00 d0       	rcall	.+0      	; 0x1992 <GPIO_setupPinDirection+0x8>
    1992:	0f 92       	push	r0
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	6a 83       	std	Y+2, r22	; 0x02
    199c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	88 30       	cpi	r24, 0x08	; 8
    19a2:	08 f0       	brcs	.+2      	; 0x19a6 <GPIO_setupPinDirection+0x1c>
    19a4:	d5 c0       	rjmp	.+426    	; 0x1b50 <GPIO_setupPinDirection+0x1c6>
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	84 30       	cpi	r24, 0x04	; 4
    19aa:	08 f0       	brcs	.+2      	; 0x19ae <GPIO_setupPinDirection+0x24>
    19ac:	d1 c0       	rjmp	.+418    	; 0x1b50 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	3d 83       	std	Y+5, r19	; 0x05
    19b6:	2c 83       	std	Y+4, r18	; 0x04
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	9d 81       	ldd	r25, Y+5	; 0x05
    19bc:	81 30       	cpi	r24, 0x01	; 1
    19be:	91 05       	cpc	r25, r1
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <GPIO_setupPinDirection+0x3a>
    19c2:	43 c0       	rjmp	.+134    	; 0x1a4a <GPIO_setupPinDirection+0xc0>
    19c4:	2c 81       	ldd	r18, Y+4	; 0x04
    19c6:	3d 81       	ldd	r19, Y+5	; 0x05
    19c8:	22 30       	cpi	r18, 0x02	; 2
    19ca:	31 05       	cpc	r19, r1
    19cc:	2c f4       	brge	.+10     	; 0x19d8 <GPIO_setupPinDirection+0x4e>
    19ce:	8c 81       	ldd	r24, Y+4	; 0x04
    19d0:	9d 81       	ldd	r25, Y+5	; 0x05
    19d2:	00 97       	sbiw	r24, 0x00	; 0
    19d4:	71 f0       	breq	.+28     	; 0x19f2 <GPIO_setupPinDirection+0x68>
    19d6:	bc c0       	rjmp	.+376    	; 0x1b50 <GPIO_setupPinDirection+0x1c6>
    19d8:	2c 81       	ldd	r18, Y+4	; 0x04
    19da:	3d 81       	ldd	r19, Y+5	; 0x05
    19dc:	22 30       	cpi	r18, 0x02	; 2
    19de:	31 05       	cpc	r19, r1
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <GPIO_setupPinDirection+0x5a>
    19e2:	5f c0       	rjmp	.+190    	; 0x1aa2 <GPIO_setupPinDirection+0x118>
    19e4:	8c 81       	ldd	r24, Y+4	; 0x04
    19e6:	9d 81       	ldd	r25, Y+5	; 0x05
    19e8:	83 30       	cpi	r24, 0x03	; 3
    19ea:	91 05       	cpc	r25, r1
    19ec:	09 f4       	brne	.+2      	; 0x19f0 <GPIO_setupPinDirection+0x66>
    19ee:	85 c0       	rjmp	.+266    	; 0x1afa <GPIO_setupPinDirection+0x170>
    19f0:	af c0       	rjmp	.+350    	; 0x1b50 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	81 30       	cpi	r24, 0x01	; 1
    19f6:	a1 f4       	brne	.+40     	; 0x1a20 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    19f8:	aa e3       	ldi	r26, 0x3A	; 58
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	ea e3       	ldi	r30, 0x3A	; 58
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	48 2f       	mov	r20, r24
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	02 2e       	mov	r0, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <GPIO_setupPinDirection+0x8c>
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	0a 94       	dec	r0
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <GPIO_setupPinDirection+0x88>
    1a1a:	84 2b       	or	r24, r20
    1a1c:	8c 93       	st	X, r24
    1a1e:	98 c0       	rjmp	.+304    	; 0x1b50 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1a20:	aa e3       	ldi	r26, 0x3A	; 58
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	ea e3       	ldi	r30, 0x3A	; 58
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	48 2f       	mov	r20, r24
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 2e       	mov	r0, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <GPIO_setupPinDirection+0xb4>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	0a 94       	dec	r0
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <GPIO_setupPinDirection+0xb0>
    1a42:	80 95       	com	r24
    1a44:	84 23       	and	r24, r20
    1a46:	8c 93       	st	X, r24
    1a48:	83 c0       	rjmp	.+262    	; 0x1b50 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	81 30       	cpi	r24, 0x01	; 1
    1a4e:	a1 f4       	brne	.+40     	; 0x1a78 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1a50:	a7 e3       	ldi	r26, 0x37	; 55
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e7 e3       	ldi	r30, 0x37	; 55
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	48 2f       	mov	r20, r24
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	02 2e       	mov	r0, r18
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <GPIO_setupPinDirection+0xe4>
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	0a 94       	dec	r0
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <GPIO_setupPinDirection+0xe0>
    1a72:	84 2b       	or	r24, r20
    1a74:	8c 93       	st	X, r24
    1a76:	6c c0       	rjmp	.+216    	; 0x1b50 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1a78:	a7 e3       	ldi	r26, 0x37	; 55
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e7 e3       	ldi	r30, 0x37	; 55
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	48 2f       	mov	r20, r24
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	02 2e       	mov	r0, r18
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <GPIO_setupPinDirection+0x10c>
    1a92:	88 0f       	add	r24, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	0a 94       	dec	r0
    1a98:	e2 f7       	brpl	.-8      	; 0x1a92 <GPIO_setupPinDirection+0x108>
    1a9a:	80 95       	com	r24
    1a9c:	84 23       	and	r24, r20
    1a9e:	8c 93       	st	X, r24
    1aa0:	57 c0       	rjmp	.+174    	; 0x1b50 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	81 30       	cpi	r24, 0x01	; 1
    1aa6:	a1 f4       	brne	.+40     	; 0x1ad0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1aa8:	a4 e3       	ldi	r26, 0x34	; 52
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e4 e3       	ldi	r30, 0x34	; 52
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	48 2f       	mov	r20, r24
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	02 2e       	mov	r0, r18
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <GPIO_setupPinDirection+0x13c>
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	0a 94       	dec	r0
    1ac8:	e2 f7       	brpl	.-8      	; 0x1ac2 <GPIO_setupPinDirection+0x138>
    1aca:	84 2b       	or	r24, r20
    1acc:	8c 93       	st	X, r24
    1ace:	40 c0       	rjmp	.+128    	; 0x1b50 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1ad0:	a4 e3       	ldi	r26, 0x34	; 52
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e4 e3       	ldi	r30, 0x34	; 52
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	48 2f       	mov	r20, r24
    1adc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	02 2e       	mov	r0, r18
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <GPIO_setupPinDirection+0x164>
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	0a 94       	dec	r0
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <GPIO_setupPinDirection+0x160>
    1af2:	80 95       	com	r24
    1af4:	84 23       	and	r24, r20
    1af6:	8c 93       	st	X, r24
    1af8:	2b c0       	rjmp	.+86     	; 0x1b50 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	81 30       	cpi	r24, 0x01	; 1
    1afe:	a1 f4       	brne	.+40     	; 0x1b28 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1b00:	a1 e3       	ldi	r26, 0x31	; 49
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e1 e3       	ldi	r30, 0x31	; 49
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	48 2f       	mov	r20, r24
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	02 2e       	mov	r0, r18
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <GPIO_setupPinDirection+0x194>
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	0a 94       	dec	r0
    1b20:	e2 f7       	brpl	.-8      	; 0x1b1a <GPIO_setupPinDirection+0x190>
    1b22:	84 2b       	or	r24, r20
    1b24:	8c 93       	st	X, r24
    1b26:	14 c0       	rjmp	.+40     	; 0x1b50 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1b28:	a1 e3       	ldi	r26, 0x31	; 49
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e1 e3       	ldi	r30, 0x31	; 49
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	48 2f       	mov	r20, r24
    1b34:	8a 81       	ldd	r24, Y+2	; 0x02
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	02 2e       	mov	r0, r18
    1b40:	02 c0       	rjmp	.+4      	; 0x1b46 <GPIO_setupPinDirection+0x1bc>
    1b42:	88 0f       	add	r24, r24
    1b44:	99 1f       	adc	r25, r25
    1b46:	0a 94       	dec	r0
    1b48:	e2 f7       	brpl	.-8      	; 0x1b42 <GPIO_setupPinDirection+0x1b8>
    1b4a:	80 95       	com	r24
    1b4c:	84 23       	and	r24, r20
    1b4e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <GPIO_writePin+0x6>
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <GPIO_writePin+0x8>
    1b68:	0f 92       	push	r0
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	6a 83       	std	Y+2, r22	; 0x02
    1b72:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	88 30       	cpi	r24, 0x08	; 8
    1b78:	08 f0       	brcs	.+2      	; 0x1b7c <GPIO_writePin+0x1c>
    1b7a:	d5 c0       	rjmp	.+426    	; 0x1d26 <GPIO_writePin+0x1c6>
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	84 30       	cpi	r24, 0x04	; 4
    1b80:	08 f0       	brcs	.+2      	; 0x1b84 <GPIO_writePin+0x24>
    1b82:	d1 c0       	rjmp	.+418    	; 0x1d26 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	3d 83       	std	Y+5, r19	; 0x05
    1b8c:	2c 83       	std	Y+4, r18	; 0x04
    1b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b90:	9d 81       	ldd	r25, Y+5	; 0x05
    1b92:	81 30       	cpi	r24, 0x01	; 1
    1b94:	91 05       	cpc	r25, r1
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <GPIO_writePin+0x3a>
    1b98:	43 c0       	rjmp	.+134    	; 0x1c20 <GPIO_writePin+0xc0>
    1b9a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b9c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b9e:	22 30       	cpi	r18, 0x02	; 2
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	2c f4       	brge	.+10     	; 0x1bae <GPIO_writePin+0x4e>
    1ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	71 f0       	breq	.+28     	; 0x1bc8 <GPIO_writePin+0x68>
    1bac:	bc c0       	rjmp	.+376    	; 0x1d26 <GPIO_writePin+0x1c6>
    1bae:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1bb2:	22 30       	cpi	r18, 0x02	; 2
    1bb4:	31 05       	cpc	r19, r1
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <GPIO_writePin+0x5a>
    1bb8:	5f c0       	rjmp	.+190    	; 0x1c78 <GPIO_writePin+0x118>
    1bba:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bbe:	83 30       	cpi	r24, 0x03	; 3
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	09 f4       	brne	.+2      	; 0x1bc6 <GPIO_writePin+0x66>
    1bc4:	85 c0       	rjmp	.+266    	; 0x1cd0 <GPIO_writePin+0x170>
    1bc6:	af c0       	rjmp	.+350    	; 0x1d26 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	81 30       	cpi	r24, 0x01	; 1
    1bcc:	a1 f4       	brne	.+40     	; 0x1bf6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1bce:	ab e3       	ldi	r26, 0x3B	; 59
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	eb e3       	ldi	r30, 0x3B	; 59
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	48 2f       	mov	r20, r24
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	28 2f       	mov	r18, r24
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	02 2e       	mov	r0, r18
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <GPIO_writePin+0x8c>
    1be8:	88 0f       	add	r24, r24
    1bea:	99 1f       	adc	r25, r25
    1bec:	0a 94       	dec	r0
    1bee:	e2 f7       	brpl	.-8      	; 0x1be8 <GPIO_writePin+0x88>
    1bf0:	84 2b       	or	r24, r20
    1bf2:	8c 93       	st	X, r24
    1bf4:	98 c0       	rjmp	.+304    	; 0x1d26 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1bf6:	ab e3       	ldi	r26, 0x3B	; 59
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	eb e3       	ldi	r30, 0x3B	; 59
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	48 2f       	mov	r20, r24
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	28 2f       	mov	r18, r24
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	02 2e       	mov	r0, r18
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <GPIO_writePin+0xb4>
    1c10:	88 0f       	add	r24, r24
    1c12:	99 1f       	adc	r25, r25
    1c14:	0a 94       	dec	r0
    1c16:	e2 f7       	brpl	.-8      	; 0x1c10 <GPIO_writePin+0xb0>
    1c18:	80 95       	com	r24
    1c1a:	84 23       	and	r24, r20
    1c1c:	8c 93       	st	X, r24
    1c1e:	83 c0       	rjmp	.+262    	; 0x1d26 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	81 30       	cpi	r24, 0x01	; 1
    1c24:	a1 f4       	brne	.+40     	; 0x1c4e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1c26:	a8 e3       	ldi	r26, 0x38	; 56
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e8 e3       	ldi	r30, 0x38	; 56
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	48 2f       	mov	r20, r24
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	28 2f       	mov	r18, r24
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	02 2e       	mov	r0, r18
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <GPIO_writePin+0xe4>
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	0a 94       	dec	r0
    1c46:	e2 f7       	brpl	.-8      	; 0x1c40 <GPIO_writePin+0xe0>
    1c48:	84 2b       	or	r24, r20
    1c4a:	8c 93       	st	X, r24
    1c4c:	6c c0       	rjmp	.+216    	; 0x1d26 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1c4e:	a8 e3       	ldi	r26, 0x38	; 56
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	e8 e3       	ldi	r30, 0x38	; 56
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	48 2f       	mov	r20, r24
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	02 2e       	mov	r0, r18
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <GPIO_writePin+0x10c>
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	0a 94       	dec	r0
    1c6e:	e2 f7       	brpl	.-8      	; 0x1c68 <GPIO_writePin+0x108>
    1c70:	80 95       	com	r24
    1c72:	84 23       	and	r24, r20
    1c74:	8c 93       	st	X, r24
    1c76:	57 c0       	rjmp	.+174    	; 0x1d26 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	a1 f4       	brne	.+40     	; 0x1ca6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1c7e:	a5 e3       	ldi	r26, 0x35	; 53
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e5 e3       	ldi	r30, 0x35	; 53
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	48 2f       	mov	r20, r24
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	02 2e       	mov	r0, r18
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <GPIO_writePin+0x13c>
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	0a 94       	dec	r0
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <GPIO_writePin+0x138>
    1ca0:	84 2b       	or	r24, r20
    1ca2:	8c 93       	st	X, r24
    1ca4:	40 c0       	rjmp	.+128    	; 0x1d26 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1ca6:	a5 e3       	ldi	r26, 0x35	; 53
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e5 e3       	ldi	r30, 0x35	; 53
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	02 2e       	mov	r0, r18
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <GPIO_writePin+0x164>
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	0a 94       	dec	r0
    1cc6:	e2 f7       	brpl	.-8      	; 0x1cc0 <GPIO_writePin+0x160>
    1cc8:	80 95       	com	r24
    1cca:	84 23       	and	r24, r20
    1ccc:	8c 93       	st	X, r24
    1cce:	2b c0       	rjmp	.+86     	; 0x1d26 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	81 30       	cpi	r24, 0x01	; 1
    1cd4:	a1 f4       	brne	.+40     	; 0x1cfe <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1cd6:	a2 e3       	ldi	r26, 0x32	; 50
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e2 e3       	ldi	r30, 0x32	; 50
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	48 2f       	mov	r20, r24
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	02 2e       	mov	r0, r18
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <GPIO_writePin+0x194>
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	0a 94       	dec	r0
    1cf6:	e2 f7       	brpl	.-8      	; 0x1cf0 <GPIO_writePin+0x190>
    1cf8:	84 2b       	or	r24, r20
    1cfa:	8c 93       	st	X, r24
    1cfc:	14 c0       	rjmp	.+40     	; 0x1d26 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1cfe:	a2 e3       	ldi	r26, 0x32	; 50
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e2 e3       	ldi	r30, 0x32	; 50
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	48 2f       	mov	r20, r24
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	02 2e       	mov	r0, r18
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <GPIO_writePin+0x1bc>
    1d18:	88 0f       	add	r24, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	0a 94       	dec	r0
    1d1e:	e2 f7       	brpl	.-8      	; 0x1d18 <GPIO_writePin+0x1b8>
    1d20:	80 95       	com	r24
    1d22:	84 23       	and	r24, r20
    1d24:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	08 95       	ret

00001d36 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	00 d0       	rcall	.+0      	; 0x1d3c <GPIO_readPin+0x6>
    1d3c:	00 d0       	rcall	.+0      	; 0x1d3e <GPIO_readPin+0x8>
    1d3e:	0f 92       	push	r0
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	8a 83       	std	Y+2, r24	; 0x02
    1d46:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1d48:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	88 30       	cpi	r24, 0x08	; 8
    1d4e:	08 f0       	brcs	.+2      	; 0x1d52 <GPIO_readPin+0x1c>
    1d50:	84 c0       	rjmp	.+264    	; 0x1e5a <GPIO_readPin+0x124>
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	84 30       	cpi	r24, 0x04	; 4
    1d56:	08 f0       	brcs	.+2      	; 0x1d5a <GPIO_readPin+0x24>
    1d58:	80 c0       	rjmp	.+256    	; 0x1e5a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	3d 83       	std	Y+5, r19	; 0x05
    1d62:	2c 83       	std	Y+4, r18	; 0x04
    1d64:	4c 81       	ldd	r20, Y+4	; 0x04
    1d66:	5d 81       	ldd	r21, Y+5	; 0x05
    1d68:	41 30       	cpi	r20, 0x01	; 1
    1d6a:	51 05       	cpc	r21, r1
    1d6c:	79 f1       	breq	.+94     	; 0x1dcc <GPIO_readPin+0x96>
    1d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d70:	9d 81       	ldd	r25, Y+5	; 0x05
    1d72:	82 30       	cpi	r24, 0x02	; 2
    1d74:	91 05       	cpc	r25, r1
    1d76:	34 f4       	brge	.+12     	; 0x1d84 <GPIO_readPin+0x4e>
    1d78:	2c 81       	ldd	r18, Y+4	; 0x04
    1d7a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d7c:	21 15       	cp	r18, r1
    1d7e:	31 05       	cpc	r19, r1
    1d80:	69 f0       	breq	.+26     	; 0x1d9c <GPIO_readPin+0x66>
    1d82:	6b c0       	rjmp	.+214    	; 0x1e5a <GPIO_readPin+0x124>
    1d84:	4c 81       	ldd	r20, Y+4	; 0x04
    1d86:	5d 81       	ldd	r21, Y+5	; 0x05
    1d88:	42 30       	cpi	r20, 0x02	; 2
    1d8a:	51 05       	cpc	r21, r1
    1d8c:	b9 f1       	breq	.+110    	; 0x1dfc <GPIO_readPin+0xc6>
    1d8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d90:	9d 81       	ldd	r25, Y+5	; 0x05
    1d92:	83 30       	cpi	r24, 0x03	; 3
    1d94:	91 05       	cpc	r25, r1
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <GPIO_readPin+0x64>
    1d98:	49 c0       	rjmp	.+146    	; 0x1e2c <GPIO_readPin+0xf6>
    1d9a:	5f c0       	rjmp	.+190    	; 0x1e5a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1d9c:	e9 e3       	ldi	r30, 0x39	; 57
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	28 2f       	mov	r18, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	88 2f       	mov	r24, r24
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	a9 01       	movw	r20, r18
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <GPIO_readPin+0x7e>
    1db0:	55 95       	asr	r21
    1db2:	47 95       	ror	r20
    1db4:	8a 95       	dec	r24
    1db6:	e2 f7       	brpl	.-8      	; 0x1db0 <GPIO_readPin+0x7a>
    1db8:	ca 01       	movw	r24, r20
    1dba:	81 70       	andi	r24, 0x01	; 1
    1dbc:	90 70       	andi	r25, 0x00	; 0
    1dbe:	88 23       	and	r24, r24
    1dc0:	19 f0       	breq	.+6      	; 0x1dc8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	89 83       	std	Y+1, r24	; 0x01
    1dc6:	49 c0       	rjmp	.+146    	; 0x1e5a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1dc8:	19 82       	std	Y+1, r1	; 0x01
    1dca:	47 c0       	rjmp	.+142    	; 0x1e5a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1dcc:	e6 e3       	ldi	r30, 0x36	; 54
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	88 2f       	mov	r24, r24
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	a9 01       	movw	r20, r18
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <GPIO_readPin+0xae>
    1de0:	55 95       	asr	r21
    1de2:	47 95       	ror	r20
    1de4:	8a 95       	dec	r24
    1de6:	e2 f7       	brpl	.-8      	; 0x1de0 <GPIO_readPin+0xaa>
    1de8:	ca 01       	movw	r24, r20
    1dea:	81 70       	andi	r24, 0x01	; 1
    1dec:	90 70       	andi	r25, 0x00	; 0
    1dee:	88 23       	and	r24, r24
    1df0:	19 f0       	breq	.+6      	; 0x1df8 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	89 83       	std	Y+1, r24	; 0x01
    1df6:	31 c0       	rjmp	.+98     	; 0x1e5a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1df8:	19 82       	std	Y+1, r1	; 0x01
    1dfa:	2f c0       	rjmp	.+94     	; 0x1e5a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1dfc:	e3 e3       	ldi	r30, 0x33	; 51
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	88 2f       	mov	r24, r24
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	a9 01       	movw	r20, r18
    1e0e:	02 c0       	rjmp	.+4      	; 0x1e14 <GPIO_readPin+0xde>
    1e10:	55 95       	asr	r21
    1e12:	47 95       	ror	r20
    1e14:	8a 95       	dec	r24
    1e16:	e2 f7       	brpl	.-8      	; 0x1e10 <GPIO_readPin+0xda>
    1e18:	ca 01       	movw	r24, r20
    1e1a:	81 70       	andi	r24, 0x01	; 1
    1e1c:	90 70       	andi	r25, 0x00	; 0
    1e1e:	88 23       	and	r24, r24
    1e20:	19 f0       	breq	.+6      	; 0x1e28 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	19 c0       	rjmp	.+50     	; 0x1e5a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e28:	19 82       	std	Y+1, r1	; 0x01
    1e2a:	17 c0       	rjmp	.+46     	; 0x1e5a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1e2c:	e0 e3       	ldi	r30, 0x30	; 48
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	88 2f       	mov	r24, r24
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	a9 01       	movw	r20, r18
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <GPIO_readPin+0x10e>
    1e40:	55 95       	asr	r21
    1e42:	47 95       	ror	r20
    1e44:	8a 95       	dec	r24
    1e46:	e2 f7       	brpl	.-8      	; 0x1e40 <GPIO_readPin+0x10a>
    1e48:	ca 01       	movw	r24, r20
    1e4a:	81 70       	andi	r24, 0x01	; 1
    1e4c:	90 70       	andi	r25, 0x00	; 0
    1e4e:	88 23       	and	r24, r24
    1e50:	19 f0       	breq	.+6      	; 0x1e58 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	01 c0       	rjmp	.+2      	; 0x1e5a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e58:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	08 95       	ret

00001e6c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <GPIO_setupPortDirection+0x6>
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <GPIO_setupPortDirection+0x8>
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	89 83       	std	Y+1, r24	; 0x01
    1e7a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	84 30       	cpi	r24, 0x04	; 4
    1e80:	90 f5       	brcc	.+100    	; 0x1ee6 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	3c 83       	std	Y+4, r19	; 0x04
    1e8a:	2b 83       	std	Y+3, r18	; 0x03
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e90:	81 30       	cpi	r24, 0x01	; 1
    1e92:	91 05       	cpc	r25, r1
    1e94:	d1 f0       	breq	.+52     	; 0x1eca <GPIO_setupPortDirection+0x5e>
    1e96:	2b 81       	ldd	r18, Y+3	; 0x03
    1e98:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9a:	22 30       	cpi	r18, 0x02	; 2
    1e9c:	31 05       	cpc	r19, r1
    1e9e:	2c f4       	brge	.+10     	; 0x1eaa <GPIO_setupPortDirection+0x3e>
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea4:	00 97       	sbiw	r24, 0x00	; 0
    1ea6:	61 f0       	breq	.+24     	; 0x1ec0 <GPIO_setupPortDirection+0x54>
    1ea8:	1e c0       	rjmp	.+60     	; 0x1ee6 <GPIO_setupPortDirection+0x7a>
    1eaa:	2b 81       	ldd	r18, Y+3	; 0x03
    1eac:	3c 81       	ldd	r19, Y+4	; 0x04
    1eae:	22 30       	cpi	r18, 0x02	; 2
    1eb0:	31 05       	cpc	r19, r1
    1eb2:	81 f0       	breq	.+32     	; 0x1ed4 <GPIO_setupPortDirection+0x68>
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb8:	83 30       	cpi	r24, 0x03	; 3
    1eba:	91 05       	cpc	r25, r1
    1ebc:	81 f0       	breq	.+32     	; 0x1ede <GPIO_setupPortDirection+0x72>
    1ebe:	13 c0       	rjmp	.+38     	; 0x1ee6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1ec0:	ea e3       	ldi	r30, 0x3A	; 58
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	80 83       	st	Z, r24
    1ec8:	0e c0       	rjmp	.+28     	; 0x1ee6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1eca:	e7 e3       	ldi	r30, 0x37	; 55
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	80 83       	st	Z, r24
    1ed2:	09 c0       	rjmp	.+18     	; 0x1ee6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1ed4:	e4 e3       	ldi	r30, 0x34	; 52
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	80 83       	st	Z, r24
    1edc:	04 c0       	rjmp	.+8      	; 0x1ee6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ede:	e1 e3       	ldi	r30, 0x31	; 49
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <GPIO_writePort+0x6>
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <GPIO_writePort+0x8>
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	89 83       	std	Y+1, r24	; 0x01
    1f02:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	84 30       	cpi	r24, 0x04	; 4
    1f08:	90 f5       	brcc	.+100    	; 0x1f6e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	3c 83       	std	Y+4, r19	; 0x04
    1f12:	2b 83       	std	Y+3, r18	; 0x03
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	9c 81       	ldd	r25, Y+4	; 0x04
    1f18:	81 30       	cpi	r24, 0x01	; 1
    1f1a:	91 05       	cpc	r25, r1
    1f1c:	d1 f0       	breq	.+52     	; 0x1f52 <GPIO_writePort+0x5e>
    1f1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f20:	3c 81       	ldd	r19, Y+4	; 0x04
    1f22:	22 30       	cpi	r18, 0x02	; 2
    1f24:	31 05       	cpc	r19, r1
    1f26:	2c f4       	brge	.+10     	; 0x1f32 <GPIO_writePort+0x3e>
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	61 f0       	breq	.+24     	; 0x1f48 <GPIO_writePort+0x54>
    1f30:	1e c0       	rjmp	.+60     	; 0x1f6e <GPIO_writePort+0x7a>
    1f32:	2b 81       	ldd	r18, Y+3	; 0x03
    1f34:	3c 81       	ldd	r19, Y+4	; 0x04
    1f36:	22 30       	cpi	r18, 0x02	; 2
    1f38:	31 05       	cpc	r19, r1
    1f3a:	81 f0       	breq	.+32     	; 0x1f5c <GPIO_writePort+0x68>
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f40:	83 30       	cpi	r24, 0x03	; 3
    1f42:	91 05       	cpc	r25, r1
    1f44:	81 f0       	breq	.+32     	; 0x1f66 <GPIO_writePort+0x72>
    1f46:	13 c0       	rjmp	.+38     	; 0x1f6e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1f48:	eb e3       	ldi	r30, 0x3B	; 59
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	80 83       	st	Z, r24
    1f50:	0e c0       	rjmp	.+28     	; 0x1f6e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1f52:	e8 e3       	ldi	r30, 0x38	; 56
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	80 83       	st	Z, r24
    1f5a:	09 c0       	rjmp	.+18     	; 0x1f6e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1f5c:	e5 e3       	ldi	r30, 0x35	; 53
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	80 83       	st	Z, r24
    1f64:	04 c0       	rjmp	.+8      	; 0x1f6e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1f66:	e2 e3       	ldi	r30, 0x32	; 50
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <GPIO_readPort+0x6>
    1f82:	00 d0       	rcall	.+0      	; 0x1f84 <GPIO_readPort+0x8>
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1f8a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	84 30       	cpi	r24, 0x04	; 4
    1f90:	90 f5       	brcc	.+100    	; 0x1ff6 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	3c 83       	std	Y+4, r19	; 0x04
    1f9a:	2b 83       	std	Y+3, r18	; 0x03
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa0:	81 30       	cpi	r24, 0x01	; 1
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	d1 f0       	breq	.+52     	; 0x1fda <GPIO_readPort+0x5e>
    1fa6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa8:	3c 81       	ldd	r19, Y+4	; 0x04
    1faa:	22 30       	cpi	r18, 0x02	; 2
    1fac:	31 05       	cpc	r19, r1
    1fae:	2c f4       	brge	.+10     	; 0x1fba <GPIO_readPort+0x3e>
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	61 f0       	breq	.+24     	; 0x1fd0 <GPIO_readPort+0x54>
    1fb8:	1e c0       	rjmp	.+60     	; 0x1ff6 <GPIO_readPort+0x7a>
    1fba:	2b 81       	ldd	r18, Y+3	; 0x03
    1fbc:	3c 81       	ldd	r19, Y+4	; 0x04
    1fbe:	22 30       	cpi	r18, 0x02	; 2
    1fc0:	31 05       	cpc	r19, r1
    1fc2:	81 f0       	breq	.+32     	; 0x1fe4 <GPIO_readPort+0x68>
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc8:	83 30       	cpi	r24, 0x03	; 3
    1fca:	91 05       	cpc	r25, r1
    1fcc:	81 f0       	breq	.+32     	; 0x1fee <GPIO_readPort+0x72>
    1fce:	13 c0       	rjmp	.+38     	; 0x1ff6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1fd0:	e9 e3       	ldi	r30, 0x39	; 57
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	89 83       	std	Y+1, r24	; 0x01
    1fd8:	0e c0       	rjmp	.+28     	; 0x1ff6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1fda:	e6 e3       	ldi	r30, 0x36	; 54
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	89 83       	std	Y+1, r24	; 0x01
    1fe2:	09 c0       	rjmp	.+18     	; 0x1ff6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1fe4:	e3 e3       	ldi	r30, 0x33	; 51
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	89 83       	std	Y+1, r24	; 0x01
    1fec:	04 c0       	rjmp	.+8      	; 0x1ff6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1fee:	e0 e3       	ldi	r30, 0x30	; 48
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	08 95       	ret

00002006 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	00 d0       	rcall	.+0      	; 0x200c <KEYPAD_getPressedKey+0x6>
    200c:	0f 92       	push	r0
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2012:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col = 0; col < KEYPAD_NUM_COLS; col++) /* loop for columns */
    2014:	1b 82       	std	Y+3, r1	; 0x03
    2016:	43 c0       	rjmp	.+134    	; 0x209e <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	60 e0       	ldi	r22, 0x00	; 0
    201c:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	98 2f       	mov	r25, r24
    2024:	9c 5f       	subi	r25, 0xFC	; 252
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	69 2f       	mov	r22, r25
    202a:	41 e0       	ldi	r20, 0x01	; 1
    202c:	0e 94 c5 0c 	call	0x198a	; 0x198a <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2030:	8b 81       	ldd	r24, Y+3	; 0x03
    2032:	88 2f       	mov	r24, r24
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	9c 01       	movw	r18, r24
    2038:	2c 5f       	subi	r18, 0xFC	; 252
    203a:	3f 4f       	sbci	r19, 0xFF	; 255
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <KEYPAD_getPressedKey+0x40>
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	2a 95       	dec	r18
    2048:	e2 f7       	brpl	.-8      	; 0x2042 <KEYPAD_getPressedKey+0x3c>
    204a:	80 95       	com	r24
    204c:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	69 81       	ldd	r22, Y+1	; 0x01
    2052:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <GPIO_writePort>

			for(row = 0; row<KEYPAD_NUM_ROWS; row++) /* loop for rows */
    2056:	1a 82       	std	Y+2, r1	; 0x02
    2058:	1c c0       	rjmp	.+56     	; 0x2092 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	6a 81       	ldd	r22, Y+2	; 0x02
    205e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <GPIO_readPin>
    2062:	88 23       	and	r24, r24
    2064:	99 f4       	brne	.+38     	; 0x208c <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	88 2f       	mov	r24, r24
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	88 0f       	add	r24, r24
    206e:	99 1f       	adc	r25, r25
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	98 2f       	mov	r25, r24
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	89 0f       	add	r24, r25
    207a:	8f 5f       	subi	r24, 0xFF	; 255
    207c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row = 0; row<KEYPAD_NUM_ROWS; row++) /* loop for rows */
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	8f 5f       	subi	r24, 0xFF	; 255
    2090:	8a 83       	std	Y+2, r24	; 0x02
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	84 30       	cpi	r24, 0x04	; 4
    2096:	08 f3       	brcs	.-62     	; 0x205a <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col = 0; col < KEYPAD_NUM_COLS; col++) /* loop for columns */
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	8f 5f       	subi	r24, 0xFF	; 255
    209c:	8b 83       	std	Y+3, r24	; 0x03
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	84 30       	cpi	r24, 0x04	; 4
    20a2:	08 f4       	brcc	.+2      	; 0x20a6 <KEYPAD_getPressedKey+0xa0>
    20a4:	b9 cf       	rjmp	.-142    	; 0x2018 <KEYPAD_getPressedKey+0x12>
    20a6:	b6 cf       	rjmp	.-148    	; 0x2014 <KEYPAD_getPressedKey+0xe>

000020a8 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <KEYPAD_4x4_adjustKeyNumber+0x6>
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <KEYPAD_4x4_adjustKeyNumber+0x8>
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    20b6:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	28 2f       	mov	r18, r24
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	3c 83       	std	Y+4, r19	; 0x04
    20c0:	2b 83       	std	Y+3, r18	; 0x03
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	9c 81       	ldd	r25, Y+4	; 0x04
    20c6:	88 30       	cpi	r24, 0x08	; 8
    20c8:	91 05       	cpc	r25, r1
    20ca:	09 f4       	brne	.+2      	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x26>
    20cc:	70 c0       	rjmp	.+224    	; 0x21ae <KEYPAD_4x4_adjustKeyNumber+0x106>
    20ce:	2b 81       	ldd	r18, Y+3	; 0x03
    20d0:	3c 81       	ldd	r19, Y+4	; 0x04
    20d2:	29 30       	cpi	r18, 0x09	; 9
    20d4:	31 05       	cpc	r19, r1
    20d6:	5c f5       	brge	.+86     	; 0x212e <KEYPAD_4x4_adjustKeyNumber+0x86>
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	9c 81       	ldd	r25, Y+4	; 0x04
    20dc:	84 30       	cpi	r24, 0x04	; 4
    20de:	91 05       	cpc	r25, r1
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    20e2:	59 c0       	rjmp	.+178    	; 0x2196 <KEYPAD_4x4_adjustKeyNumber+0xee>
    20e4:	2b 81       	ldd	r18, Y+3	; 0x03
    20e6:	3c 81       	ldd	r19, Y+4	; 0x04
    20e8:	25 30       	cpi	r18, 0x05	; 5
    20ea:	31 05       	cpc	r19, r1
    20ec:	9c f4       	brge	.+38     	; 0x2114 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	82 30       	cpi	r24, 0x02	; 2
    20f4:	91 05       	cpc	r25, r1
    20f6:	09 f4       	brne	.+2      	; 0x20fa <KEYPAD_4x4_adjustKeyNumber+0x52>
    20f8:	48 c0       	rjmp	.+144    	; 0x218a <KEYPAD_4x4_adjustKeyNumber+0xe2>
    20fa:	2b 81       	ldd	r18, Y+3	; 0x03
    20fc:	3c 81       	ldd	r19, Y+4	; 0x04
    20fe:	23 30       	cpi	r18, 0x03	; 3
    2100:	31 05       	cpc	r19, r1
    2102:	0c f0       	brlt	.+2      	; 0x2106 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2104:	45 c0       	rjmp	.+138    	; 0x2190 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	9c 81       	ldd	r25, Y+4	; 0x04
    210a:	81 30       	cpi	r24, 0x01	; 1
    210c:	91 05       	cpc	r25, r1
    210e:	09 f4       	brne	.+2      	; 0x2112 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2110:	39 c0       	rjmp	.+114    	; 0x2184 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2112:	67 c0       	rjmp	.+206    	; 0x21e2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2114:	2b 81       	ldd	r18, Y+3	; 0x03
    2116:	3c 81       	ldd	r19, Y+4	; 0x04
    2118:	26 30       	cpi	r18, 0x06	; 6
    211a:	31 05       	cpc	r19, r1
    211c:	09 f4       	brne	.+2      	; 0x2120 <KEYPAD_4x4_adjustKeyNumber+0x78>
    211e:	41 c0       	rjmp	.+130    	; 0x21a2 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	9c 81       	ldd	r25, Y+4	; 0x04
    2124:	87 30       	cpi	r24, 0x07	; 7
    2126:	91 05       	cpc	r25, r1
    2128:	0c f0       	brlt	.+2      	; 0x212c <KEYPAD_4x4_adjustKeyNumber+0x84>
    212a:	3e c0       	rjmp	.+124    	; 0x21a8 <KEYPAD_4x4_adjustKeyNumber+0x100>
    212c:	37 c0       	rjmp	.+110    	; 0x219c <KEYPAD_4x4_adjustKeyNumber+0xf4>
    212e:	2b 81       	ldd	r18, Y+3	; 0x03
    2130:	3c 81       	ldd	r19, Y+4	; 0x04
    2132:	2c 30       	cpi	r18, 0x0C	; 12
    2134:	31 05       	cpc	r19, r1
    2136:	09 f4       	brne	.+2      	; 0x213a <KEYPAD_4x4_adjustKeyNumber+0x92>
    2138:	46 c0       	rjmp	.+140    	; 0x21c6 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	9c 81       	ldd	r25, Y+4	; 0x04
    213e:	8d 30       	cpi	r24, 0x0D	; 13
    2140:	91 05       	cpc	r25, r1
    2142:	5c f4       	brge	.+22     	; 0x215a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2144:	2b 81       	ldd	r18, Y+3	; 0x03
    2146:	3c 81       	ldd	r19, Y+4	; 0x04
    2148:	2a 30       	cpi	r18, 0x0A	; 10
    214a:	31 05       	cpc	r19, r1
    214c:	b1 f1       	breq	.+108    	; 0x21ba <KEYPAD_4x4_adjustKeyNumber+0x112>
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	9c 81       	ldd	r25, Y+4	; 0x04
    2152:	8b 30       	cpi	r24, 0x0B	; 11
    2154:	91 05       	cpc	r25, r1
    2156:	a4 f5       	brge	.+104    	; 0x21c0 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2158:	2d c0       	rjmp	.+90     	; 0x21b4 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    215a:	2b 81       	ldd	r18, Y+3	; 0x03
    215c:	3c 81       	ldd	r19, Y+4	; 0x04
    215e:	2e 30       	cpi	r18, 0x0E	; 14
    2160:	31 05       	cpc	r19, r1
    2162:	b9 f1       	breq	.+110    	; 0x21d2 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	9c 81       	ldd	r25, Y+4	; 0x04
    2168:	8e 30       	cpi	r24, 0x0E	; 14
    216a:	91 05       	cpc	r25, r1
    216c:	7c f1       	brlt	.+94     	; 0x21cc <KEYPAD_4x4_adjustKeyNumber+0x124>
    216e:	2b 81       	ldd	r18, Y+3	; 0x03
    2170:	3c 81       	ldd	r19, Y+4	; 0x04
    2172:	2f 30       	cpi	r18, 0x0F	; 15
    2174:	31 05       	cpc	r19, r1
    2176:	79 f1       	breq	.+94     	; 0x21d6 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	9c 81       	ldd	r25, Y+4	; 0x04
    217c:	80 31       	cpi	r24, 0x10	; 16
    217e:	91 05       	cpc	r25, r1
    2180:	69 f1       	breq	.+90     	; 0x21dc <KEYPAD_4x4_adjustKeyNumber+0x134>
    2182:	2f c0       	rjmp	.+94     	; 0x21e2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2184:	87 e0       	ldi	r24, 0x07	; 7
    2186:	89 83       	std	Y+1, r24	; 0x01
    2188:	2e c0       	rjmp	.+92     	; 0x21e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    218a:	88 e0       	ldi	r24, 0x08	; 8
    218c:	89 83       	std	Y+1, r24	; 0x01
    218e:	2b c0       	rjmp	.+86     	; 0x21e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2190:	89 e0       	ldi	r24, 0x09	; 9
    2192:	89 83       	std	Y+1, r24	; 0x01
    2194:	28 c0       	rjmp	.+80     	; 0x21e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2196:	85 e2       	ldi	r24, 0x25	; 37
    2198:	89 83       	std	Y+1, r24	; 0x01
    219a:	25 c0       	rjmp	.+74     	; 0x21e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    219c:	84 e0       	ldi	r24, 0x04	; 4
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	22 c0       	rjmp	.+68     	; 0x21e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    21a2:	85 e0       	ldi	r24, 0x05	; 5
    21a4:	89 83       	std	Y+1, r24	; 0x01
    21a6:	1f c0       	rjmp	.+62     	; 0x21e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    21a8:	86 e0       	ldi	r24, 0x06	; 6
    21aa:	89 83       	std	Y+1, r24	; 0x01
    21ac:	1c c0       	rjmp	.+56     	; 0x21e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    21ae:	8a e2       	ldi	r24, 0x2A	; 42
    21b0:	89 83       	std	Y+1, r24	; 0x01
    21b2:	19 c0       	rjmp	.+50     	; 0x21e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	89 83       	std	Y+1, r24	; 0x01
    21b8:	16 c0       	rjmp	.+44     	; 0x21e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    21ba:	82 e0       	ldi	r24, 0x02	; 2
    21bc:	89 83       	std	Y+1, r24	; 0x01
    21be:	13 c0       	rjmp	.+38     	; 0x21e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    21c0:	83 e0       	ldi	r24, 0x03	; 3
    21c2:	89 83       	std	Y+1, r24	; 0x01
    21c4:	10 c0       	rjmp	.+32     	; 0x21e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    21c6:	8d e2       	ldi	r24, 0x2D	; 45
    21c8:	89 83       	std	Y+1, r24	; 0x01
    21ca:	0d c0       	rjmp	.+26     	; 0x21e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    21cc:	8d e0       	ldi	r24, 0x0D	; 13
    21ce:	89 83       	std	Y+1, r24	; 0x01
    21d0:	0a c0       	rjmp	.+20     	; 0x21e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    21d2:	19 82       	std	Y+1, r1	; 0x01
    21d4:	08 c0       	rjmp	.+16     	; 0x21e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    21d6:	8d e3       	ldi	r24, 0x3D	; 61
    21d8:	89 83       	std	Y+1, r24	; 0x01
    21da:	05 c0       	rjmp	.+10     	; 0x21e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    21dc:	8b e2       	ldi	r24, 0x2B	; 43
    21de:	89 83       	std	Y+1, r24	; 0x01
    21e0:	02 c0       	rjmp	.+4      	; 0x21e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
} 
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	cf 91       	pop	r28
    21f2:	df 91       	pop	r29
    21f4:	08 95       	ret

000021f6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    21fe:	83 e0       	ldi	r24, 0x03	; 3
    2200:	64 e0       	ldi	r22, 0x04	; 4
    2202:	41 e0       	ldi	r20, 0x01	; 1
    2204:	0e 94 c5 0c 	call	0x198a	; 0x198a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2208:	83 e0       	ldi	r24, 0x03	; 3
    220a:	65 e0       	ldi	r22, 0x05	; 5
    220c:	41 e0       	ldi	r20, 0x01	; 1
    220e:	0e 94 c5 0c 	call	0x198a	; 0x198a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2212:	83 e0       	ldi	r24, 0x03	; 3
    2214:	66 e0       	ldi	r22, 0x06	; 6
    2216:	41 e0       	ldi	r20, 0x01	; 1
    2218:	0e 94 c5 0c 	call	0x198a	; 0x198a <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    221c:	82 e0       	ldi	r24, 0x02	; 2
    221e:	6f ef       	ldi	r22, 0xFF	; 255
    2220:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2224:	88 e3       	ldi	r24, 0x38	; 56
    2226:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    222a:	8c e0       	ldi	r24, 0x0C	; 12
    222c:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_sendCommand>
}
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	e9 97       	sbiw	r28, 0x39	; 57
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2252:	83 e0       	ldi	r24, 0x03	; 3
    2254:	64 e0       	ldi	r22, 0x04	; 4
    2256:	40 e0       	ldi	r20, 0x00	; 0
    2258:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    225c:	83 e0       	ldi	r24, 0x03	; 3
    225e:	65 e0       	ldi	r22, 0x05	; 5
    2260:	40 e0       	ldi	r20, 0x00	; 0
    2262:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <GPIO_writePin>
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	a0 e8       	ldi	r26, 0x80	; 128
    226c:	bf e3       	ldi	r27, 0x3F	; 63
    226e:	8d ab       	std	Y+53, r24	; 0x35
    2270:	9e ab       	std	Y+54, r25	; 0x36
    2272:	af ab       	std	Y+55, r26	; 0x37
    2274:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2276:	6d a9       	ldd	r22, Y+53	; 0x35
    2278:	7e a9       	ldd	r23, Y+54	; 0x36
    227a:	8f a9       	ldd	r24, Y+55	; 0x37
    227c:	98 ad       	ldd	r25, Y+56	; 0x38
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	4a e7       	ldi	r20, 0x7A	; 122
    2284:	53 e4       	ldi	r21, 0x43	; 67
    2286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	89 ab       	std	Y+49, r24	; 0x31
    2290:	9a ab       	std	Y+50, r25	; 0x32
    2292:	ab ab       	std	Y+51, r26	; 0x33
    2294:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2296:	69 a9       	ldd	r22, Y+49	; 0x31
    2298:	7a a9       	ldd	r23, Y+50	; 0x32
    229a:	8b a9       	ldd	r24, Y+51	; 0x33
    229c:	9c a9       	ldd	r25, Y+52	; 0x34
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e8       	ldi	r20, 0x80	; 128
    22a4:	5f e3       	ldi	r21, 0x3F	; 63
    22a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22aa:	88 23       	and	r24, r24
    22ac:	2c f4       	brge	.+10     	; 0x22b8 <LCD_sendCommand+0x7c>
		__ticks = 1;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	98 ab       	std	Y+48, r25	; 0x30
    22b4:	8f a7       	std	Y+47, r24	; 0x2f
    22b6:	3f c0       	rjmp	.+126    	; 0x2336 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    22b8:	69 a9       	ldd	r22, Y+49	; 0x31
    22ba:	7a a9       	ldd	r23, Y+50	; 0x32
    22bc:	8b a9       	ldd	r24, Y+51	; 0x33
    22be:	9c a9       	ldd	r25, Y+52	; 0x34
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	3f ef       	ldi	r19, 0xFF	; 255
    22c4:	4f e7       	ldi	r20, 0x7F	; 127
    22c6:	57 e4       	ldi	r21, 0x47	; 71
    22c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22cc:	18 16       	cp	r1, r24
    22ce:	4c f5       	brge	.+82     	; 0x2322 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d0:	6d a9       	ldd	r22, Y+53	; 0x35
    22d2:	7e a9       	ldd	r23, Y+54	; 0x36
    22d4:	8f a9       	ldd	r24, Y+55	; 0x37
    22d6:	98 ad       	ldd	r25, Y+56	; 0x38
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e2       	ldi	r20, 0x20	; 32
    22de:	51 e4       	ldi	r21, 0x41	; 65
    22e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	bc 01       	movw	r22, r24
    22ea:	cd 01       	movw	r24, r26
    22ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	98 ab       	std	Y+48, r25	; 0x30
    22f6:	8f a7       	std	Y+47, r24	; 0x2f
    22f8:	0f c0       	rjmp	.+30     	; 0x2318 <LCD_sendCommand+0xdc>
    22fa:	89 e1       	ldi	r24, 0x19	; 25
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	9e a7       	std	Y+46, r25	; 0x2e
    2300:	8d a7       	std	Y+45, r24	; 0x2d
    2302:	8d a5       	ldd	r24, Y+45	; 0x2d
    2304:	9e a5       	ldd	r25, Y+46	; 0x2e
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <LCD_sendCommand+0xca>
    230a:	9e a7       	std	Y+46, r25	; 0x2e
    230c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2310:	98 a9       	ldd	r25, Y+48	; 0x30
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	98 ab       	std	Y+48, r25	; 0x30
    2316:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2318:	8f a5       	ldd	r24, Y+47	; 0x2f
    231a:	98 a9       	ldd	r25, Y+48	; 0x30
    231c:	00 97       	sbiw	r24, 0x00	; 0
    231e:	69 f7       	brne	.-38     	; 0x22fa <LCD_sendCommand+0xbe>
    2320:	14 c0       	rjmp	.+40     	; 0x234a <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2322:	69 a9       	ldd	r22, Y+49	; 0x31
    2324:	7a a9       	ldd	r23, Y+50	; 0x32
    2326:	8b a9       	ldd	r24, Y+51	; 0x33
    2328:	9c a9       	ldd	r25, Y+52	; 0x34
    232a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	98 ab       	std	Y+48, r25	; 0x30
    2334:	8f a7       	std	Y+47, r24	; 0x2f
    2336:	8f a5       	ldd	r24, Y+47	; 0x2f
    2338:	98 a9       	ldd	r25, Y+48	; 0x30
    233a:	9c a7       	std	Y+44, r25	; 0x2c
    233c:	8b a7       	std	Y+43, r24	; 0x2b
    233e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2340:	9c a5       	ldd	r25, Y+44	; 0x2c
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <LCD_sendCommand+0x106>
    2346:	9c a7       	std	Y+44, r25	; 0x2c
    2348:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    234a:	83 e0       	ldi	r24, 0x03	; 3
    234c:	66 e0       	ldi	r22, 0x06	; 6
    234e:	41 e0       	ldi	r20, 0x01	; 1
    2350:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <GPIO_writePin>
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	a0 e8       	ldi	r26, 0x80	; 128
    235a:	bf e3       	ldi	r27, 0x3F	; 63
    235c:	8f a3       	std	Y+39, r24	; 0x27
    235e:	98 a7       	std	Y+40, r25	; 0x28
    2360:	a9 a7       	std	Y+41, r26	; 0x29
    2362:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2364:	6f a1       	ldd	r22, Y+39	; 0x27
    2366:	78 a5       	ldd	r23, Y+40	; 0x28
    2368:	89 a5       	ldd	r24, Y+41	; 0x29
    236a:	9a a5       	ldd	r25, Y+42	; 0x2a
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	4a e7       	ldi	r20, 0x7A	; 122
    2372:	53 e4       	ldi	r21, 0x43	; 67
    2374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	8b a3       	std	Y+35, r24	; 0x23
    237e:	9c a3       	std	Y+36, r25	; 0x24
    2380:	ad a3       	std	Y+37, r26	; 0x25
    2382:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2384:	6b a1       	ldd	r22, Y+35	; 0x23
    2386:	7c a1       	ldd	r23, Y+36	; 0x24
    2388:	8d a1       	ldd	r24, Y+37	; 0x25
    238a:	9e a1       	ldd	r25, Y+38	; 0x26
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	40 e8       	ldi	r20, 0x80	; 128
    2392:	5f e3       	ldi	r21, 0x3F	; 63
    2394:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2398:	88 23       	and	r24, r24
    239a:	2c f4       	brge	.+10     	; 0x23a6 <LCD_sendCommand+0x16a>
		__ticks = 1;
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	9a a3       	std	Y+34, r25	; 0x22
    23a2:	89 a3       	std	Y+33, r24	; 0x21
    23a4:	3f c0       	rjmp	.+126    	; 0x2424 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    23a6:	6b a1       	ldd	r22, Y+35	; 0x23
    23a8:	7c a1       	ldd	r23, Y+36	; 0x24
    23aa:	8d a1       	ldd	r24, Y+37	; 0x25
    23ac:	9e a1       	ldd	r25, Y+38	; 0x26
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	3f ef       	ldi	r19, 0xFF	; 255
    23b2:	4f e7       	ldi	r20, 0x7F	; 127
    23b4:	57 e4       	ldi	r21, 0x47	; 71
    23b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ba:	18 16       	cp	r1, r24
    23bc:	4c f5       	brge	.+82     	; 0x2410 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23be:	6f a1       	ldd	r22, Y+39	; 0x27
    23c0:	78 a5       	ldd	r23, Y+40	; 0x28
    23c2:	89 a5       	ldd	r24, Y+41	; 0x29
    23c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e2       	ldi	r20, 0x20	; 32
    23cc:	51 e4       	ldi	r21, 0x41	; 65
    23ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	bc 01       	movw	r22, r24
    23d8:	cd 01       	movw	r24, r26
    23da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	9a a3       	std	Y+34, r25	; 0x22
    23e4:	89 a3       	std	Y+33, r24	; 0x21
    23e6:	0f c0       	rjmp	.+30     	; 0x2406 <LCD_sendCommand+0x1ca>
    23e8:	89 e1       	ldi	r24, 0x19	; 25
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	98 a3       	std	Y+32, r25	; 0x20
    23ee:	8f 8f       	std	Y+31, r24	; 0x1f
    23f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23f2:	98 a1       	ldd	r25, Y+32	; 0x20
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <LCD_sendCommand+0x1b8>
    23f8:	98 a3       	std	Y+32, r25	; 0x20
    23fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fc:	89 a1       	ldd	r24, Y+33	; 0x21
    23fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	9a a3       	std	Y+34, r25	; 0x22
    2404:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2406:	89 a1       	ldd	r24, Y+33	; 0x21
    2408:	9a a1       	ldd	r25, Y+34	; 0x22
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	69 f7       	brne	.-38     	; 0x23e8 <LCD_sendCommand+0x1ac>
    240e:	14 c0       	rjmp	.+40     	; 0x2438 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2410:	6b a1       	ldd	r22, Y+35	; 0x23
    2412:	7c a1       	ldd	r23, Y+36	; 0x24
    2414:	8d a1       	ldd	r24, Y+37	; 0x25
    2416:	9e a1       	ldd	r25, Y+38	; 0x26
    2418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	9a a3       	std	Y+34, r25	; 0x22
    2422:	89 a3       	std	Y+33, r24	; 0x21
    2424:	89 a1       	ldd	r24, Y+33	; 0x21
    2426:	9a a1       	ldd	r25, Y+34	; 0x22
    2428:	9e 8f       	std	Y+30, r25	; 0x1e
    242a:	8d 8f       	std	Y+29, r24	; 0x1d
    242c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    242e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	f1 f7       	brne	.-4      	; 0x2430 <LCD_sendCommand+0x1f4>
    2434:	9e 8f       	std	Y+30, r25	; 0x1e
    2436:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2438:	82 e0       	ldi	r24, 0x02	; 2
    243a:	69 ad       	ldd	r22, Y+57	; 0x39
    243c:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <GPIO_writePort>
    2440:	80 e0       	ldi	r24, 0x00	; 0
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	a0 e8       	ldi	r26, 0x80	; 128
    2446:	bf e3       	ldi	r27, 0x3F	; 63
    2448:	89 8f       	std	Y+25, r24	; 0x19
    244a:	9a 8f       	std	Y+26, r25	; 0x1a
    244c:	ab 8f       	std	Y+27, r26	; 0x1b
    244e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2450:	69 8d       	ldd	r22, Y+25	; 0x19
    2452:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2454:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2456:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	4a e7       	ldi	r20, 0x7A	; 122
    245e:	53 e4       	ldi	r21, 0x43	; 67
    2460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	8d 8b       	std	Y+21, r24	; 0x15
    246a:	9e 8b       	std	Y+22, r25	; 0x16
    246c:	af 8b       	std	Y+23, r26	; 0x17
    246e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2470:	6d 89       	ldd	r22, Y+21	; 0x15
    2472:	7e 89       	ldd	r23, Y+22	; 0x16
    2474:	8f 89       	ldd	r24, Y+23	; 0x17
    2476:	98 8d       	ldd	r25, Y+24	; 0x18
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	40 e8       	ldi	r20, 0x80	; 128
    247e:	5f e3       	ldi	r21, 0x3F	; 63
    2480:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2484:	88 23       	and	r24, r24
    2486:	2c f4       	brge	.+10     	; 0x2492 <LCD_sendCommand+0x256>
		__ticks = 1;
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	9c 8b       	std	Y+20, r25	; 0x14
    248e:	8b 8b       	std	Y+19, r24	; 0x13
    2490:	3f c0       	rjmp	.+126    	; 0x2510 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    2492:	6d 89       	ldd	r22, Y+21	; 0x15
    2494:	7e 89       	ldd	r23, Y+22	; 0x16
    2496:	8f 89       	ldd	r24, Y+23	; 0x17
    2498:	98 8d       	ldd	r25, Y+24	; 0x18
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	3f ef       	ldi	r19, 0xFF	; 255
    249e:	4f e7       	ldi	r20, 0x7F	; 127
    24a0:	57 e4       	ldi	r21, 0x47	; 71
    24a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24a6:	18 16       	cp	r1, r24
    24a8:	4c f5       	brge	.+82     	; 0x24fc <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24aa:	69 8d       	ldd	r22, Y+25	; 0x19
    24ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e2       	ldi	r20, 0x20	; 32
    24b8:	51 e4       	ldi	r21, 0x41	; 65
    24ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	bc 01       	movw	r22, r24
    24c4:	cd 01       	movw	r24, r26
    24c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	9c 8b       	std	Y+20, r25	; 0x14
    24d0:	8b 8b       	std	Y+19, r24	; 0x13
    24d2:	0f c0       	rjmp	.+30     	; 0x24f2 <LCD_sendCommand+0x2b6>
    24d4:	89 e1       	ldi	r24, 0x19	; 25
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	9a 8b       	std	Y+18, r25	; 0x12
    24da:	89 8b       	std	Y+17, r24	; 0x11
    24dc:	89 89       	ldd	r24, Y+17	; 0x11
    24de:	9a 89       	ldd	r25, Y+18	; 0x12
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	f1 f7       	brne	.-4      	; 0x24e0 <LCD_sendCommand+0x2a4>
    24e4:	9a 8b       	std	Y+18, r25	; 0x12
    24e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ea:	9c 89       	ldd	r25, Y+20	; 0x14
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	9c 8b       	std	Y+20, r25	; 0x14
    24f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f2:	8b 89       	ldd	r24, Y+19	; 0x13
    24f4:	9c 89       	ldd	r25, Y+20	; 0x14
    24f6:	00 97       	sbiw	r24, 0x00	; 0
    24f8:	69 f7       	brne	.-38     	; 0x24d4 <LCD_sendCommand+0x298>
    24fa:	14 c0       	rjmp	.+40     	; 0x2524 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fc:	6d 89       	ldd	r22, Y+21	; 0x15
    24fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2500:	8f 89       	ldd	r24, Y+23	; 0x17
    2502:	98 8d       	ldd	r25, Y+24	; 0x18
    2504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	9c 8b       	std	Y+20, r25	; 0x14
    250e:	8b 8b       	std	Y+19, r24	; 0x13
    2510:	8b 89       	ldd	r24, Y+19	; 0x13
    2512:	9c 89       	ldd	r25, Y+20	; 0x14
    2514:	98 8b       	std	Y+16, r25	; 0x10
    2516:	8f 87       	std	Y+15, r24	; 0x0f
    2518:	8f 85       	ldd	r24, Y+15	; 0x0f
    251a:	98 89       	ldd	r25, Y+16	; 0x10
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	f1 f7       	brne	.-4      	; 0x251c <LCD_sendCommand+0x2e0>
    2520:	98 8b       	std	Y+16, r25	; 0x10
    2522:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2524:	83 e0       	ldi	r24, 0x03	; 3
    2526:	66 e0       	ldi	r22, 0x06	; 6
    2528:	40 e0       	ldi	r20, 0x00	; 0
    252a:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <GPIO_writePin>
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	a0 e8       	ldi	r26, 0x80	; 128
    2534:	bf e3       	ldi	r27, 0x3F	; 63
    2536:	8b 87       	std	Y+11, r24	; 0x0b
    2538:	9c 87       	std	Y+12, r25	; 0x0c
    253a:	ad 87       	std	Y+13, r26	; 0x0d
    253c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2540:	7c 85       	ldd	r23, Y+12	; 0x0c
    2542:	8d 85       	ldd	r24, Y+13	; 0x0d
    2544:	9e 85       	ldd	r25, Y+14	; 0x0e
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	4a e7       	ldi	r20, 0x7A	; 122
    254c:	53 e4       	ldi	r21, 0x43	; 67
    254e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	8f 83       	std	Y+7, r24	; 0x07
    2558:	98 87       	std	Y+8, r25	; 0x08
    255a:	a9 87       	std	Y+9, r26	; 0x09
    255c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    255e:	6f 81       	ldd	r22, Y+7	; 0x07
    2560:	78 85       	ldd	r23, Y+8	; 0x08
    2562:	89 85       	ldd	r24, Y+9	; 0x09
    2564:	9a 85       	ldd	r25, Y+10	; 0x0a
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e8       	ldi	r20, 0x80	; 128
    256c:	5f e3       	ldi	r21, 0x3F	; 63
    256e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2572:	88 23       	and	r24, r24
    2574:	2c f4       	brge	.+10     	; 0x2580 <LCD_sendCommand+0x344>
		__ticks = 1;
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	9e 83       	std	Y+6, r25	; 0x06
    257c:	8d 83       	std	Y+5, r24	; 0x05
    257e:	3f c0       	rjmp	.+126    	; 0x25fe <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    2580:	6f 81       	ldd	r22, Y+7	; 0x07
    2582:	78 85       	ldd	r23, Y+8	; 0x08
    2584:	89 85       	ldd	r24, Y+9	; 0x09
    2586:	9a 85       	ldd	r25, Y+10	; 0x0a
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	3f ef       	ldi	r19, 0xFF	; 255
    258c:	4f e7       	ldi	r20, 0x7F	; 127
    258e:	57 e4       	ldi	r21, 0x47	; 71
    2590:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2594:	18 16       	cp	r1, r24
    2596:	4c f5       	brge	.+82     	; 0x25ea <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2598:	6b 85       	ldd	r22, Y+11	; 0x0b
    259a:	7c 85       	ldd	r23, Y+12	; 0x0c
    259c:	8d 85       	ldd	r24, Y+13	; 0x0d
    259e:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	40 e2       	ldi	r20, 0x20	; 32
    25a6:	51 e4       	ldi	r21, 0x41	; 65
    25a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	bc 01       	movw	r22, r24
    25b2:	cd 01       	movw	r24, r26
    25b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	9e 83       	std	Y+6, r25	; 0x06
    25be:	8d 83       	std	Y+5, r24	; 0x05
    25c0:	0f c0       	rjmp	.+30     	; 0x25e0 <LCD_sendCommand+0x3a4>
    25c2:	89 e1       	ldi	r24, 0x19	; 25
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	9c 83       	std	Y+4, r25	; 0x04
    25c8:	8b 83       	std	Y+3, r24	; 0x03
    25ca:	8b 81       	ldd	r24, Y+3	; 0x03
    25cc:	9c 81       	ldd	r25, Y+4	; 0x04
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	f1 f7       	brne	.-4      	; 0x25ce <LCD_sendCommand+0x392>
    25d2:	9c 83       	std	Y+4, r25	; 0x04
    25d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d6:	8d 81       	ldd	r24, Y+5	; 0x05
    25d8:	9e 81       	ldd	r25, Y+6	; 0x06
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	9e 83       	std	Y+6, r25	; 0x06
    25de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e0:	8d 81       	ldd	r24, Y+5	; 0x05
    25e2:	9e 81       	ldd	r25, Y+6	; 0x06
    25e4:	00 97       	sbiw	r24, 0x00	; 0
    25e6:	69 f7       	brne	.-38     	; 0x25c2 <LCD_sendCommand+0x386>
    25e8:	14 c0       	rjmp	.+40     	; 0x2612 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ea:	6f 81       	ldd	r22, Y+7	; 0x07
    25ec:	78 85       	ldd	r23, Y+8	; 0x08
    25ee:	89 85       	ldd	r24, Y+9	; 0x09
    25f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	9e 83       	std	Y+6, r25	; 0x06
    25fc:	8d 83       	std	Y+5, r24	; 0x05
    25fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2600:	9e 81       	ldd	r25, Y+6	; 0x06
    2602:	9a 83       	std	Y+2, r25	; 0x02
    2604:	89 83       	std	Y+1, r24	; 0x01
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	9a 81       	ldd	r25, Y+2	; 0x02
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	f1 f7       	brne	.-4      	; 0x260a <LCD_sendCommand+0x3ce>
    260e:	9a 83       	std	Y+2, r25	; 0x02
    2610:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2612:	e9 96       	adiw	r28, 0x39	; 57
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	e9 97       	sbiw	r28, 0x39	; 57
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61
    2638:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    263a:	83 e0       	ldi	r24, 0x03	; 3
    263c:	64 e0       	ldi	r22, 0x04	; 4
    263e:	41 e0       	ldi	r20, 0x01	; 1
    2640:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2644:	83 e0       	ldi	r24, 0x03	; 3
    2646:	65 e0       	ldi	r22, 0x05	; 5
    2648:	40 e0       	ldi	r20, 0x00	; 0
    264a:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <GPIO_writePin>
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	a0 e8       	ldi	r26, 0x80	; 128
    2654:	bf e3       	ldi	r27, 0x3F	; 63
    2656:	8d ab       	std	Y+53, r24	; 0x35
    2658:	9e ab       	std	Y+54, r25	; 0x36
    265a:	af ab       	std	Y+55, r26	; 0x37
    265c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    265e:	6d a9       	ldd	r22, Y+53	; 0x35
    2660:	7e a9       	ldd	r23, Y+54	; 0x36
    2662:	8f a9       	ldd	r24, Y+55	; 0x37
    2664:	98 ad       	ldd	r25, Y+56	; 0x38
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	4a e7       	ldi	r20, 0x7A	; 122
    266c:	53 e4       	ldi	r21, 0x43	; 67
    266e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	89 ab       	std	Y+49, r24	; 0x31
    2678:	9a ab       	std	Y+50, r25	; 0x32
    267a:	ab ab       	std	Y+51, r26	; 0x33
    267c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    267e:	69 a9       	ldd	r22, Y+49	; 0x31
    2680:	7a a9       	ldd	r23, Y+50	; 0x32
    2682:	8b a9       	ldd	r24, Y+51	; 0x33
    2684:	9c a9       	ldd	r25, Y+52	; 0x34
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e8       	ldi	r20, 0x80	; 128
    268c:	5f e3       	ldi	r21, 0x3F	; 63
    268e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2692:	88 23       	and	r24, r24
    2694:	2c f4       	brge	.+10     	; 0x26a0 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	98 ab       	std	Y+48, r25	; 0x30
    269c:	8f a7       	std	Y+47, r24	; 0x2f
    269e:	3f c0       	rjmp	.+126    	; 0x271e <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    26a0:	69 a9       	ldd	r22, Y+49	; 0x31
    26a2:	7a a9       	ldd	r23, Y+50	; 0x32
    26a4:	8b a9       	ldd	r24, Y+51	; 0x33
    26a6:	9c a9       	ldd	r25, Y+52	; 0x34
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	3f ef       	ldi	r19, 0xFF	; 255
    26ac:	4f e7       	ldi	r20, 0x7F	; 127
    26ae:	57 e4       	ldi	r21, 0x47	; 71
    26b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b4:	18 16       	cp	r1, r24
    26b6:	4c f5       	brge	.+82     	; 0x270a <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b8:	6d a9       	ldd	r22, Y+53	; 0x35
    26ba:	7e a9       	ldd	r23, Y+54	; 0x36
    26bc:	8f a9       	ldd	r24, Y+55	; 0x37
    26be:	98 ad       	ldd	r25, Y+56	; 0x38
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e2       	ldi	r20, 0x20	; 32
    26c6:	51 e4       	ldi	r21, 0x41	; 65
    26c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	bc 01       	movw	r22, r24
    26d2:	cd 01       	movw	r24, r26
    26d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	98 ab       	std	Y+48, r25	; 0x30
    26de:	8f a7       	std	Y+47, r24	; 0x2f
    26e0:	0f c0       	rjmp	.+30     	; 0x2700 <LCD_displayCharacter+0xdc>
    26e2:	89 e1       	ldi	r24, 0x19	; 25
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	9e a7       	std	Y+46, r25	; 0x2e
    26e8:	8d a7       	std	Y+45, r24	; 0x2d
    26ea:	8d a5       	ldd	r24, Y+45	; 0x2d
    26ec:	9e a5       	ldd	r25, Y+46	; 0x2e
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <LCD_displayCharacter+0xca>
    26f2:	9e a7       	std	Y+46, r25	; 0x2e
    26f4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26f8:	98 a9       	ldd	r25, Y+48	; 0x30
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	98 ab       	std	Y+48, r25	; 0x30
    26fe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2700:	8f a5       	ldd	r24, Y+47	; 0x2f
    2702:	98 a9       	ldd	r25, Y+48	; 0x30
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	69 f7       	brne	.-38     	; 0x26e2 <LCD_displayCharacter+0xbe>
    2708:	14 c0       	rjmp	.+40     	; 0x2732 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270a:	69 a9       	ldd	r22, Y+49	; 0x31
    270c:	7a a9       	ldd	r23, Y+50	; 0x32
    270e:	8b a9       	ldd	r24, Y+51	; 0x33
    2710:	9c a9       	ldd	r25, Y+52	; 0x34
    2712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	98 ab       	std	Y+48, r25	; 0x30
    271c:	8f a7       	std	Y+47, r24	; 0x2f
    271e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2720:	98 a9       	ldd	r25, Y+48	; 0x30
    2722:	9c a7       	std	Y+44, r25	; 0x2c
    2724:	8b a7       	std	Y+43, r24	; 0x2b
    2726:	8b a5       	ldd	r24, Y+43	; 0x2b
    2728:	9c a5       	ldd	r25, Y+44	; 0x2c
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	f1 f7       	brne	.-4      	; 0x272a <LCD_displayCharacter+0x106>
    272e:	9c a7       	std	Y+44, r25	; 0x2c
    2730:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2732:	83 e0       	ldi	r24, 0x03	; 3
    2734:	66 e0       	ldi	r22, 0x06	; 6
    2736:	41 e0       	ldi	r20, 0x01	; 1
    2738:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <GPIO_writePin>
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	a0 e8       	ldi	r26, 0x80	; 128
    2742:	bf e3       	ldi	r27, 0x3F	; 63
    2744:	8f a3       	std	Y+39, r24	; 0x27
    2746:	98 a7       	std	Y+40, r25	; 0x28
    2748:	a9 a7       	std	Y+41, r26	; 0x29
    274a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274c:	6f a1       	ldd	r22, Y+39	; 0x27
    274e:	78 a5       	ldd	r23, Y+40	; 0x28
    2750:	89 a5       	ldd	r24, Y+41	; 0x29
    2752:	9a a5       	ldd	r25, Y+42	; 0x2a
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	4a e7       	ldi	r20, 0x7A	; 122
    275a:	53 e4       	ldi	r21, 0x43	; 67
    275c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	8b a3       	std	Y+35, r24	; 0x23
    2766:	9c a3       	std	Y+36, r25	; 0x24
    2768:	ad a3       	std	Y+37, r26	; 0x25
    276a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    276c:	6b a1       	ldd	r22, Y+35	; 0x23
    276e:	7c a1       	ldd	r23, Y+36	; 0x24
    2770:	8d a1       	ldd	r24, Y+37	; 0x25
    2772:	9e a1       	ldd	r25, Y+38	; 0x26
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	40 e8       	ldi	r20, 0x80	; 128
    277a:	5f e3       	ldi	r21, 0x3F	; 63
    277c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2780:	88 23       	and	r24, r24
    2782:	2c f4       	brge	.+10     	; 0x278e <LCD_displayCharacter+0x16a>
		__ticks = 1;
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	9a a3       	std	Y+34, r25	; 0x22
    278a:	89 a3       	std	Y+33, r24	; 0x21
    278c:	3f c0       	rjmp	.+126    	; 0x280c <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    278e:	6b a1       	ldd	r22, Y+35	; 0x23
    2790:	7c a1       	ldd	r23, Y+36	; 0x24
    2792:	8d a1       	ldd	r24, Y+37	; 0x25
    2794:	9e a1       	ldd	r25, Y+38	; 0x26
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	3f ef       	ldi	r19, 0xFF	; 255
    279a:	4f e7       	ldi	r20, 0x7F	; 127
    279c:	57 e4       	ldi	r21, 0x47	; 71
    279e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27a2:	18 16       	cp	r1, r24
    27a4:	4c f5       	brge	.+82     	; 0x27f8 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a6:	6f a1       	ldd	r22, Y+39	; 0x27
    27a8:	78 a5       	ldd	r23, Y+40	; 0x28
    27aa:	89 a5       	ldd	r24, Y+41	; 0x29
    27ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	40 e2       	ldi	r20, 0x20	; 32
    27b4:	51 e4       	ldi	r21, 0x41	; 65
    27b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	bc 01       	movw	r22, r24
    27c0:	cd 01       	movw	r24, r26
    27c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	9a a3       	std	Y+34, r25	; 0x22
    27cc:	89 a3       	std	Y+33, r24	; 0x21
    27ce:	0f c0       	rjmp	.+30     	; 0x27ee <LCD_displayCharacter+0x1ca>
    27d0:	89 e1       	ldi	r24, 0x19	; 25
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	98 a3       	std	Y+32, r25	; 0x20
    27d6:	8f 8f       	std	Y+31, r24	; 0x1f
    27d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27da:	98 a1       	ldd	r25, Y+32	; 0x20
    27dc:	01 97       	sbiw	r24, 0x01	; 1
    27de:	f1 f7       	brne	.-4      	; 0x27dc <LCD_displayCharacter+0x1b8>
    27e0:	98 a3       	std	Y+32, r25	; 0x20
    27e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e4:	89 a1       	ldd	r24, Y+33	; 0x21
    27e6:	9a a1       	ldd	r25, Y+34	; 0x22
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	9a a3       	std	Y+34, r25	; 0x22
    27ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ee:	89 a1       	ldd	r24, Y+33	; 0x21
    27f0:	9a a1       	ldd	r25, Y+34	; 0x22
    27f2:	00 97       	sbiw	r24, 0x00	; 0
    27f4:	69 f7       	brne	.-38     	; 0x27d0 <LCD_displayCharacter+0x1ac>
    27f6:	14 c0       	rjmp	.+40     	; 0x2820 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f8:	6b a1       	ldd	r22, Y+35	; 0x23
    27fa:	7c a1       	ldd	r23, Y+36	; 0x24
    27fc:	8d a1       	ldd	r24, Y+37	; 0x25
    27fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	9a a3       	std	Y+34, r25	; 0x22
    280a:	89 a3       	std	Y+33, r24	; 0x21
    280c:	89 a1       	ldd	r24, Y+33	; 0x21
    280e:	9a a1       	ldd	r25, Y+34	; 0x22
    2810:	9e 8f       	std	Y+30, r25	; 0x1e
    2812:	8d 8f       	std	Y+29, r24	; 0x1d
    2814:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2816:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	f1 f7       	brne	.-4      	; 0x2818 <LCD_displayCharacter+0x1f4>
    281c:	9e 8f       	std	Y+30, r25	; 0x1e
    281e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2820:	82 e0       	ldi	r24, 0x02	; 2
    2822:	69 ad       	ldd	r22, Y+57	; 0x39
    2824:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <GPIO_writePort>
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	a0 e8       	ldi	r26, 0x80	; 128
    282e:	bf e3       	ldi	r27, 0x3F	; 63
    2830:	89 8f       	std	Y+25, r24	; 0x19
    2832:	9a 8f       	std	Y+26, r25	; 0x1a
    2834:	ab 8f       	std	Y+27, r26	; 0x1b
    2836:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2838:	69 8d       	ldd	r22, Y+25	; 0x19
    283a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    283c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    283e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	4a e7       	ldi	r20, 0x7A	; 122
    2846:	53 e4       	ldi	r21, 0x43	; 67
    2848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	8d 8b       	std	Y+21, r24	; 0x15
    2852:	9e 8b       	std	Y+22, r25	; 0x16
    2854:	af 8b       	std	Y+23, r26	; 0x17
    2856:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2858:	6d 89       	ldd	r22, Y+21	; 0x15
    285a:	7e 89       	ldd	r23, Y+22	; 0x16
    285c:	8f 89       	ldd	r24, Y+23	; 0x17
    285e:	98 8d       	ldd	r25, Y+24	; 0x18
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e8       	ldi	r20, 0x80	; 128
    2866:	5f e3       	ldi	r21, 0x3F	; 63
    2868:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    286c:	88 23       	and	r24, r24
    286e:	2c f4       	brge	.+10     	; 0x287a <LCD_displayCharacter+0x256>
		__ticks = 1;
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	9c 8b       	std	Y+20, r25	; 0x14
    2876:	8b 8b       	std	Y+19, r24	; 0x13
    2878:	3f c0       	rjmp	.+126    	; 0x28f8 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    287a:	6d 89       	ldd	r22, Y+21	; 0x15
    287c:	7e 89       	ldd	r23, Y+22	; 0x16
    287e:	8f 89       	ldd	r24, Y+23	; 0x17
    2880:	98 8d       	ldd	r25, Y+24	; 0x18
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	3f ef       	ldi	r19, 0xFF	; 255
    2886:	4f e7       	ldi	r20, 0x7F	; 127
    2888:	57 e4       	ldi	r21, 0x47	; 71
    288a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    288e:	18 16       	cp	r1, r24
    2890:	4c f5       	brge	.+82     	; 0x28e4 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2892:	69 8d       	ldd	r22, Y+25	; 0x19
    2894:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2896:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2898:	9c 8d       	ldd	r25, Y+28	; 0x1c
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e2       	ldi	r20, 0x20	; 32
    28a0:	51 e4       	ldi	r21, 0x41	; 65
    28a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	bc 01       	movw	r22, r24
    28ac:	cd 01       	movw	r24, r26
    28ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	9c 8b       	std	Y+20, r25	; 0x14
    28b8:	8b 8b       	std	Y+19, r24	; 0x13
    28ba:	0f c0       	rjmp	.+30     	; 0x28da <LCD_displayCharacter+0x2b6>
    28bc:	89 e1       	ldi	r24, 0x19	; 25
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	9a 8b       	std	Y+18, r25	; 0x12
    28c2:	89 8b       	std	Y+17, r24	; 0x11
    28c4:	89 89       	ldd	r24, Y+17	; 0x11
    28c6:	9a 89       	ldd	r25, Y+18	; 0x12
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <LCD_displayCharacter+0x2a4>
    28cc:	9a 8b       	std	Y+18, r25	; 0x12
    28ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d0:	8b 89       	ldd	r24, Y+19	; 0x13
    28d2:	9c 89       	ldd	r25, Y+20	; 0x14
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	9c 8b       	std	Y+20, r25	; 0x14
    28d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28da:	8b 89       	ldd	r24, Y+19	; 0x13
    28dc:	9c 89       	ldd	r25, Y+20	; 0x14
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	69 f7       	brne	.-38     	; 0x28bc <LCD_displayCharacter+0x298>
    28e2:	14 c0       	rjmp	.+40     	; 0x290c <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e4:	6d 89       	ldd	r22, Y+21	; 0x15
    28e6:	7e 89       	ldd	r23, Y+22	; 0x16
    28e8:	8f 89       	ldd	r24, Y+23	; 0x17
    28ea:	98 8d       	ldd	r25, Y+24	; 0x18
    28ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	9c 8b       	std	Y+20, r25	; 0x14
    28f6:	8b 8b       	std	Y+19, r24	; 0x13
    28f8:	8b 89       	ldd	r24, Y+19	; 0x13
    28fa:	9c 89       	ldd	r25, Y+20	; 0x14
    28fc:	98 8b       	std	Y+16, r25	; 0x10
    28fe:	8f 87       	std	Y+15, r24	; 0x0f
    2900:	8f 85       	ldd	r24, Y+15	; 0x0f
    2902:	98 89       	ldd	r25, Y+16	; 0x10
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <LCD_displayCharacter+0x2e0>
    2908:	98 8b       	std	Y+16, r25	; 0x10
    290a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    290c:	83 e0       	ldi	r24, 0x03	; 3
    290e:	66 e0       	ldi	r22, 0x06	; 6
    2910:	40 e0       	ldi	r20, 0x00	; 0
    2912:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <GPIO_writePin>
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	a0 e8       	ldi	r26, 0x80	; 128
    291c:	bf e3       	ldi	r27, 0x3F	; 63
    291e:	8b 87       	std	Y+11, r24	; 0x0b
    2920:	9c 87       	std	Y+12, r25	; 0x0c
    2922:	ad 87       	std	Y+13, r26	; 0x0d
    2924:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2926:	6b 85       	ldd	r22, Y+11	; 0x0b
    2928:	7c 85       	ldd	r23, Y+12	; 0x0c
    292a:	8d 85       	ldd	r24, Y+13	; 0x0d
    292c:	9e 85       	ldd	r25, Y+14	; 0x0e
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	4a e7       	ldi	r20, 0x7A	; 122
    2934:	53 e4       	ldi	r21, 0x43	; 67
    2936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	8f 83       	std	Y+7, r24	; 0x07
    2940:	98 87       	std	Y+8, r25	; 0x08
    2942:	a9 87       	std	Y+9, r26	; 0x09
    2944:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2946:	6f 81       	ldd	r22, Y+7	; 0x07
    2948:	78 85       	ldd	r23, Y+8	; 0x08
    294a:	89 85       	ldd	r24, Y+9	; 0x09
    294c:	9a 85       	ldd	r25, Y+10	; 0x0a
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	40 e8       	ldi	r20, 0x80	; 128
    2954:	5f e3       	ldi	r21, 0x3F	; 63
    2956:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    295a:	88 23       	and	r24, r24
    295c:	2c f4       	brge	.+10     	; 0x2968 <LCD_displayCharacter+0x344>
		__ticks = 1;
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	9e 83       	std	Y+6, r25	; 0x06
    2964:	8d 83       	std	Y+5, r24	; 0x05
    2966:	3f c0       	rjmp	.+126    	; 0x29e6 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2968:	6f 81       	ldd	r22, Y+7	; 0x07
    296a:	78 85       	ldd	r23, Y+8	; 0x08
    296c:	89 85       	ldd	r24, Y+9	; 0x09
    296e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	3f ef       	ldi	r19, 0xFF	; 255
    2974:	4f e7       	ldi	r20, 0x7F	; 127
    2976:	57 e4       	ldi	r21, 0x47	; 71
    2978:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    297c:	18 16       	cp	r1, r24
    297e:	4c f5       	brge	.+82     	; 0x29d2 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2980:	6b 85       	ldd	r22, Y+11	; 0x0b
    2982:	7c 85       	ldd	r23, Y+12	; 0x0c
    2984:	8d 85       	ldd	r24, Y+13	; 0x0d
    2986:	9e 85       	ldd	r25, Y+14	; 0x0e
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	40 e2       	ldi	r20, 0x20	; 32
    298e:	51 e4       	ldi	r21, 0x41	; 65
    2990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	bc 01       	movw	r22, r24
    299a:	cd 01       	movw	r24, r26
    299c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	9e 83       	std	Y+6, r25	; 0x06
    29a6:	8d 83       	std	Y+5, r24	; 0x05
    29a8:	0f c0       	rjmp	.+30     	; 0x29c8 <LCD_displayCharacter+0x3a4>
    29aa:	89 e1       	ldi	r24, 0x19	; 25
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	9c 83       	std	Y+4, r25	; 0x04
    29b0:	8b 83       	std	Y+3, r24	; 0x03
    29b2:	8b 81       	ldd	r24, Y+3	; 0x03
    29b4:	9c 81       	ldd	r25, Y+4	; 0x04
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	f1 f7       	brne	.-4      	; 0x29b6 <LCD_displayCharacter+0x392>
    29ba:	9c 83       	std	Y+4, r25	; 0x04
    29bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29be:	8d 81       	ldd	r24, Y+5	; 0x05
    29c0:	9e 81       	ldd	r25, Y+6	; 0x06
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	9e 83       	std	Y+6, r25	; 0x06
    29c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ca:	9e 81       	ldd	r25, Y+6	; 0x06
    29cc:	00 97       	sbiw	r24, 0x00	; 0
    29ce:	69 f7       	brne	.-38     	; 0x29aa <LCD_displayCharacter+0x386>
    29d0:	14 c0       	rjmp	.+40     	; 0x29fa <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d2:	6f 81       	ldd	r22, Y+7	; 0x07
    29d4:	78 85       	ldd	r23, Y+8	; 0x08
    29d6:	89 85       	ldd	r24, Y+9	; 0x09
    29d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	9e 83       	std	Y+6, r25	; 0x06
    29e4:	8d 83       	std	Y+5, r24	; 0x05
    29e6:	8d 81       	ldd	r24, Y+5	; 0x05
    29e8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ea:	9a 83       	std	Y+2, r25	; 0x02
    29ec:	89 83       	std	Y+1, r24	; 0x01
    29ee:	89 81       	ldd	r24, Y+1	; 0x01
    29f0:	9a 81       	ldd	r25, Y+2	; 0x02
    29f2:	01 97       	sbiw	r24, 0x01	; 1
    29f4:	f1 f7       	brne	.-4      	; 0x29f2 <LCD_displayCharacter+0x3ce>
    29f6:	9a 83       	std	Y+2, r25	; 0x02
    29f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    29fa:	e9 96       	adiw	r28, 0x39	; 57
    29fc:	0f b6       	in	r0, 0x3f	; 63
    29fe:	f8 94       	cli
    2a00:	de bf       	out	0x3e, r29	; 62
    2a02:	0f be       	out	0x3f, r0	; 63
    2a04:	cd bf       	out	0x3d, r28	; 61
    2a06:	cf 91       	pop	r28
    2a08:	df 91       	pop	r29
    2a0a:	08 95       	ret

00002a0c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2a0c:	df 93       	push	r29
    2a0e:	cf 93       	push	r28
    2a10:	00 d0       	rcall	.+0      	; 0x2a12 <LCD_displayString+0x6>
    2a12:	0f 92       	push	r0
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
    2a18:	9b 83       	std	Y+3, r25	; 0x03
    2a1a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a1c:	19 82       	std	Y+1, r1	; 0x01
    2a1e:	0e c0       	rjmp	.+28     	; 0x2a3c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	28 2f       	mov	r18, r24
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	8a 81       	ldd	r24, Y+2	; 0x02
    2a28:	9b 81       	ldd	r25, Y+3	; 0x03
    2a2a:	fc 01       	movw	r30, r24
    2a2c:	e2 0f       	add	r30, r18
    2a2e:	f3 1f       	adc	r31, r19
    2a30:	80 81       	ld	r24, Z
    2a32:	0e 94 12 13 	call	0x2624	; 0x2624 <LCD_displayCharacter>
		i++;
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	8f 5f       	subi	r24, 0xFF	; 255
    2a3a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	28 2f       	mov	r18, r24
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	8a 81       	ldd	r24, Y+2	; 0x02
    2a44:	9b 81       	ldd	r25, Y+3	; 0x03
    2a46:	fc 01       	movw	r30, r24
    2a48:	e2 0f       	add	r30, r18
    2a4a:	f3 1f       	adc	r31, r19
    2a4c:	80 81       	ld	r24, Z
    2a4e:	88 23       	and	r24, r24
    2a50:	39 f7       	brne	.-50     	; 0x2a20 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	0f 90       	pop	r0
    2a58:	cf 91       	pop	r28
    2a5a:	df 91       	pop	r29
    2a5c:	08 95       	ret

00002a5e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2a5e:	df 93       	push	r29
    2a60:	cf 93       	push	r28
    2a62:	00 d0       	rcall	.+0      	; 0x2a64 <LCD_moveCursor+0x6>
    2a64:	00 d0       	rcall	.+0      	; 0x2a66 <LCD_moveCursor+0x8>
    2a66:	0f 92       	push	r0
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
    2a6c:	8a 83       	std	Y+2, r24	; 0x02
    2a6e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2a70:	8a 81       	ldd	r24, Y+2	; 0x02
    2a72:	28 2f       	mov	r18, r24
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	3d 83       	std	Y+5, r19	; 0x05
    2a78:	2c 83       	std	Y+4, r18	; 0x04
    2a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a7c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a7e:	81 30       	cpi	r24, 0x01	; 1
    2a80:	91 05       	cpc	r25, r1
    2a82:	c1 f0       	breq	.+48     	; 0x2ab4 <LCD_moveCursor+0x56>
    2a84:	2c 81       	ldd	r18, Y+4	; 0x04
    2a86:	3d 81       	ldd	r19, Y+5	; 0x05
    2a88:	22 30       	cpi	r18, 0x02	; 2
    2a8a:	31 05       	cpc	r19, r1
    2a8c:	2c f4       	brge	.+10     	; 0x2a98 <LCD_moveCursor+0x3a>
    2a8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a90:	9d 81       	ldd	r25, Y+5	; 0x05
    2a92:	00 97       	sbiw	r24, 0x00	; 0
    2a94:	61 f0       	breq	.+24     	; 0x2aae <LCD_moveCursor+0x50>
    2a96:	19 c0       	rjmp	.+50     	; 0x2aca <LCD_moveCursor+0x6c>
    2a98:	2c 81       	ldd	r18, Y+4	; 0x04
    2a9a:	3d 81       	ldd	r19, Y+5	; 0x05
    2a9c:	22 30       	cpi	r18, 0x02	; 2
    2a9e:	31 05       	cpc	r19, r1
    2aa0:	69 f0       	breq	.+26     	; 0x2abc <LCD_moveCursor+0x5e>
    2aa2:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa4:	9d 81       	ldd	r25, Y+5	; 0x05
    2aa6:	83 30       	cpi	r24, 0x03	; 3
    2aa8:	91 05       	cpc	r25, r1
    2aaa:	61 f0       	breq	.+24     	; 0x2ac4 <LCD_moveCursor+0x66>
    2aac:	0e c0       	rjmp	.+28     	; 0x2aca <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2aae:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab0:	89 83       	std	Y+1, r24	; 0x01
    2ab2:	0b c0       	rjmp	.+22     	; 0x2aca <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab6:	80 5c       	subi	r24, 0xC0	; 192
    2ab8:	89 83       	std	Y+1, r24	; 0x01
    2aba:	07 c0       	rjmp	.+14     	; 0x2aca <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2abc:	8b 81       	ldd	r24, Y+3	; 0x03
    2abe:	80 5f       	subi	r24, 0xF0	; 240
    2ac0:	89 83       	std	Y+1, r24	; 0x01
    2ac2:	03 c0       	rjmp	.+6      	; 0x2aca <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac6:	80 5b       	subi	r24, 0xB0	; 176
    2ac8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2aca:	89 81       	ldd	r24, Y+1	; 0x01
    2acc:	80 68       	ori	r24, 0x80	; 128
    2ace:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_sendCommand>
}
    2ad2:	0f 90       	pop	r0
    2ad4:	0f 90       	pop	r0
    2ad6:	0f 90       	pop	r0
    2ad8:	0f 90       	pop	r0
    2ada:	0f 90       	pop	r0
    2adc:	cf 91       	pop	r28
    2ade:	df 91       	pop	r29
    2ae0:	08 95       	ret

00002ae2 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2ae2:	df 93       	push	r29
    2ae4:	cf 93       	push	r28
    2ae6:	00 d0       	rcall	.+0      	; 0x2ae8 <LCD_displayStringRowColumn+0x6>
    2ae8:	00 d0       	rcall	.+0      	; 0x2aea <LCD_displayStringRowColumn+0x8>
    2aea:	cd b7       	in	r28, 0x3d	; 61
    2aec:	de b7       	in	r29, 0x3e	; 62
    2aee:	89 83       	std	Y+1, r24	; 0x01
    2af0:	6a 83       	std	Y+2, r22	; 0x02
    2af2:	5c 83       	std	Y+4, r21	; 0x04
    2af4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	6a 81       	ldd	r22, Y+2	; 0x02
    2afa:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2afe:	8b 81       	ldd	r24, Y+3	; 0x03
    2b00:	9c 81       	ldd	r25, Y+4	; 0x04
    2b02:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <LCD_displayString>
}
    2b06:	0f 90       	pop	r0
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
    2b0c:	0f 90       	pop	r0
    2b0e:	cf 91       	pop	r28
    2b10:	df 91       	pop	r29
    2b12:	08 95       	ret

00002b14 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2b14:	df 93       	push	r29
    2b16:	cf 93       	push	r28
    2b18:	cd b7       	in	r28, 0x3d	; 61
    2b1a:	de b7       	in	r29, 0x3e	; 62
    2b1c:	62 97       	sbiw	r28, 0x12	; 18
    2b1e:	0f b6       	in	r0, 0x3f	; 63
    2b20:	f8 94       	cli
    2b22:	de bf       	out	0x3e, r29	; 62
    2b24:	0f be       	out	0x3f, r0	; 63
    2b26:	cd bf       	out	0x3d, r28	; 61
    2b28:	9a 8b       	std	Y+18, r25	; 0x12
    2b2a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2b2c:	89 89       	ldd	r24, Y+17	; 0x11
    2b2e:	9a 89       	ldd	r25, Y+18	; 0x12
    2b30:	9e 01       	movw	r18, r28
    2b32:	2f 5f       	subi	r18, 0xFF	; 255
    2b34:	3f 4f       	sbci	r19, 0xFF	; 255
    2b36:	b9 01       	movw	r22, r18
    2b38:	4a e0       	ldi	r20, 0x0A	; 10
    2b3a:	50 e0       	ldi	r21, 0x00	; 0
    2b3c:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <itoa>
   LCD_displayString(buff); /* Display the string */
    2b40:	ce 01       	movw	r24, r28
    2b42:	01 96       	adiw	r24, 0x01	; 1
    2b44:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <LCD_displayString>
}
    2b48:	62 96       	adiw	r28, 0x12	; 18
    2b4a:	0f b6       	in	r0, 0x3f	; 63
    2b4c:	f8 94       	cli
    2b4e:	de bf       	out	0x3e, r29	; 62
    2b50:	0f be       	out	0x3f, r0	; 63
    2b52:	cd bf       	out	0x3d, r28	; 61
    2b54:	cf 91       	pop	r28
    2b56:	df 91       	pop	r29
    2b58:	08 95       	ret

00002b5a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2b5a:	df 93       	push	r29
    2b5c:	cf 93       	push	r28
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_sendCommand>
}
    2b68:	cf 91       	pop	r28
    2b6a:	df 91       	pop	r29
    2b6c:	08 95       	ret

00002b6e <UART_init>:
#include <avr/io.h>
#include "common_macros.h"


void UART_init(uint32 baud_rate, Uart_Config *Config_ptr)
{
    2b6e:	df 93       	push	r29
    2b70:	cf 93       	push	r28
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
    2b76:	28 97       	sbiw	r28, 0x08	; 8
    2b78:	0f b6       	in	r0, 0x3f	; 63
    2b7a:	f8 94       	cli
    2b7c:	de bf       	out	0x3e, r29	; 62
    2b7e:	0f be       	out	0x3f, r0	; 63
    2b80:	cd bf       	out	0x3d, r28	; 61
    2b82:	6b 83       	std	Y+3, r22	; 0x03
    2b84:	7c 83       	std	Y+4, r23	; 0x04
    2b86:	8d 83       	std	Y+5, r24	; 0x05
    2b88:	9e 83       	std	Y+6, r25	; 0x06
    2b8a:	58 87       	std	Y+8, r21	; 0x08
    2b8c:	4f 83       	std	Y+7, r20	; 0x07
	uint16 ubrr_value = 0;
    2b8e:	1a 82       	std	Y+2, r1	; 0x02
    2b90:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
    2b92:	eb e2       	ldi	r30, 0x2B	; 43
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	82 e0       	ldi	r24, 0x02	; 2
    2b98:	80 83       	st	Z, r24

	 /* RXEN  = 1 Receiver Enable
     * RXEN  = 1 Transmitter Enable */

	UCSRB = (1 << RXEN) | (1 << TXEN);
    2b9a:	ea e2       	ldi	r30, 0x2A	; 42
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	88 e1       	ldi	r24, 0x18	; 24
    2ba0:	80 83       	st	Z, r24

	UCSRC = (UCSRC & 0xF9) | ((Config_ptr -> Bit_Data) << UCSZ0);
    2ba2:	a0 e4       	ldi	r26, 0x40	; 64
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	e0 e4       	ldi	r30, 0x40	; 64
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	80 81       	ld	r24, Z
    2bac:	28 2f       	mov	r18, r24
    2bae:	29 7f       	andi	r18, 0xF9	; 249
    2bb0:	ef 81       	ldd	r30, Y+7	; 0x07
    2bb2:	f8 85       	ldd	r31, Y+8	; 0x08
    2bb4:	80 81       	ld	r24, Z
    2bb6:	88 2f       	mov	r24, r24
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	88 0f       	add	r24, r24
    2bbc:	99 1f       	adc	r25, r25
    2bbe:	82 2b       	or	r24, r18
    2bc0:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xCF) | ((Config_ptr -> ParityType) << UPM0);
    2bc2:	a0 e4       	ldi	r26, 0x40	; 64
    2bc4:	b0 e0       	ldi	r27, 0x00	; 0
    2bc6:	e0 e4       	ldi	r30, 0x40	; 64
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	80 81       	ld	r24, Z
    2bcc:	28 2f       	mov	r18, r24
    2bce:	2f 7c       	andi	r18, 0xCF	; 207
    2bd0:	ef 81       	ldd	r30, Y+7	; 0x07
    2bd2:	f8 85       	ldd	r31, Y+8	; 0x08
    2bd4:	81 81       	ldd	r24, Z+1	; 0x01
    2bd6:	88 2f       	mov	r24, r24
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	82 95       	swap	r24
    2bdc:	92 95       	swap	r25
    2bde:	90 7f       	andi	r25, 0xF0	; 240
    2be0:	98 27       	eor	r25, r24
    2be2:	80 7f       	andi	r24, 0xF0	; 240
    2be4:	98 27       	eor	r25, r24
    2be6:	82 2b       	or	r24, r18
    2be8:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF7) | ((Config_ptr -> Stop_Bit_Num) << USBS);
    2bea:	a0 e4       	ldi	r26, 0x40	; 64
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	e0 e4       	ldi	r30, 0x40	; 64
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	80 81       	ld	r24, Z
    2bf4:	28 2f       	mov	r18, r24
    2bf6:	27 7f       	andi	r18, 0xF7	; 247
    2bf8:	ef 81       	ldd	r30, Y+7	; 0x07
    2bfa:	f8 85       	ldd	r31, Y+8	; 0x08
    2bfc:	82 81       	ldd	r24, Z+2	; 0x02
    2bfe:	88 2f       	mov	r24, r24
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	88 0f       	add	r24, r24
    2c04:	99 1f       	adc	r25, r25
    2c06:	88 0f       	add	r24, r24
    2c08:	99 1f       	adc	r25, r25
    2c0a:	88 0f       	add	r24, r24
    2c0c:	99 1f       	adc	r25, r25
    2c0e:	82 2b       	or	r24, r18
    2c10:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    2c12:	8b 81       	ldd	r24, Y+3	; 0x03
    2c14:	9c 81       	ldd	r25, Y+4	; 0x04
    2c16:	ad 81       	ldd	r26, Y+5	; 0x05
    2c18:	be 81       	ldd	r27, Y+6	; 0x06
    2c1a:	88 0f       	add	r24, r24
    2c1c:	99 1f       	adc	r25, r25
    2c1e:	aa 1f       	adc	r26, r26
    2c20:	bb 1f       	adc	r27, r27
    2c22:	88 0f       	add	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	aa 1f       	adc	r26, r26
    2c28:	bb 1f       	adc	r27, r27
    2c2a:	88 0f       	add	r24, r24
    2c2c:	99 1f       	adc	r25, r25
    2c2e:	aa 1f       	adc	r26, r26
    2c30:	bb 1f       	adc	r27, r27
    2c32:	9c 01       	movw	r18, r24
    2c34:	ad 01       	movw	r20, r26
    2c36:	80 e4       	ldi	r24, 0x40	; 64
    2c38:	92 e4       	ldi	r25, 0x42	; 66
    2c3a:	af e0       	ldi	r26, 0x0F	; 15
    2c3c:	b0 e0       	ldi	r27, 0x00	; 0
    2c3e:	bc 01       	movw	r22, r24
    2c40:	cd 01       	movw	r24, r26
    2c42:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__udivmodsi4>
    2c46:	da 01       	movw	r26, r20
    2c48:	c9 01       	movw	r24, r18
    2c4a:	01 97       	sbiw	r24, 0x01	; 1
    2c4c:	9a 83       	std	Y+2, r25	; 0x02
    2c4e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
		UBRRH = ubrr_value >> 8;
    2c50:	e0 e4       	ldi	r30, 0x40	; 64
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	89 81       	ldd	r24, Y+1	; 0x01
    2c56:	9a 81       	ldd	r25, Y+2	; 0x02
    2c58:	89 2f       	mov	r24, r25
    2c5a:	99 27       	eor	r25, r25
    2c5c:	80 83       	st	Z, r24
		UBRRL = ubrr_value;
    2c5e:	e9 e2       	ldi	r30, 0x29	; 41
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	80 83       	st	Z, r24
}
    2c66:	28 96       	adiw	r28, 0x08	; 8
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	f8 94       	cli
    2c6c:	de bf       	out	0x3e, r29	; 62
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	cd bf       	out	0x3d, r28	; 61
    2c72:	cf 91       	pop	r28
    2c74:	df 91       	pop	r29
    2c76:	08 95       	ret

00002c78 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2c78:	df 93       	push	r29
    2c7a:	cf 93       	push	r28
    2c7c:	0f 92       	push	r0
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
    2c82:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2c84:	eb e2       	ldi	r30, 0x2B	; 43
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	80 81       	ld	r24, Z
    2c8a:	88 2f       	mov	r24, r24
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	80 72       	andi	r24, 0x20	; 32
    2c90:	90 70       	andi	r25, 0x00	; 0
    2c92:	00 97       	sbiw	r24, 0x00	; 0
    2c94:	b9 f3       	breq	.-18     	; 0x2c84 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2c96:	ec e2       	ldi	r30, 0x2C	; 44
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2c9e:	0f 90       	pop	r0
    2ca0:	cf 91       	pop	r28
    2ca2:	df 91       	pop	r29
    2ca4:	08 95       	ret

00002ca6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2ca6:	df 93       	push	r29
    2ca8:	cf 93       	push	r28
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2cae:	eb e2       	ldi	r30, 0x2B	; 43
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	80 81       	ld	r24, Z
    2cb4:	88 23       	and	r24, r24
    2cb6:	dc f7       	brge	.-10     	; 0x2cae <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2cb8:	ec e2       	ldi	r30, 0x2C	; 44
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
}
    2cbe:	cf 91       	pop	r28
    2cc0:	df 91       	pop	r29
    2cc2:	08 95       	ret

00002cc4 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2cc4:	df 93       	push	r29
    2cc6:	cf 93       	push	r28
    2cc8:	00 d0       	rcall	.+0      	; 0x2cca <UART_sendString+0x6>
    2cca:	0f 92       	push	r0
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
    2cd0:	9b 83       	std	Y+3, r25	; 0x03
    2cd2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2cd4:	19 82       	std	Y+1, r1	; 0x01
    2cd6:	0e c0       	rjmp	.+28     	; 0x2cf4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2cd8:	89 81       	ldd	r24, Y+1	; 0x01
    2cda:	28 2f       	mov	r18, r24
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	e2 0f       	add	r30, r18
    2ce6:	f3 1f       	adc	r31, r19
    2ce8:	80 81       	ld	r24, Z
    2cea:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <UART_sendByte>
		i++;
    2cee:	89 81       	ldd	r24, Y+1	; 0x01
    2cf0:	8f 5f       	subi	r24, 0xFF	; 255
    2cf2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2cf4:	89 81       	ldd	r24, Y+1	; 0x01
    2cf6:	28 2f       	mov	r18, r24
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cfe:	fc 01       	movw	r30, r24
    2d00:	e2 0f       	add	r30, r18
    2d02:	f3 1f       	adc	r31, r19
    2d04:	80 81       	ld	r24, Z
    2d06:	88 23       	and	r24, r24
    2d08:	39 f7       	brne	.-50     	; 0x2cd8 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
    2d10:	cf 91       	pop	r28
    2d12:	df 91       	pop	r29
    2d14:	08 95       	ret

00002d16 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2d16:	0f 93       	push	r16
    2d18:	1f 93       	push	r17
    2d1a:	df 93       	push	r29
    2d1c:	cf 93       	push	r28
    2d1e:	00 d0       	rcall	.+0      	; 0x2d20 <UART_receiveString+0xa>
    2d20:	0f 92       	push	r0
    2d22:	cd b7       	in	r28, 0x3d	; 61
    2d24:	de b7       	in	r29, 0x3e	; 62
    2d26:	9b 83       	std	Y+3, r25	; 0x03
    2d28:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d2a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2d2c:	89 81       	ldd	r24, Y+1	; 0x01
    2d2e:	28 2f       	mov	r18, r24
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	8a 81       	ldd	r24, Y+2	; 0x02
    2d34:	9b 81       	ldd	r25, Y+3	; 0x03
    2d36:	8c 01       	movw	r16, r24
    2d38:	02 0f       	add	r16, r18
    2d3a:	13 1f       	adc	r17, r19
    2d3c:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <UART_recieveByte>
    2d40:	f8 01       	movw	r30, r16
    2d42:	80 83       	st	Z, r24
    2d44:	0f c0       	rjmp	.+30     	; 0x2d64 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	8f 5f       	subi	r24, 0xFF	; 255
    2d4a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2d4c:	89 81       	ldd	r24, Y+1	; 0x01
    2d4e:	28 2f       	mov	r18, r24
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	8a 81       	ldd	r24, Y+2	; 0x02
    2d54:	9b 81       	ldd	r25, Y+3	; 0x03
    2d56:	8c 01       	movw	r16, r24
    2d58:	02 0f       	add	r16, r18
    2d5a:	13 1f       	adc	r17, r19
    2d5c:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <UART_recieveByte>
    2d60:	f8 01       	movw	r30, r16
    2d62:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2d64:	89 81       	ldd	r24, Y+1	; 0x01
    2d66:	28 2f       	mov	r18, r24
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d6e:	fc 01       	movw	r30, r24
    2d70:	e2 0f       	add	r30, r18
    2d72:	f3 1f       	adc	r31, r19
    2d74:	80 81       	ld	r24, Z
    2d76:	83 32       	cpi	r24, 0x23	; 35
    2d78:	31 f7       	brne	.-52     	; 0x2d46 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	28 2f       	mov	r18, r24
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	8a 81       	ldd	r24, Y+2	; 0x02
    2d82:	9b 81       	ldd	r25, Y+3	; 0x03
    2d84:	fc 01       	movw	r30, r24
    2d86:	e2 0f       	add	r30, r18
    2d88:	f3 1f       	adc	r31, r19
    2d8a:	10 82       	st	Z, r1
}
    2d8c:	0f 90       	pop	r0
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	cf 91       	pop	r28
    2d94:	df 91       	pop	r29
    2d96:	1f 91       	pop	r17
    2d98:	0f 91       	pop	r16
    2d9a:	08 95       	ret

00002d9c <__udivmodsi4>:
    2d9c:	a1 e2       	ldi	r26, 0x21	; 33
    2d9e:	1a 2e       	mov	r1, r26
    2da0:	aa 1b       	sub	r26, r26
    2da2:	bb 1b       	sub	r27, r27
    2da4:	fd 01       	movw	r30, r26
    2da6:	0d c0       	rjmp	.+26     	; 0x2dc2 <__udivmodsi4_ep>

00002da8 <__udivmodsi4_loop>:
    2da8:	aa 1f       	adc	r26, r26
    2daa:	bb 1f       	adc	r27, r27
    2dac:	ee 1f       	adc	r30, r30
    2dae:	ff 1f       	adc	r31, r31
    2db0:	a2 17       	cp	r26, r18
    2db2:	b3 07       	cpc	r27, r19
    2db4:	e4 07       	cpc	r30, r20
    2db6:	f5 07       	cpc	r31, r21
    2db8:	20 f0       	brcs	.+8      	; 0x2dc2 <__udivmodsi4_ep>
    2dba:	a2 1b       	sub	r26, r18
    2dbc:	b3 0b       	sbc	r27, r19
    2dbe:	e4 0b       	sbc	r30, r20
    2dc0:	f5 0b       	sbc	r31, r21

00002dc2 <__udivmodsi4_ep>:
    2dc2:	66 1f       	adc	r22, r22
    2dc4:	77 1f       	adc	r23, r23
    2dc6:	88 1f       	adc	r24, r24
    2dc8:	99 1f       	adc	r25, r25
    2dca:	1a 94       	dec	r1
    2dcc:	69 f7       	brne	.-38     	; 0x2da8 <__udivmodsi4_loop>
    2dce:	60 95       	com	r22
    2dd0:	70 95       	com	r23
    2dd2:	80 95       	com	r24
    2dd4:	90 95       	com	r25
    2dd6:	9b 01       	movw	r18, r22
    2dd8:	ac 01       	movw	r20, r24
    2dda:	bd 01       	movw	r22, r26
    2ddc:	cf 01       	movw	r24, r30
    2dde:	08 95       	ret

00002de0 <__prologue_saves__>:
    2de0:	2f 92       	push	r2
    2de2:	3f 92       	push	r3
    2de4:	4f 92       	push	r4
    2de6:	5f 92       	push	r5
    2de8:	6f 92       	push	r6
    2dea:	7f 92       	push	r7
    2dec:	8f 92       	push	r8
    2dee:	9f 92       	push	r9
    2df0:	af 92       	push	r10
    2df2:	bf 92       	push	r11
    2df4:	cf 92       	push	r12
    2df6:	df 92       	push	r13
    2df8:	ef 92       	push	r14
    2dfa:	ff 92       	push	r15
    2dfc:	0f 93       	push	r16
    2dfe:	1f 93       	push	r17
    2e00:	cf 93       	push	r28
    2e02:	df 93       	push	r29
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
    2e08:	ca 1b       	sub	r28, r26
    2e0a:	db 0b       	sbc	r29, r27
    2e0c:	0f b6       	in	r0, 0x3f	; 63
    2e0e:	f8 94       	cli
    2e10:	de bf       	out	0x3e, r29	; 62
    2e12:	0f be       	out	0x3f, r0	; 63
    2e14:	cd bf       	out	0x3d, r28	; 61
    2e16:	09 94       	ijmp

00002e18 <__epilogue_restores__>:
    2e18:	2a 88       	ldd	r2, Y+18	; 0x12
    2e1a:	39 88       	ldd	r3, Y+17	; 0x11
    2e1c:	48 88       	ldd	r4, Y+16	; 0x10
    2e1e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e20:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e22:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e24:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e26:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e28:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e2a:	b9 84       	ldd	r11, Y+9	; 0x09
    2e2c:	c8 84       	ldd	r12, Y+8	; 0x08
    2e2e:	df 80       	ldd	r13, Y+7	; 0x07
    2e30:	ee 80       	ldd	r14, Y+6	; 0x06
    2e32:	fd 80       	ldd	r15, Y+5	; 0x05
    2e34:	0c 81       	ldd	r16, Y+4	; 0x04
    2e36:	1b 81       	ldd	r17, Y+3	; 0x03
    2e38:	aa 81       	ldd	r26, Y+2	; 0x02
    2e3a:	b9 81       	ldd	r27, Y+1	; 0x01
    2e3c:	ce 0f       	add	r28, r30
    2e3e:	d1 1d       	adc	r29, r1
    2e40:	0f b6       	in	r0, 0x3f	; 63
    2e42:	f8 94       	cli
    2e44:	de bf       	out	0x3e, r29	; 62
    2e46:	0f be       	out	0x3f, r0	; 63
    2e48:	cd bf       	out	0x3d, r28	; 61
    2e4a:	ed 01       	movw	r28, r26
    2e4c:	08 95       	ret

00002e4e <itoa>:
    2e4e:	fb 01       	movw	r30, r22
    2e50:	9f 01       	movw	r18, r30
    2e52:	e8 94       	clt
    2e54:	42 30       	cpi	r20, 0x02	; 2
    2e56:	c4 f0       	brlt	.+48     	; 0x2e88 <itoa+0x3a>
    2e58:	45 32       	cpi	r20, 0x25	; 37
    2e5a:	b4 f4       	brge	.+44     	; 0x2e88 <itoa+0x3a>
    2e5c:	4a 30       	cpi	r20, 0x0A	; 10
    2e5e:	29 f4       	brne	.+10     	; 0x2e6a <itoa+0x1c>
    2e60:	97 fb       	bst	r25, 7
    2e62:	1e f4       	brtc	.+6      	; 0x2e6a <itoa+0x1c>
    2e64:	90 95       	com	r25
    2e66:	81 95       	neg	r24
    2e68:	9f 4f       	sbci	r25, 0xFF	; 255
    2e6a:	64 2f       	mov	r22, r20
    2e6c:	77 27       	eor	r23, r23
    2e6e:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <__udivmodhi4>
    2e72:	80 5d       	subi	r24, 0xD0	; 208
    2e74:	8a 33       	cpi	r24, 0x3A	; 58
    2e76:	0c f0       	brlt	.+2      	; 0x2e7a <itoa+0x2c>
    2e78:	89 5d       	subi	r24, 0xD9	; 217
    2e7a:	81 93       	st	Z+, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	00 97       	sbiw	r24, 0x00	; 0
    2e80:	a1 f7       	brne	.-24     	; 0x2e6a <itoa+0x1c>
    2e82:	16 f4       	brtc	.+4      	; 0x2e88 <itoa+0x3a>
    2e84:	5d e2       	ldi	r21, 0x2D	; 45
    2e86:	51 93       	st	Z+, r21
    2e88:	10 82       	st	Z, r1
    2e8a:	c9 01       	movw	r24, r18
    2e8c:	0c 94 48 17 	jmp	0x2e90	; 0x2e90 <strrev>

00002e90 <strrev>:
    2e90:	dc 01       	movw	r26, r24
    2e92:	fc 01       	movw	r30, r24
    2e94:	67 2f       	mov	r22, r23
    2e96:	71 91       	ld	r23, Z+
    2e98:	77 23       	and	r23, r23
    2e9a:	e1 f7       	brne	.-8      	; 0x2e94 <strrev+0x4>
    2e9c:	32 97       	sbiw	r30, 0x02	; 2
    2e9e:	04 c0       	rjmp	.+8      	; 0x2ea8 <strrev+0x18>
    2ea0:	7c 91       	ld	r23, X
    2ea2:	6d 93       	st	X+, r22
    2ea4:	70 83       	st	Z, r23
    2ea6:	62 91       	ld	r22, -Z
    2ea8:	ae 17       	cp	r26, r30
    2eaa:	bf 07       	cpc	r27, r31
    2eac:	c8 f3       	brcs	.-14     	; 0x2ea0 <strrev+0x10>
    2eae:	08 95       	ret

00002eb0 <__udivmodhi4>:
    2eb0:	aa 1b       	sub	r26, r26
    2eb2:	bb 1b       	sub	r27, r27
    2eb4:	51 e1       	ldi	r21, 0x11	; 17
    2eb6:	07 c0       	rjmp	.+14     	; 0x2ec6 <__udivmodhi4_ep>

00002eb8 <__udivmodhi4_loop>:
    2eb8:	aa 1f       	adc	r26, r26
    2eba:	bb 1f       	adc	r27, r27
    2ebc:	a6 17       	cp	r26, r22
    2ebe:	b7 07       	cpc	r27, r23
    2ec0:	10 f0       	brcs	.+4      	; 0x2ec6 <__udivmodhi4_ep>
    2ec2:	a6 1b       	sub	r26, r22
    2ec4:	b7 0b       	sbc	r27, r23

00002ec6 <__udivmodhi4_ep>:
    2ec6:	88 1f       	adc	r24, r24
    2ec8:	99 1f       	adc	r25, r25
    2eca:	5a 95       	dec	r21
    2ecc:	a9 f7       	brne	.-22     	; 0x2eb8 <__udivmodhi4_loop>
    2ece:	80 95       	com	r24
    2ed0:	90 95       	com	r25
    2ed2:	bc 01       	movw	r22, r24
    2ed4:	cd 01       	movw	r24, r26
    2ed6:	08 95       	ret

00002ed8 <_exit>:
    2ed8:	f8 94       	cli

00002eda <__stop_program>:
    2eda:	ff cf       	rjmp	.-2      	; 0x2eda <__stop_program>
