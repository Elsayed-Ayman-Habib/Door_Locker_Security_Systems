
Door_Locker_Security_System_MCU_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000023c6  0000245a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800072  00800072  0000246c  2**0
                  ALLOC
  3 .stab         00002688  00000000  00000000  0000246c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013b7  00000000  00000000  00004af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005eab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005feb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000615b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a5f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__vector_3>
      10:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ae 09 	jmp	0x135c	; 0x135c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <__vector_8>
      24:	0c 94 15 09 	jmp	0x122a	; 0x122a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 48 09 	jmp	0x1290	; 0x1290 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ec       	ldi	r30, 0xC6	; 198
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 38       	cpi	r26, 0x85	; 133
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 24 06 	call	0xc48	; 0xc48 <main>
      8a:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BZR_init>:

#include "Buzzer.h"
#include "gpio.h"

void BZR_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 a2 0c 	call	0x1944	; 0x1944 <GPIO_setupPinDirection>
	BZR_OFF();
     b58:	0e 94 bd 05 	call	0xb7a	; 0xb7a <BZR_OFF>
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <BZR_ON>:

void BZR_ON(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	62 e0       	ldi	r22, 0x02	; 2
     b6e:	41 e0       	ldi	r20, 0x01	; 1
     b70:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <GPIO_writePin>
}
     b74:	cf 91       	pop	r28
     b76:	df 91       	pop	r29
     b78:	08 95       	ret

00000b7a <BZR_OFF>:

void BZR_OFF(void)
{
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	62 e0       	ldi	r22, 0x02	; 2
     b86:	40 e0       	ldi	r20, 0x00	; 0
     b88:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <GPIO_writePin>
}
     b8c:	cf 91       	pop	r28
     b8e:	df 91       	pop	r29
     b90:	08 95       	ret

00000b92 <DcMotor_Init>:
/*******************************************************************************
 *                         Function Definitions                                *
 *******************************************************************************/

void DcMotor_Init(void)
{
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN1,PIN_OUTPUT);
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	63 e0       	ldi	r22, 0x03	; 3
     b9e:	41 e0       	ldi	r20, 0x01	; 1
     ba0:	0e 94 a2 0c 	call	0x1944	; 0x1944 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN2 ,PIN_OUTPUT);
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	64 e0       	ldi	r22, 0x04	; 4
     ba8:	41 e0       	ldi	r20, 0x01	; 1
     baa:	0e 94 a2 0c 	call	0x1944	; 0x1944 <GPIO_setupPinDirection>
	GPIO_writePin(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN1,LOGIC_LOW);
     bae:	82 e0       	ldi	r24, 0x02	; 2
     bb0:	63 e0       	ldi	r22, 0x03	; 3
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN2 ,LOGIC_LOW);
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	64 e0       	ldi	r22, 0x04	; 4
     bbc:	40 e0       	ldi	r20, 0x00	; 0
     bbe:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <GPIO_writePin>
}
     bc2:	cf 91       	pop	r28
     bc4:	df 91       	pop	r29
     bc6:	08 95       	ret

00000bc8 <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state)
{
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	00 d0       	rcall	.+0      	; 0xbce <DcMotor_Rotate+0x6>
     bce:	0f 92       	push	r0
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
     bd4:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	28 2f       	mov	r18, r24
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	3b 83       	std	Y+3, r19	; 0x03
     bde:	2a 83       	std	Y+2, r18	; 0x02
     be0:	8a 81       	ldd	r24, Y+2	; 0x02
     be2:	9b 81       	ldd	r25, Y+3	; 0x03
     be4:	81 30       	cpi	r24, 0x01	; 1
     be6:	91 05       	cpc	r25, r1
     be8:	a1 f0       	breq	.+40     	; 0xc12 <DcMotor_Rotate+0x4a>
     bea:	2a 81       	ldd	r18, Y+2	; 0x02
     bec:	3b 81       	ldd	r19, Y+3	; 0x03
     bee:	22 30       	cpi	r18, 0x02	; 2
     bf0:	31 05       	cpc	r19, r1
     bf2:	d1 f0       	breq	.+52     	; 0xc28 <DcMotor_Rotate+0x60>
     bf4:	8a 81       	ldd	r24, Y+2	; 0x02
     bf6:	9b 81       	ldd	r25, Y+3	; 0x03
     bf8:	00 97       	sbiw	r24, 0x00	; 0
     bfa:	01 f5       	brne	.+64     	; 0xc3c <DcMotor_Rotate+0x74>
	{
	case Stop:
		// Stop the motor
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN1,LOGIC_LOW);
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	63 e0       	ldi	r22, 0x03	; 3
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN2,LOGIC_LOW);
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	64 e0       	ldi	r22, 0x04	; 4
     c0a:	40 e0       	ldi	r20, 0x00	; 0
     c0c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <GPIO_writePin>
     c10:	15 c0       	rjmp	.+42     	; 0xc3c <DcMotor_Rotate+0x74>
		break;
	case CW:
		// Rotate the motor --> clock wise
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN1,LOGIC_LOW);
     c12:	82 e0       	ldi	r24, 0x02	; 2
     c14:	63 e0       	ldi	r22, 0x03	; 3
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN2,LOGIC_HIGH);
     c1c:	82 e0       	ldi	r24, 0x02	; 2
     c1e:	64 e0       	ldi	r22, 0x04	; 4
     c20:	41 e0       	ldi	r20, 0x01	; 1
     c22:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <GPIO_writePin>
     c26:	0a c0       	rjmp	.+20     	; 0xc3c <DcMotor_Rotate+0x74>
		break;
	case CCW:
		// Rotate the motor --> anti-clock wise
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN1,LOGIC_HIGH);
     c28:	82 e0       	ldi	r24, 0x02	; 2
     c2a:	63 e0       	ldi	r22, 0x03	; 3
     c2c:	41 e0       	ldi	r20, 0x01	; 1
     c2e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN2,LOGIC_LOW);
     c32:	82 e0       	ldi	r24, 0x02	; 2
     c34:	64 e0       	ldi	r22, 0x04	; 4
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <GPIO_writePin>



	}

}
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	cf 91       	pop	r28
     c44:	df 91       	pop	r29
     c46:	08 95       	ret

00000c48 <main>:
#include "Buzzer.h"



int main(void)
{
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
     c50:	65 97       	sbiw	r28, 0x15	; 21
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
     c56:	de bf       	out	0x3e, r29	; 62
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1 << 7); /*enable global interrupt*/
     c5c:	af e5       	ldi	r26, 0x5F	; 95
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	ef e5       	ldi	r30, 0x5F	; 95
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	80 68       	ori	r24, 0x80	; 128
     c68:	8c 93       	st	X, r24

	/* Timer freq = 8MHz/1024, one clock-cycle time = 128 uSecond
		 so to force the timer to produce an interrupt every 1 second:
		 we set the compare value to be 1/(128u) = 7813 */

	TIMER_Config timer_config = {Timer1,CTC,F_CPU_1024,7813,0};
     c6a:	ce 01       	movw	r24, r28
     c6c:	02 96       	adiw	r24, 0x02	; 2
     c6e:	9d 87       	std	Y+13, r25	; 0x0d
     c70:	8c 87       	std	Y+12, r24	; 0x0c
     c72:	eb e6       	ldi	r30, 0x6B	; 107
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	ff 87       	std	Y+15, r31	; 0x0f
     c78:	ee 87       	std	Y+14, r30	; 0x0e
     c7a:	f7 e0       	ldi	r31, 0x07	; 7
     c7c:	f8 8b       	std	Y+16, r31	; 0x10
     c7e:	ee 85       	ldd	r30, Y+14	; 0x0e
     c80:	ff 85       	ldd	r31, Y+15	; 0x0f
     c82:	00 80       	ld	r0, Z
     c84:	8e 85       	ldd	r24, Y+14	; 0x0e
     c86:	9f 85       	ldd	r25, Y+15	; 0x0f
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	9f 87       	std	Y+15, r25	; 0x0f
     c8c:	8e 87       	std	Y+14, r24	; 0x0e
     c8e:	ec 85       	ldd	r30, Y+12	; 0x0c
     c90:	fd 85       	ldd	r31, Y+13	; 0x0d
     c92:	00 82       	st	Z, r0
     c94:	8c 85       	ldd	r24, Y+12	; 0x0c
     c96:	9d 85       	ldd	r25, Y+13	; 0x0d
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	9d 87       	std	Y+13, r25	; 0x0d
     c9c:	8c 87       	std	Y+12, r24	; 0x0c
     c9e:	98 89       	ldd	r25, Y+16	; 0x10
     ca0:	91 50       	subi	r25, 0x01	; 1
     ca2:	98 8b       	std	Y+16, r25	; 0x10
     ca4:	e8 89       	ldd	r30, Y+16	; 0x10
     ca6:	ee 23       	and	r30, r30
     ca8:	51 f7       	brne	.-44     	; 0xc7e <main+0x36>
	Timer_init(&timer_config);
     caa:	ce 01       	movw	r24, r28
     cac:	02 96       	adiw	r24, 0x02	; 2
     cae:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <Timer_init>
	Timer1_setCallBack(timerCallBack);
     cb2:	85 e6       	ldi	r24, 0x65	; 101
     cb4:	97 e0       	ldi	r25, 0x07	; 7
     cb6:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <Timer1_setCallBack>

	Uart_Config Uart = {_8_BIT,DISABLED,_1_BIT};
     cba:	ce 01       	movw	r24, r28
     cbc:	09 96       	adiw	r24, 0x09	; 9
     cbe:	9a 8b       	std	Y+18, r25	; 0x12
     cc0:	89 8b       	std	Y+17, r24	; 0x11
     cc2:	e8 e6       	ldi	r30, 0x68	; 104
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	fc 8b       	std	Y+20, r31	; 0x14
     cc8:	eb 8b       	std	Y+19, r30	; 0x13
     cca:	f3 e0       	ldi	r31, 0x03	; 3
     ccc:	fd 8b       	std	Y+21, r31	; 0x15
     cce:	eb 89       	ldd	r30, Y+19	; 0x13
     cd0:	fc 89       	ldd	r31, Y+20	; 0x14
     cd2:	00 80       	ld	r0, Z
     cd4:	8b 89       	ldd	r24, Y+19	; 0x13
     cd6:	9c 89       	ldd	r25, Y+20	; 0x14
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	9c 8b       	std	Y+20, r25	; 0x14
     cdc:	8b 8b       	std	Y+19, r24	; 0x13
     cde:	e9 89       	ldd	r30, Y+17	; 0x11
     ce0:	fa 89       	ldd	r31, Y+18	; 0x12
     ce2:	00 82       	st	Z, r0
     ce4:	89 89       	ldd	r24, Y+17	; 0x11
     ce6:	9a 89       	ldd	r25, Y+18	; 0x12
     ce8:	01 96       	adiw	r24, 0x01	; 1
     cea:	9a 8b       	std	Y+18, r25	; 0x12
     cec:	89 8b       	std	Y+17, r24	; 0x11
     cee:	9d 89       	ldd	r25, Y+21	; 0x15
     cf0:	91 50       	subi	r25, 0x01	; 1
     cf2:	9d 8b       	std	Y+21, r25	; 0x15
     cf4:	ed 89       	ldd	r30, Y+21	; 0x15
     cf6:	ee 23       	and	r30, r30
     cf8:	51 f7       	brne	.-44     	; 0xcce <main+0x86>

	UART_init(9600,&Uart);
     cfa:	9e 01       	movw	r18, r28
     cfc:	27 5f       	subi	r18, 0xF7	; 247
     cfe:	3f 4f       	sbci	r19, 0xFF	; 255
     d00:	60 e8       	ldi	r22, 0x80	; 128
     d02:	75 e2       	ldi	r23, 0x25	; 37
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	a9 01       	movw	r20, r18
     d0a:	0e 94 71 10 	call	0x20e2	; 0x20e2 <UART_init>

	DcMotor_Init();
     d0e:	0e 94 c9 05 	call	0xb92	; 0xb92 <DcMotor_Init>

	BZR_init();
     d12:	0e 94 a3 05 	call	0xb46	; 0xb46 <BZR_init>

	initializePassword();
     d16:	0e 94 75 07 	call	0xeea	; 0xeea <initializePassword>

	uint8 receivedByte = 0;
     d1a:	19 82       	std	Y+1, r1	; 0x01

	while(1)
	{
		if (UART_recieveByte() == READY_TO_SEND)
     d1c:	0e 94 0d 11 	call	0x221a	; 0x221a <UART_recieveByte>
     d20:	85 31       	cpi	r24, 0x15	; 21
     d22:	e1 f7       	brne	.-8      	; 0xd1c <main+0xd4>
		{
			receivePasswordViaUART(g_receivedPassword);
     d24:	8b e7       	ldi	r24, 0x7B	; 123
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 bb 07 	call	0xf76	; 0xf76 <receivePasswordViaUART>
			receivedByte = UART_recieveByte();
     d2c:	0e 94 0d 11 	call	0x221a	; 0x221a <UART_recieveByte>
     d30:	89 83       	std	Y+1, r24	; 0x01

			if ( receivedByte == '+')
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	8b 32       	cpi	r24, 0x2B	; 43
     d36:	69 f5       	brne	.+90     	; 0xd92 <main+0x14a>
			{
				if (compare_passwords(g_storedPassword, g_receivedPassword) == PASSWORD_MATCHED)
     d38:	80 e8       	ldi	r24, 0x80	; 128
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	2b e7       	ldi	r18, 0x7B	; 123
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	b9 01       	movw	r22, r18
     d42:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <compare_passwords>
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	31 f4       	brne	.+12     	; 0xd56 <main+0x10e>
				{
					UART_sendByte(UNLOCKING_DOOR); /* inform HMI ECU to display that door is unlocking */
     d4a:	85 e2       	ldi	r24, 0x25	; 37
     d4c:	0e 94 f6 10 	call	0x21ec	; 0x21ec <UART_sendByte>
					DoorOpeningTask(); /* start opening door process/task */
     d50:	0e 94 31 07 	call	0xe62	; 0xe62 <DoorOpeningTask>
     d54:	e3 cf       	rjmp	.-58     	; 0xd1c <main+0xd4>
				}
				else
				{
					UART_sendByte(WRONG_PASSWORD);
     d56:	80 e3       	ldi	r24, 0x30	; 48
     d58:	0e 94 f6 10 	call	0x21ec	; 0x21ec <UART_sendByte>
					/* count number of wrong attempts, and turn on a buzzer of it exceeds the limit */
					g_wrongPasswordCounter++;
     d5c:	80 91 72 00 	lds	r24, 0x0072
     d60:	8f 5f       	subi	r24, 0xFF	; 255
     d62:	80 93 72 00 	sts	0x0072, r24

					if (g_wrongPasswordCounter == NUMBER_OF_WRONG_PASSWORD_ATTEMPTS)
     d66:	80 91 72 00 	lds	r24, 0x0072
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	b9 f6       	brne	.-82     	; 0xd1c <main+0xd4>
					{
						BZR_ON();
     d6e:	0e 94 b1 05 	call	0xb62	; 0xb62 <BZR_ON>
						g_seconds = 0;
     d72:	10 92 74 00 	sts	0x0074, r1
     d76:	10 92 73 00 	sts	0x0073, r1
						while(g_seconds < ALARM_ON_DELAY); /* turn on alarm for a certain period */
     d7a:	80 91 73 00 	lds	r24, 0x0073
     d7e:	90 91 74 00 	lds	r25, 0x0074
     d82:	8c 33       	cpi	r24, 0x3C	; 60
     d84:	91 05       	cpc	r25, r1
     d86:	c8 f3       	brcs	.-14     	; 0xd7a <main+0x132>
						BZR_OFF();
     d88:	0e 94 bd 05 	call	0xb7a	; 0xb7a <BZR_OFF>
						g_wrongPasswordCounter = 0; /* reset the counter */
     d8c:	10 92 72 00 	sts	0x0072, r1
     d90:	c5 cf       	rjmp	.-118    	; 0xd1c <main+0xd4>
					}
				}


			}
			else if (receivedByte == CHANGE_PASSWORD_OPTION)
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	88 31       	cpi	r24, 0x18	; 24
     d96:	11 f6       	brne	.-124    	; 0xd1c <main+0xd4>
			{
				if (compare_passwords(g_storedPassword, g_receivedPassword) == PASSWORD_MATCHED)
     d98:	80 e8       	ldi	r24, 0x80	; 128
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	2b e7       	ldi	r18, 0x7B	; 123
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	b9 01       	movw	r22, r18
     da2:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <compare_passwords>
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	31 f4       	brne	.+12     	; 0xdb6 <main+0x16e>
				{
					UART_sendByte(CHANGING_PASSWORD); /* inform HMI to process changing password */
     daa:	81 e3       	ldi	r24, 0x31	; 49
     dac:	0e 94 f6 10 	call	0x21ec	; 0x21ec <UART_sendByte>
					initializePassword();
     db0:	0e 94 75 07 	call	0xeea	; 0xeea <initializePassword>
     db4:	b3 cf       	rjmp	.-154    	; 0xd1c <main+0xd4>
				}
				else
				{
					UART_sendByte(WRONG_PASSWORD);
     db6:	80 e3       	ldi	r24, 0x30	; 48
     db8:	0e 94 f6 10 	call	0x21ec	; 0x21ec <UART_sendByte>
					/* count number of wrong attempts, and turn on a buzzer of it exceeds the limit */
					g_wrongPasswordCounter++;
     dbc:	80 91 72 00 	lds	r24, 0x0072
     dc0:	8f 5f       	subi	r24, 0xFF	; 255
     dc2:	80 93 72 00 	sts	0x0072, r24

					if (g_wrongPasswordCounter == NUMBER_OF_WRONG_PASSWORD_ATTEMPTS)
     dc6:	80 91 72 00 	lds	r24, 0x0072
     dca:	83 30       	cpi	r24, 0x03	; 3
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <main+0x188>
     dce:	a6 cf       	rjmp	.-180    	; 0xd1c <main+0xd4>
					{
						BZR_ON();
     dd0:	0e 94 b1 05 	call	0xb62	; 0xb62 <BZR_ON>
						g_seconds = 0;
     dd4:	10 92 74 00 	sts	0x0074, r1
     dd8:	10 92 73 00 	sts	0x0073, r1
						while(g_seconds < ALARM_ON_DELAY); /* turn on alarm for a certain period */
     ddc:	80 91 73 00 	lds	r24, 0x0073
     de0:	90 91 74 00 	lds	r25, 0x0074
     de4:	8c 33       	cpi	r24, 0x3C	; 60
     de6:	91 05       	cpc	r25, r1
     de8:	c8 f3       	brcs	.-14     	; 0xddc <main+0x194>
						BZR_OFF();
     dea:	0e 94 bd 05 	call	0xb7a	; 0xb7a <BZR_OFF>
						g_wrongPasswordCounter = 0; /* reset the counter */
     dee:	10 92 72 00 	sts	0x0072, r1
     df2:	94 cf       	rjmp	.-216    	; 0xd1c <main+0xd4>

00000df4 <compare_passwords>:

/********************************************************/
/* Functions Definations */
/********************************************************/
uint8 compare_passwords(uint8 a_password1[PASSWORD_LENGTH],uint8 a_password2[PASSWORD_LENGTH])
{
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	00 d0       	rcall	.+0      	; 0xdfa <compare_passwords+0x6>
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <compare_passwords+0x8>
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <compare_passwords+0xa>
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	9b 83       	std	Y+3, r25	; 0x03
     e04:	8a 83       	std	Y+2, r24	; 0x02
     e06:	7d 83       	std	Y+5, r23	; 0x05
     e08:	6c 83       	std	Y+4, r22	; 0x04
	updateStoredPassword();
     e0a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <updateStoredPassword>
	uint8 i;
	for(i = 0; i < PASSWORD_LENGTH; i++)
     e0e:	19 82       	std	Y+1, r1	; 0x01
     e10:	19 c0       	rjmp	.+50     	; 0xe44 <compare_passwords+0x50>
	{
		if (a_password1[i] != a_password2[i])
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	9b 81       	ldd	r25, Y+3	; 0x03
     e1c:	fc 01       	movw	r30, r24
     e1e:	e2 0f       	add	r30, r18
     e20:	f3 1f       	adc	r31, r19
     e22:	40 81       	ld	r20, Z
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	9d 81       	ldd	r25, Y+5	; 0x05
     e2e:	fc 01       	movw	r30, r24
     e30:	e2 0f       	add	r30, r18
     e32:	f3 1f       	adc	r31, r19
     e34:	80 81       	ld	r24, Z
     e36:	48 17       	cp	r20, r24
     e38:	11 f0       	breq	.+4      	; 0xe3e <compare_passwords+0x4a>
		{
			return PASSWORD_MISMATCHED;
     e3a:	1e 82       	std	Y+6, r1	; 0x06
     e3c:	08 c0       	rjmp	.+16     	; 0xe4e <compare_passwords+0x5a>
/********************************************************/
uint8 compare_passwords(uint8 a_password1[PASSWORD_LENGTH],uint8 a_password2[PASSWORD_LENGTH])
{
	updateStoredPassword();
	uint8 i;
	for(i = 0; i < PASSWORD_LENGTH; i++)
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	8f 5f       	subi	r24, 0xFF	; 255
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	85 30       	cpi	r24, 0x05	; 5
     e48:	20 f3       	brcs	.-56     	; 0xe12 <compare_passwords+0x1e>
		if (a_password1[i] != a_password2[i])
		{
			return PASSWORD_MISMATCHED;
		}
	}
	return PASSWORD_MATCHED;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	8e 83       	std	Y+6, r24	; 0x06
     e4e:	8e 81       	ldd	r24, Y+6	; 0x06
}
     e50:	26 96       	adiw	r28, 0x06	; 6
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <DoorOpeningTask>:

void DoorOpeningTask(void)
{
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
	/* run the DC motor clockwise for 15 seconds */
	g_seconds = 0;
     e6a:	10 92 74 00 	sts	0x0074, r1
     e6e:	10 92 73 00 	sts	0x0073, r1
	DcMotor_Rotate(CW);
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <DcMotor_Rotate>
	while (g_seconds < DOOR_UNLOCKING_PERIOD);
     e78:	80 91 73 00 	lds	r24, 0x0073
     e7c:	90 91 74 00 	lds	r25, 0x0074
     e80:	8f 30       	cpi	r24, 0x0F	; 15
     e82:	91 05       	cpc	r25, r1
     e84:	c8 f3       	brcs	.-14     	; 0xe78 <DoorOpeningTask+0x16>

	/* let the door be open for 3 seconds */
	g_seconds = 0;
     e86:	10 92 74 00 	sts	0x0074, r1
     e8a:	10 92 73 00 	sts	0x0073, r1
	DcMotor_Rotate(Stop);
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <DcMotor_Rotate>
	while (g_seconds < DOOR_LEFT_OPEN_PERIOD);
     e94:	80 91 73 00 	lds	r24, 0x0073
     e98:	90 91 74 00 	lds	r25, 0x0074
     e9c:	83 30       	cpi	r24, 0x03	; 3
     e9e:	91 05       	cpc	r25, r1
     ea0:	c8 f3       	brcs	.-14     	; 0xe94 <DoorOpeningTask+0x32>

	/* hold the system for 15 seconds & display to user that door is locking */
	g_seconds = 0;
     ea2:	10 92 74 00 	sts	0x0074, r1
     ea6:	10 92 73 00 	sts	0x0073, r1
	DcMotor_Rotate(CCW);
     eaa:	82 e0       	ldi	r24, 0x02	; 2
     eac:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <DcMotor_Rotate>
	while (g_seconds < DOOR_UNLOCKING_PERIOD);
     eb0:	80 91 73 00 	lds	r24, 0x0073
     eb4:	90 91 74 00 	lds	r25, 0x0074
     eb8:	8f 30       	cpi	r24, 0x0F	; 15
     eba:	91 05       	cpc	r25, r1
     ebc:	c8 f3       	brcs	.-14     	; 0xeb0 <DoorOpeningTask+0x4e>

	DcMotor_Rotate(Stop);
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <DcMotor_Rotate>
}
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <timerCallBack>:

void timerCallBack(void)
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
	g_seconds++;
     ed2:	80 91 73 00 	lds	r24, 0x0073
     ed6:	90 91 74 00 	lds	r25, 0x0074
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	90 93 74 00 	sts	0x0074, r25
     ee0:	80 93 73 00 	sts	0x0073, r24
}
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	08 95       	ret

00000eea <initializePassword>:

void initializePassword(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <initializePassword+0x6>
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <initializePassword+0x8>
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <initializePassword+0xa>
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
	/* do not return from this function till Control ECU sends a PASSWORD_MATCH signal */
	uint8 confirmationPassword[PASSWORD_LENGTH];
	uint8 check = 0;
     ef8:	19 82       	std	Y+1, r1	; 0x01
     efa:	31 c0       	rjmp	.+98     	; 0xf5e <initializePassword+0x74>
	while(!check)
	{
		while (UART_recieveByte() != READY_TO_SEND); /* wait till HMI gets ready */
     efc:	0e 94 0d 11 	call	0x221a	; 0x221a <UART_recieveByte>
     f00:	85 31       	cpi	r24, 0x15	; 21
     f02:	e1 f7       	brne	.-8      	; 0xefc <initializePassword+0x12>
		UART_sendByte(READY_TO_RECEIVE); /* inform HMI that Control ECU ready to receive the password */
     f04:	86 e1       	ldi	r24, 0x16	; 22
     f06:	0e 94 f6 10 	call	0x21ec	; 0x21ec <UART_sendByte>
		receivePasswordViaUART(g_receivedPassword);
     f0a:	8b e7       	ldi	r24, 0x7B	; 123
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 bb 07 	call	0xf76	; 0xf76 <receivePasswordViaUART>

		while (UART_recieveByte() != READY_TO_SEND);
     f12:	0e 94 0d 11 	call	0x221a	; 0x221a <UART_recieveByte>
     f16:	85 31       	cpi	r24, 0x15	; 21
     f18:	e1 f7       	brne	.-8      	; 0xf12 <initializePassword+0x28>
		UART_sendByte(READY_TO_RECEIVE); /* inform HMI to send the confirmation password */
     f1a:	86 e1       	ldi	r24, 0x16	; 22
     f1c:	0e 94 f6 10 	call	0x21ec	; 0x21ec <UART_sendByte>
		receivePasswordViaUART(confirmationPassword);
     f20:	ce 01       	movw	r24, r28
     f22:	02 96       	adiw	r24, 0x02	; 2
     f24:	0e 94 bb 07 	call	0xf76	; 0xf76 <receivePasswordViaUART>

		if (compare_passwords(g_receivedPassword, confirmationPassword) == PASSWORD_MATCHED)
     f28:	8b e7       	ldi	r24, 0x7B	; 123
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	9e 01       	movw	r18, r28
     f2e:	2e 5f       	subi	r18, 0xFE	; 254
     f30:	3f 4f       	sbci	r19, 0xFF	; 255
     f32:	b9 01       	movw	r22, r18
     f34:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <compare_passwords>
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	59 f4       	brne	.+22     	; 0xf52 <initializePassword+0x68>
		{
			UART_sendByte(READY_TO_SEND);
     f3c:	85 e1       	ldi	r24, 0x15	; 21
     f3e:	0e 94 f6 10 	call	0x21ec	; 0x21ec <UART_sendByte>
			UART_sendByte(PASSWORD_MATCHED);
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	0e 94 f6 10 	call	0x21ec	; 0x21ec <UART_sendByte>
			storePassword();
     f48:	0e 94 79 08 	call	0x10f2	; 0x10f2 <storePassword>
			check = 1;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	06 c0       	rjmp	.+12     	; 0xf5e <initializePassword+0x74>
		}
		else
		{
			UART_sendByte(READY_TO_SEND);
     f52:	85 e1       	ldi	r24, 0x15	; 21
     f54:	0e 94 f6 10 	call	0x21ec	; 0x21ec <UART_sendByte>
			UART_sendByte(PASSWORD_MISMATCHED);
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	0e 94 f6 10 	call	0x21ec	; 0x21ec <UART_sendByte>
void initializePassword(void)
{
	/* do not return from this function till Control ECU sends a PASSWORD_MATCH signal */
	uint8 confirmationPassword[PASSWORD_LENGTH];
	uint8 check = 0;
	while(!check)
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	88 23       	and	r24, r24
     f62:	61 f2       	breq	.-104    	; 0xefc <initializePassword+0x12>
		{
			UART_sendByte(READY_TO_SEND);
			UART_sendByte(PASSWORD_MISMATCHED);
		}
	}
}
     f64:	26 96       	adiw	r28, 0x06	; 6
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <receivePasswordViaUART>:

void receivePasswordViaUART(uint8 * passwordArray)
{
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	61 97       	sbiw	r28, 0x11	; 17
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	99 8b       	std	Y+17, r25	; 0x11
     f90:	88 8b       	std	Y+16, r24	; 0x10
	uint8 count;
	for (count = 0; count < PASSWORD_LENGTH; count++)
     f92:	1f 86       	std	Y+15, r1	; 0x0f
     f94:	81 c0       	rjmp	.+258    	; 0x1098 <receivePasswordViaUART+0x122>
	{
		*(passwordArray+count) = UART_recieveByte();
     f96:	8f 85       	ldd	r24, Y+15	; 0x0f
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	88 89       	ldd	r24, Y+16	; 0x10
     f9e:	99 89       	ldd	r25, Y+17	; 0x11
     fa0:	8c 01       	movw	r16, r24
     fa2:	02 0f       	add	r16, r18
     fa4:	13 1f       	adc	r17, r19
     fa6:	0e 94 0d 11 	call	0x221a	; 0x221a <UART_recieveByte>
     faa:	f8 01       	movw	r30, r16
     fac:	80 83       	st	Z, r24
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	a8 ec       	ldi	r26, 0xC8	; 200
     fb4:	b2 e4       	ldi	r27, 0x42	; 66
     fb6:	8b 87       	std	Y+11, r24	; 0x0b
     fb8:	9c 87       	std	Y+12, r25	; 0x0c
     fba:	ad 87       	std	Y+13, r26	; 0x0d
     fbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
     fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
     fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	4a e7       	ldi	r20, 0x7A	; 122
     fcc:	53 e4       	ldi	r21, 0x43	; 67
     fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	8f 83       	std	Y+7, r24	; 0x07
     fd8:	98 87       	std	Y+8, r25	; 0x08
     fda:	a9 87       	std	Y+9, r26	; 0x09
     fdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fde:	6f 81       	ldd	r22, Y+7	; 0x07
     fe0:	78 85       	ldd	r23, Y+8	; 0x08
     fe2:	89 85       	ldd	r24, Y+9	; 0x09
     fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	40 e8       	ldi	r20, 0x80	; 128
     fec:	5f e3       	ldi	r21, 0x3F	; 63
     fee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ff2:	88 23       	and	r24, r24
     ff4:	2c f4       	brge	.+10     	; 0x1000 <receivePasswordViaUART+0x8a>
		__ticks = 1;
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	9e 83       	std	Y+6, r25	; 0x06
     ffc:	8d 83       	std	Y+5, r24	; 0x05
     ffe:	3f c0       	rjmp	.+126    	; 0x107e <receivePasswordViaUART+0x108>
	else if (__tmp > 65535)
    1000:	6f 81       	ldd	r22, Y+7	; 0x07
    1002:	78 85       	ldd	r23, Y+8	; 0x08
    1004:	89 85       	ldd	r24, Y+9	; 0x09
    1006:	9a 85       	ldd	r25, Y+10	; 0x0a
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	3f ef       	ldi	r19, 0xFF	; 255
    100c:	4f e7       	ldi	r20, 0x7F	; 127
    100e:	57 e4       	ldi	r21, 0x47	; 71
    1010:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1014:	18 16       	cp	r1, r24
    1016:	4c f5       	brge	.+82     	; 0x106a <receivePasswordViaUART+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1018:	6b 85       	ldd	r22, Y+11	; 0x0b
    101a:	7c 85       	ldd	r23, Y+12	; 0x0c
    101c:	8d 85       	ldd	r24, Y+13	; 0x0d
    101e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e2       	ldi	r20, 0x20	; 32
    1026:	51 e4       	ldi	r21, 0x41	; 65
    1028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	bc 01       	movw	r22, r24
    1032:	cd 01       	movw	r24, r26
    1034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	9e 83       	std	Y+6, r25	; 0x06
    103e:	8d 83       	std	Y+5, r24	; 0x05
    1040:	0f c0       	rjmp	.+30     	; 0x1060 <receivePasswordViaUART+0xea>
    1042:	89 e1       	ldi	r24, 0x19	; 25
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	9c 83       	std	Y+4, r25	; 0x04
    1048:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	9c 81       	ldd	r25, Y+4	; 0x04
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	f1 f7       	brne	.-4      	; 0x104e <receivePasswordViaUART+0xd8>
    1052:	9c 83       	std	Y+4, r25	; 0x04
    1054:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	9e 81       	ldd	r25, Y+6	; 0x06
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	9e 83       	std	Y+6, r25	; 0x06
    105e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1060:	8d 81       	ldd	r24, Y+5	; 0x05
    1062:	9e 81       	ldd	r25, Y+6	; 0x06
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	69 f7       	brne	.-38     	; 0x1042 <receivePasswordViaUART+0xcc>
    1068:	14 c0       	rjmp	.+40     	; 0x1092 <receivePasswordViaUART+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    106a:	6f 81       	ldd	r22, Y+7	; 0x07
    106c:	78 85       	ldd	r23, Y+8	; 0x08
    106e:	89 85       	ldd	r24, Y+9	; 0x09
    1070:	9a 85       	ldd	r25, Y+10	; 0x0a
    1072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	9e 83       	std	Y+6, r25	; 0x06
    107c:	8d 83       	std	Y+5, r24	; 0x05
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	9a 83       	std	Y+2, r25	; 0x02
    1084:	89 83       	std	Y+1, r24	; 0x01
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	9a 81       	ldd	r25, Y+2	; 0x02
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	f1 f7       	brne	.-4      	; 0x108a <receivePasswordViaUART+0x114>
    108e:	9a 83       	std	Y+2, r25	; 0x02
    1090:	89 83       	std	Y+1, r24	; 0x01
}

void receivePasswordViaUART(uint8 * passwordArray)
{
	uint8 count;
	for (count = 0; count < PASSWORD_LENGTH; count++)
    1092:	8f 85       	ldd	r24, Y+15	; 0x0f
    1094:	8f 5f       	subi	r24, 0xFF	; 255
    1096:	8f 87       	std	Y+15, r24	; 0x0f
    1098:	8f 85       	ldd	r24, Y+15	; 0x0f
    109a:	85 30       	cpi	r24, 0x05	; 5
    109c:	08 f4       	brcc	.+2      	; 0x10a0 <receivePasswordViaUART+0x12a>
    109e:	7b cf       	rjmp	.-266    	; 0xf96 <receivePasswordViaUART+0x20>
	{
		*(passwordArray+count) = UART_recieveByte();
		_delay_ms(100);
	}
}
    10a0:	61 96       	adiw	r28, 0x11	; 17
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	08 95       	ret

000010b6 <updateStoredPassword>:

void updateStoredPassword(void)
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	0f 92       	push	r0
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++)
    10c0:	19 82       	std	Y+1, r1	; 0x01
    10c2:	10 c0       	rjmp	.+32     	; 0x10e4 <updateStoredPassword+0x2e>
	{
		EEPROM_readByte(EEPROM_STORE_ADDREESS+i, g_storedPassword+i);
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	48 2f       	mov	r20, r24
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	88 2f       	mov	r24, r24
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	9c 01       	movw	r18, r24
    10d2:	20 58       	subi	r18, 0x80	; 128
    10d4:	3f 4f       	sbci	r19, 0xFF	; 255
    10d6:	ca 01       	movw	r24, r20
    10d8:	b9 01       	movw	r22, r18
    10da:	0e 94 42 0c 	call	0x1884	; 0x1884 <EEPROM_readByte>
}

void updateStoredPassword(void)
{
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++)
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	8f 5f       	subi	r24, 0xFF	; 255
    10e2:	89 83       	std	Y+1, r24	; 0x01
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	85 30       	cpi	r24, 0x05	; 5
    10e8:	68 f3       	brcs	.-38     	; 0x10c4 <updateStoredPassword+0xe>
	{
		EEPROM_readByte(EEPROM_STORE_ADDREESS+i, g_storedPassword+i);
	}
}
    10ea:	0f 90       	pop	r0
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <storePassword>:

void storePassword(void)
{
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	2f 97       	sbiw	r28, 0x0f	; 15
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++)
    1106:	1f 86       	std	Y+15, r1	; 0x0f
    1108:	83 c0       	rjmp	.+262    	; 0x1210 <storePassword+0x11e>
	{
		EEPROM_writeByte(EEPROM_STORE_ADDREESS + i, g_receivedPassword[i]);
    110a:	8f 85       	ldd	r24, Y+15	; 0x0f
    110c:	48 2f       	mov	r20, r24
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	8f 85       	ldd	r24, Y+15	; 0x0f
    1112:	88 2f       	mov	r24, r24
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	fc 01       	movw	r30, r24
    1118:	e5 58       	subi	r30, 0x85	; 133
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	20 81       	ld	r18, Z
    111e:	ca 01       	movw	r24, r20
    1120:	62 2f       	mov	r22, r18
    1122:	0e 94 01 0c 	call	0x1802	; 0x1802 <EEPROM_writeByte>
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	a8 ec       	ldi	r26, 0xC8	; 200
    112c:	b2 e4       	ldi	r27, 0x42	; 66
    112e:	8b 87       	std	Y+11, r24	; 0x0b
    1130:	9c 87       	std	Y+12, r25	; 0x0c
    1132:	ad 87       	std	Y+13, r26	; 0x0d
    1134:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1136:	6b 85       	ldd	r22, Y+11	; 0x0b
    1138:	7c 85       	ldd	r23, Y+12	; 0x0c
    113a:	8d 85       	ldd	r24, Y+13	; 0x0d
    113c:	9e 85       	ldd	r25, Y+14	; 0x0e
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	4a e7       	ldi	r20, 0x7A	; 122
    1144:	53 e4       	ldi	r21, 0x43	; 67
    1146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	8f 83       	std	Y+7, r24	; 0x07
    1150:	98 87       	std	Y+8, r25	; 0x08
    1152:	a9 87       	std	Y+9, r26	; 0x09
    1154:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1156:	6f 81       	ldd	r22, Y+7	; 0x07
    1158:	78 85       	ldd	r23, Y+8	; 0x08
    115a:	89 85       	ldd	r24, Y+9	; 0x09
    115c:	9a 85       	ldd	r25, Y+10	; 0x0a
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	40 e8       	ldi	r20, 0x80	; 128
    1164:	5f e3       	ldi	r21, 0x3F	; 63
    1166:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    116a:	88 23       	and	r24, r24
    116c:	2c f4       	brge	.+10     	; 0x1178 <storePassword+0x86>
		__ticks = 1;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	9e 83       	std	Y+6, r25	; 0x06
    1174:	8d 83       	std	Y+5, r24	; 0x05
    1176:	3f c0       	rjmp	.+126    	; 0x11f6 <storePassword+0x104>
	else if (__tmp > 65535)
    1178:	6f 81       	ldd	r22, Y+7	; 0x07
    117a:	78 85       	ldd	r23, Y+8	; 0x08
    117c:	89 85       	ldd	r24, Y+9	; 0x09
    117e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	3f ef       	ldi	r19, 0xFF	; 255
    1184:	4f e7       	ldi	r20, 0x7F	; 127
    1186:	57 e4       	ldi	r21, 0x47	; 71
    1188:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    118c:	18 16       	cp	r1, r24
    118e:	4c f5       	brge	.+82     	; 0x11e2 <storePassword+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1190:	6b 85       	ldd	r22, Y+11	; 0x0b
    1192:	7c 85       	ldd	r23, Y+12	; 0x0c
    1194:	8d 85       	ldd	r24, Y+13	; 0x0d
    1196:	9e 85       	ldd	r25, Y+14	; 0x0e
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	40 e2       	ldi	r20, 0x20	; 32
    119e:	51 e4       	ldi	r21, 0x41	; 65
    11a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	bc 01       	movw	r22, r24
    11aa:	cd 01       	movw	r24, r26
    11ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	9e 83       	std	Y+6, r25	; 0x06
    11b6:	8d 83       	std	Y+5, r24	; 0x05
    11b8:	0f c0       	rjmp	.+30     	; 0x11d8 <storePassword+0xe6>
    11ba:	89 e1       	ldi	r24, 0x19	; 25
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	9c 83       	std	Y+4, r25	; 0x04
    11c0:	8b 83       	std	Y+3, r24	; 0x03
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	9c 81       	ldd	r25, Y+4	; 0x04
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <storePassword+0xd4>
    11ca:	9c 83       	std	Y+4, r25	; 0x04
    11cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ce:	8d 81       	ldd	r24, Y+5	; 0x05
    11d0:	9e 81       	ldd	r25, Y+6	; 0x06
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	9e 83       	std	Y+6, r25	; 0x06
    11d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d8:	8d 81       	ldd	r24, Y+5	; 0x05
    11da:	9e 81       	ldd	r25, Y+6	; 0x06
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	69 f7       	brne	.-38     	; 0x11ba <storePassword+0xc8>
    11e0:	14 c0       	rjmp	.+40     	; 0x120a <storePassword+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e2:	6f 81       	ldd	r22, Y+7	; 0x07
    11e4:	78 85       	ldd	r23, Y+8	; 0x08
    11e6:	89 85       	ldd	r24, Y+9	; 0x09
    11e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	9e 83       	std	Y+6, r25	; 0x06
    11f4:	8d 83       	std	Y+5, r24	; 0x05
    11f6:	8d 81       	ldd	r24, Y+5	; 0x05
    11f8:	9e 81       	ldd	r25, Y+6	; 0x06
    11fa:	9a 83       	std	Y+2, r25	; 0x02
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	9a 81       	ldd	r25, Y+2	; 0x02
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	f1 f7       	brne	.-4      	; 0x1202 <storePassword+0x110>
    1206:	9a 83       	std	Y+2, r25	; 0x02
    1208:	89 83       	std	Y+1, r24	; 0x01
}

void storePassword(void)
{
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++)
    120a:	8f 85       	ldd	r24, Y+15	; 0x0f
    120c:	8f 5f       	subi	r24, 0xFF	; 255
    120e:	8f 87       	std	Y+15, r24	; 0x0f
    1210:	8f 85       	ldd	r24, Y+15	; 0x0f
    1212:	85 30       	cpi	r24, 0x05	; 5
    1214:	08 f4       	brcc	.+2      	; 0x1218 <storePassword+0x126>
    1216:	79 cf       	rjmp	.-270    	; 0x110a <storePassword+0x18>





}
    1218:	2f 96       	adiw	r28, 0x0f	; 15
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	de bf       	out	0x3e, r29	; 62
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	cd bf       	out	0x3d, r28	; 61
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <__vector_9>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    122a:	1f 92       	push	r1
    122c:	0f 92       	push	r0
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	0f 92       	push	r0
    1232:	11 24       	eor	r1, r1
    1234:	2f 93       	push	r18
    1236:	3f 93       	push	r19
    1238:	4f 93       	push	r20
    123a:	5f 93       	push	r21
    123c:	6f 93       	push	r22
    123e:	7f 93       	push	r23
    1240:	8f 93       	push	r24
    1242:	9f 93       	push	r25
    1244:	af 93       	push	r26
    1246:	bf 93       	push	r27
    1248:	ef 93       	push	r30
    124a:	ff 93       	push	r31
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR)
    1254:	80 91 75 00 	lds	r24, 0x0075
    1258:	90 91 76 00 	lds	r25, 0x0076
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	29 f0       	breq	.+10     	; 0x126a <__vector_9+0x40>
	{
		(*g_Timer0CallBackPtr)();
    1260:	e0 91 75 00 	lds	r30, 0x0075
    1264:	f0 91 76 00 	lds	r31, 0x0076
    1268:	09 95       	icall
	}
}
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	ff 91       	pop	r31
    1270:	ef 91       	pop	r30
    1272:	bf 91       	pop	r27
    1274:	af 91       	pop	r26
    1276:	9f 91       	pop	r25
    1278:	8f 91       	pop	r24
    127a:	7f 91       	pop	r23
    127c:	6f 91       	pop	r22
    127e:	5f 91       	pop	r21
    1280:	4f 91       	pop	r20
    1282:	3f 91       	pop	r19
    1284:	2f 91       	pop	r18
    1286:	0f 90       	pop	r0
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	0f 90       	pop	r0
    128c:	1f 90       	pop	r1
    128e:	18 95       	reti

00001290 <__vector_19>:

/* Timer0 compare */
ISR(TIMER0_COMP_vect)
{
    1290:	1f 92       	push	r1
    1292:	0f 92       	push	r0
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	0f 92       	push	r0
    1298:	11 24       	eor	r1, r1
    129a:	2f 93       	push	r18
    129c:	3f 93       	push	r19
    129e:	4f 93       	push	r20
    12a0:	5f 93       	push	r21
    12a2:	6f 93       	push	r22
    12a4:	7f 93       	push	r23
    12a6:	8f 93       	push	r24
    12a8:	9f 93       	push	r25
    12aa:	af 93       	push	r26
    12ac:	bf 93       	push	r27
    12ae:	ef 93       	push	r30
    12b0:	ff 93       	push	r31
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR)
    12ba:	80 91 75 00 	lds	r24, 0x0075
    12be:	90 91 76 00 	lds	r25, 0x0076
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	29 f0       	breq	.+10     	; 0x12d0 <__vector_19+0x40>
	{
		(*g_Timer0CallBackPtr)();
    12c6:	e0 91 75 00 	lds	r30, 0x0075
    12ca:	f0 91 76 00 	lds	r31, 0x0076
    12ce:	09 95       	icall
	}
}
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	ff 91       	pop	r31
    12d6:	ef 91       	pop	r30
    12d8:	bf 91       	pop	r27
    12da:	af 91       	pop	r26
    12dc:	9f 91       	pop	r25
    12de:	8f 91       	pop	r24
    12e0:	7f 91       	pop	r23
    12e2:	6f 91       	pop	r22
    12e4:	5f 91       	pop	r21
    12e6:	4f 91       	pop	r20
    12e8:	3f 91       	pop	r19
    12ea:	2f 91       	pop	r18
    12ec:	0f 90       	pop	r0
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	0f 90       	pop	r0
    12f2:	1f 90       	pop	r1
    12f4:	18 95       	reti

000012f6 <__vector_8>:

/* Timer1 overflow*/
ISR(TIMER1_OVF_vect)
{
    12f6:	1f 92       	push	r1
    12f8:	0f 92       	push	r0
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	0f 92       	push	r0
    12fe:	11 24       	eor	r1, r1
    1300:	2f 93       	push	r18
    1302:	3f 93       	push	r19
    1304:	4f 93       	push	r20
    1306:	5f 93       	push	r21
    1308:	6f 93       	push	r22
    130a:	7f 93       	push	r23
    130c:	8f 93       	push	r24
    130e:	9f 93       	push	r25
    1310:	af 93       	push	r26
    1312:	bf 93       	push	r27
    1314:	ef 93       	push	r30
    1316:	ff 93       	push	r31
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR)
    1320:	80 91 77 00 	lds	r24, 0x0077
    1324:	90 91 78 00 	lds	r25, 0x0078
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	29 f0       	breq	.+10     	; 0x1336 <__vector_8+0x40>
	{
		(*g_Timer1CallBackPtr)();
    132c:	e0 91 77 00 	lds	r30, 0x0077
    1330:	f0 91 78 00 	lds	r31, 0x0078
    1334:	09 95       	icall
	}
}
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	ff 91       	pop	r31
    133c:	ef 91       	pop	r30
    133e:	bf 91       	pop	r27
    1340:	af 91       	pop	r26
    1342:	9f 91       	pop	r25
    1344:	8f 91       	pop	r24
    1346:	7f 91       	pop	r23
    1348:	6f 91       	pop	r22
    134a:	5f 91       	pop	r21
    134c:	4f 91       	pop	r20
    134e:	3f 91       	pop	r19
    1350:	2f 91       	pop	r18
    1352:	0f 90       	pop	r0
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	0f 90       	pop	r0
    1358:	1f 90       	pop	r1
    135a:	18 95       	reti

0000135c <__vector_6>:

/* Timer1 compare */
ISR(TIMER1_COMPA_vect)
{
    135c:	1f 92       	push	r1
    135e:	0f 92       	push	r0
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	0f 92       	push	r0
    1364:	11 24       	eor	r1, r1
    1366:	2f 93       	push	r18
    1368:	3f 93       	push	r19
    136a:	4f 93       	push	r20
    136c:	5f 93       	push	r21
    136e:	6f 93       	push	r22
    1370:	7f 93       	push	r23
    1372:	8f 93       	push	r24
    1374:	9f 93       	push	r25
    1376:	af 93       	push	r26
    1378:	bf 93       	push	r27
    137a:	ef 93       	push	r30
    137c:	ff 93       	push	r31
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR)
    1386:	80 91 77 00 	lds	r24, 0x0077
    138a:	90 91 78 00 	lds	r25, 0x0078
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	29 f0       	breq	.+10     	; 0x139c <__vector_6+0x40>
	{
		(*g_Timer1CallBackPtr)();
    1392:	e0 91 77 00 	lds	r30, 0x0077
    1396:	f0 91 78 00 	lds	r31, 0x0078
    139a:	09 95       	icall
	}
}
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	ff 91       	pop	r31
    13a2:	ef 91       	pop	r30
    13a4:	bf 91       	pop	r27
    13a6:	af 91       	pop	r26
    13a8:	9f 91       	pop	r25
    13aa:	8f 91       	pop	r24
    13ac:	7f 91       	pop	r23
    13ae:	6f 91       	pop	r22
    13b0:	5f 91       	pop	r21
    13b2:	4f 91       	pop	r20
    13b4:	3f 91       	pop	r19
    13b6:	2f 91       	pop	r18
    13b8:	0f 90       	pop	r0
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	0f 90       	pop	r0
    13be:	1f 90       	pop	r1
    13c0:	18 95       	reti

000013c2 <__vector_4>:

/* Timer2 overflow*/
ISR(TIMER2_OVF_vect)
{
    13c2:	1f 92       	push	r1
    13c4:	0f 92       	push	r0
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	0f 92       	push	r0
    13ca:	11 24       	eor	r1, r1
    13cc:	2f 93       	push	r18
    13ce:	3f 93       	push	r19
    13d0:	4f 93       	push	r20
    13d2:	5f 93       	push	r21
    13d4:	6f 93       	push	r22
    13d6:	7f 93       	push	r23
    13d8:	8f 93       	push	r24
    13da:	9f 93       	push	r25
    13dc:	af 93       	push	r26
    13de:	bf 93       	push	r27
    13e0:	ef 93       	push	r30
    13e2:	ff 93       	push	r31
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR)
    13ec:	80 91 79 00 	lds	r24, 0x0079
    13f0:	90 91 7a 00 	lds	r25, 0x007A
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	29 f0       	breq	.+10     	; 0x1402 <__vector_4+0x40>
	{
		(*g_Timer2CallBackPtr)();
    13f8:	e0 91 79 00 	lds	r30, 0x0079
    13fc:	f0 91 7a 00 	lds	r31, 0x007A
    1400:	09 95       	icall
	}
}
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	ff 91       	pop	r31
    1408:	ef 91       	pop	r30
    140a:	bf 91       	pop	r27
    140c:	af 91       	pop	r26
    140e:	9f 91       	pop	r25
    1410:	8f 91       	pop	r24
    1412:	7f 91       	pop	r23
    1414:	6f 91       	pop	r22
    1416:	5f 91       	pop	r21
    1418:	4f 91       	pop	r20
    141a:	3f 91       	pop	r19
    141c:	2f 91       	pop	r18
    141e:	0f 90       	pop	r0
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	0f 90       	pop	r0
    1424:	1f 90       	pop	r1
    1426:	18 95       	reti

00001428 <__vector_3>:

/* Timer2 compare */
ISR(TIMER2_COMP_vect)
{
    1428:	1f 92       	push	r1
    142a:	0f 92       	push	r0
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	0f 92       	push	r0
    1430:	11 24       	eor	r1, r1
    1432:	2f 93       	push	r18
    1434:	3f 93       	push	r19
    1436:	4f 93       	push	r20
    1438:	5f 93       	push	r21
    143a:	6f 93       	push	r22
    143c:	7f 93       	push	r23
    143e:	8f 93       	push	r24
    1440:	9f 93       	push	r25
    1442:	af 93       	push	r26
    1444:	bf 93       	push	r27
    1446:	ef 93       	push	r30
    1448:	ff 93       	push	r31
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR)
    1452:	80 91 79 00 	lds	r24, 0x0079
    1456:	90 91 7a 00 	lds	r25, 0x007A
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	29 f0       	breq	.+10     	; 0x1468 <__vector_3+0x40>
	{
		(*g_Timer2CallBackPtr)();
    145e:	e0 91 79 00 	lds	r30, 0x0079
    1462:	f0 91 7a 00 	lds	r31, 0x007A
    1466:	09 95       	icall
	}
}
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	ff 91       	pop	r31
    146e:	ef 91       	pop	r30
    1470:	bf 91       	pop	r27
    1472:	af 91       	pop	r26
    1474:	9f 91       	pop	r25
    1476:	8f 91       	pop	r24
    1478:	7f 91       	pop	r23
    147a:	6f 91       	pop	r22
    147c:	5f 91       	pop	r21
    147e:	4f 91       	pop	r20
    1480:	3f 91       	pop	r19
    1482:	2f 91       	pop	r18
    1484:	0f 90       	pop	r0
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	0f 90       	pop	r0
    148a:	1f 90       	pop	r1
    148c:	18 95       	reti

0000148e <Timer2_setCallBack>:
void Timer2_setCallBack(void(*a_ptr)(void))
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	00 d0       	rcall	.+0      	; 0x1494 <Timer2_setCallBack+0x6>
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	9a 83       	std	Y+2, r25	; 0x02
    149a:	89 83       	std	Y+1, r24	; 0x01
	g_Timer2CallBackPtr = a_ptr;
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	9a 81       	ldd	r25, Y+2	; 0x02
    14a0:	90 93 7a 00 	sts	0x007A, r25
    14a4:	80 93 79 00 	sts	0x0079, r24
}
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <Timer1_setCallBack+0x6>
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	9a 83       	std	Y+2, r25	; 0x02
    14be:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1CallBackPtr = a_ptr;
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	9a 81       	ldd	r25, Y+2	; 0x02
    14c4:	90 93 78 00 	sts	0x0078, r25
    14c8:	80 93 77 00 	sts	0x0077, r24
}
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <Timer0_setCallBack>:

void Timer0_setCallBack(void(*a_ptr)(void))
{
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	00 d0       	rcall	.+0      	; 0x14dc <Timer0_setCallBack+0x6>
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	9a 83       	std	Y+2, r25	; 0x02
    14e2:	89 83       	std	Y+1, r24	; 0x01
	g_Timer2CallBackPtr = a_ptr;
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	9a 81       	ldd	r25, Y+2	; 0x02
    14e8:	90 93 7a 00 	sts	0x007A, r25
    14ec:	80 93 79 00 	sts	0x0079, r24
}
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <Timer_init>:
void Timer_init(const TIMER_Config *Config_ptr)
{
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <Timer_init+0x6>
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	9a 83       	std	Y+2, r25	; 0x02
    1506:	89 83       	std	Y+1, r24	; 0x01
if (Config_ptr -> Timer_ID == Timer0)
    1508:	e9 81       	ldd	r30, Y+1	; 0x01
    150a:	fa 81       	ldd	r31, Y+2	; 0x02
    150c:	80 81       	ld	r24, Z
    150e:	88 23       	and	r24, r24
    1510:	09 f0       	breq	.+2      	; 0x1514 <Timer_init+0x1a>
    1512:	52 c0       	rjmp	.+164    	; 0x15b8 <Timer_init+0xbe>
{
		/* starting with adjusting common bits for the timer, then mode-specific bits */

		SET_BIT(TCCR0,FOC0); /* for non-PWM */
    1514:	a3 e5       	ldi	r26, 0x53	; 83
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e3 e5       	ldi	r30, 0x53	; 83
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	80 68       	ori	r24, 0x80	; 128
    1520:	8c 93       	st	X, r24
		TCNT0 =Config_ptr -> Initial_Value;
    1522:	a2 e5       	ldi	r26, 0x52	; 82
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e9 81       	ldd	r30, Y+1	; 0x01
    1528:	fa 81       	ldd	r31, Y+2	; 0x02
    152a:	85 81       	ldd	r24, Z+5	; 0x05
    152c:	96 81       	ldd	r25, Z+6	; 0x06
    152e:	8c 93       	st	X, r24
		TCCR0 = 0;
    1530:	e3 e5       	ldi	r30, 0x53	; 83
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	10 82       	st	Z, r1
		TCCR0 |= (Config_ptr -> clk_selection);
    1536:	a3 e5       	ldi	r26, 0x53	; 83
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e3 e5       	ldi	r30, 0x53	; 83
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	90 81       	ld	r25, Z
    1540:	e9 81       	ldd	r30, Y+1	; 0x01
    1542:	fa 81       	ldd	r31, Y+2	; 0x02
    1544:	82 81       	ldd	r24, Z+2	; 0x02
    1546:	89 2b       	or	r24, r25
    1548:	8c 93       	st	X, r24

		if (Config_ptr -> mode == NORMAL)
    154a:	e9 81       	ldd	r30, Y+1	; 0x01
    154c:	fa 81       	ldd	r31, Y+2	; 0x02
    154e:	81 81       	ldd	r24, Z+1	; 0x01
    1550:	88 23       	and	r24, r24
    1552:	79 f4       	brne	.+30     	; 0x1572 <Timer_init+0x78>
		{
			SET_BIT(TIMSK,TOIE0); /* enable interrupts for overflow mode */
    1554:	a9 e5       	ldi	r26, 0x59	; 89
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e9 e5       	ldi	r30, 0x59	; 89
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	81 60       	ori	r24, 0x01	; 1
    1560:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV0); /* enable overflow flag */
    1562:	a8 e5       	ldi	r26, 0x58	; 88
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e8 e5       	ldi	r30, 0x58	; 88
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	81 60       	ori	r24, 0x01	; 1
    156e:	8c 93       	st	X, r24
    1570:	d8 c0       	rjmp	.+432    	; 0x1722 <Timer_init+0x228>

		}
		else if (Config_ptr -> mode == CTC)
    1572:	e9 81       	ldd	r30, Y+1	; 0x01
    1574:	fa 81       	ldd	r31, Y+2	; 0x02
    1576:	81 81       	ldd	r24, Z+1	; 0x01
    1578:	82 30       	cpi	r24, 0x02	; 2
    157a:	09 f0       	breq	.+2      	; 0x157e <Timer_init+0x84>
    157c:	d2 c0       	rjmp	.+420    	; 0x1722 <Timer_init+0x228>
		{
			SET_BIT(TCCR0,WGM01);
    157e:	a3 e5       	ldi	r26, 0x53	; 83
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e3 e5       	ldi	r30, 0x53	; 83
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	88 60       	ori	r24, 0x08	; 8
    158a:	8c 93       	st	X, r24
			OCR0 = Config_ptr -> CompareValue;
    158c:	ac e5       	ldi	r26, 0x5C	; 92
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e9 81       	ldd	r30, Y+1	; 0x01
    1592:	fa 81       	ldd	r31, Y+2	; 0x02
    1594:	83 81       	ldd	r24, Z+3	; 0x03
    1596:	94 81       	ldd	r25, Z+4	; 0x04
    1598:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE0); /* enable interrupts for CTC mode */
    159a:	a9 e5       	ldi	r26, 0x59	; 89
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e9 e5       	ldi	r30, 0x59	; 89
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	82 60       	ori	r24, 0x02	; 2
    15a6:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF0); /* enable CTC flag */
    15a8:	a8 e5       	ldi	r26, 0x58	; 88
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e8 e5       	ldi	r30, 0x58	; 88
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	82 60       	ori	r24, 0x02	; 2
    15b4:	8c 93       	st	X, r24
    15b6:	b5 c0       	rjmp	.+362    	; 0x1722 <Timer_init+0x228>
		}


	}
else if (Config_ptr -> Timer_ID == Timer1)
    15b8:	e9 81       	ldd	r30, Y+1	; 0x01
    15ba:	fa 81       	ldd	r31, Y+2	; 0x02
    15bc:	80 81       	ld	r24, Z
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <Timer_init+0xca>
    15c2:	59 c0       	rjmp	.+178    	; 0x1676 <Timer_init+0x17c>
	{
		TCCR1A =0;
    15c4:	ef e4       	ldi	r30, 0x4F	; 79
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	10 82       	st	Z, r1
		SET_BIT(TCCR1A,FOC1A); /* for non-PWM mode */
    15ca:	af e4       	ldi	r26, 0x4F	; 79
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	ef e4       	ldi	r30, 0x4F	; 79
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	88 60       	ori	r24, 0x08	; 8
    15d6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    15d8:	af e4       	ldi	r26, 0x4F	; 79
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	ef e4       	ldi	r30, 0x4F	; 79
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	84 60       	ori	r24, 0x04	; 4
    15e4:	8c 93       	st	X, r24
		TCCR1B = Config_ptr -> clk_selection;
    15e6:	ae e4       	ldi	r26, 0x4E	; 78
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e9 81       	ldd	r30, Y+1	; 0x01
    15ec:	fa 81       	ldd	r31, Y+2	; 0x02
    15ee:	82 81       	ldd	r24, Z+2	; 0x02
    15f0:	8c 93       	st	X, r24
		TCNT1 = Config_ptr -> Initial_Value;
    15f2:	ac e4       	ldi	r26, 0x4C	; 76
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e9 81       	ldd	r30, Y+1	; 0x01
    15f8:	fa 81       	ldd	r31, Y+2	; 0x02
    15fa:	85 81       	ldd	r24, Z+5	; 0x05
    15fc:	96 81       	ldd	r25, Z+6	; 0x06
    15fe:	11 96       	adiw	r26, 0x01	; 1
    1600:	9c 93       	st	X, r25
    1602:	8e 93       	st	-X, r24

		if (Config_ptr -> mode == NORMAL)
    1604:	e9 81       	ldd	r30, Y+1	; 0x01
    1606:	fa 81       	ldd	r31, Y+2	; 0x02
    1608:	81 81       	ldd	r24, Z+1	; 0x01
    160a:	88 23       	and	r24, r24
    160c:	79 f4       	brne	.+30     	; 0x162c <Timer_init+0x132>
		{
			SET_BIT(TIMSK, TOIE1); /* enable interrupts for overflow mode */
    160e:	a9 e5       	ldi	r26, 0x59	; 89
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e9 e5       	ldi	r30, 0x59	; 89
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	84 60       	ori	r24, 0x04	; 4
    161a:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV1);
    161c:	a8 e5       	ldi	r26, 0x58	; 88
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e8 e5       	ldi	r30, 0x58	; 88
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	84 60       	ori	r24, 0x04	; 4
    1628:	8c 93       	st	X, r24
    162a:	7b c0       	rjmp	.+246    	; 0x1722 <Timer_init+0x228>

		}
		else if (Config_ptr -> mode == CTC)
    162c:	e9 81       	ldd	r30, Y+1	; 0x01
    162e:	fa 81       	ldd	r31, Y+2	; 0x02
    1630:	81 81       	ldd	r24, Z+1	; 0x01
    1632:	82 30       	cpi	r24, 0x02	; 2
    1634:	09 f0       	breq	.+2      	; 0x1638 <Timer_init+0x13e>
    1636:	75 c0       	rjmp	.+234    	; 0x1722 <Timer_init+0x228>
		{
			SET_BIT(TCCR1B, WGM12);
    1638:	ae e4       	ldi	r26, 0x4E	; 78
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	ee e4       	ldi	r30, 0x4E	; 78
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	88 60       	ori	r24, 0x08	; 8
    1644:	8c 93       	st	X, r24
			OCR1A = Config_ptr -> CompareValue;
    1646:	aa e4       	ldi	r26, 0x4A	; 74
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e9 81       	ldd	r30, Y+1	; 0x01
    164c:	fa 81       	ldd	r31, Y+2	; 0x02
    164e:	83 81       	ldd	r24, Z+3	; 0x03
    1650:	94 81       	ldd	r25, Z+4	; 0x04
    1652:	11 96       	adiw	r26, 0x01	; 1
    1654:	9c 93       	st	X, r25
    1656:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, OCIE1A); /* enable interrupts for CTC mode */
    1658:	a9 e5       	ldi	r26, 0x59	; 89
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e9 e5       	ldi	r30, 0x59	; 89
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	80 61       	ori	r24, 0x10	; 16
    1664:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF1A); /* enable CTC flag */
    1666:	a8 e5       	ldi	r26, 0x58	; 88
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e8 e5       	ldi	r30, 0x58	; 88
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	80 61       	ori	r24, 0x10	; 16
    1672:	8c 93       	st	X, r24
    1674:	56 c0       	rjmp	.+172    	; 0x1722 <Timer_init+0x228>
		}
	}
else if (Config_ptr -> Timer_ID == Timer2)
    1676:	e9 81       	ldd	r30, Y+1	; 0x01
    1678:	fa 81       	ldd	r31, Y+2	; 0x02
    167a:	80 81       	ld	r24, Z
    167c:	82 30       	cpi	r24, 0x02	; 2
    167e:	09 f0       	breq	.+2      	; 0x1682 <Timer_init+0x188>
    1680:	50 c0       	rjmp	.+160    	; 0x1722 <Timer_init+0x228>
{
		SET_BIT(TCCR2, FOC2); /* for non-PWM */
    1682:	a5 e4       	ldi	r26, 0x45	; 69
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e5 e4       	ldi	r30, 0x45	; 69
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	80 68       	ori	r24, 0x80	; 128
    168e:	8c 93       	st	X, r24
		TCNT2 = Config_ptr -> Initial_Value;
    1690:	a4 e4       	ldi	r26, 0x44	; 68
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e9 81       	ldd	r30, Y+1	; 0x01
    1696:	fa 81       	ldd	r31, Y+2	; 0x02
    1698:	85 81       	ldd	r24, Z+5	; 0x05
    169a:	96 81       	ldd	r25, Z+6	; 0x06
    169c:	8c 93       	st	X, r24
		TCCR2 = 0;
    169e:	e5 e4       	ldi	r30, 0x45	; 69
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	10 82       	st	Z, r1
		TCCR2 |= (Config_ptr -> clk_selection);
    16a4:	a5 e4       	ldi	r26, 0x45	; 69
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e5 e4       	ldi	r30, 0x45	; 69
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	90 81       	ld	r25, Z
    16ae:	e9 81       	ldd	r30, Y+1	; 0x01
    16b0:	fa 81       	ldd	r31, Y+2	; 0x02
    16b2:	82 81       	ldd	r24, Z+2	; 0x02
    16b4:	89 2b       	or	r24, r25
    16b6:	8c 93       	st	X, r24

		if (Config_ptr -> mode == NORMAL)
    16b8:	e9 81       	ldd	r30, Y+1	; 0x01
    16ba:	fa 81       	ldd	r31, Y+2	; 0x02
    16bc:	81 81       	ldd	r24, Z+1	; 0x01
    16be:	88 23       	and	r24, r24
    16c0:	79 f4       	brne	.+30     	; 0x16e0 <Timer_init+0x1e6>
		{
			SET_BIT(TIMSK, TOIE2); /* enable interrupts for overflow mode */
    16c2:	a9 e5       	ldi	r26, 0x59	; 89
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e9 e5       	ldi	r30, 0x59	; 89
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	80 64       	ori	r24, 0x40	; 64
    16ce:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV2); /* enable overflow flag */
    16d0:	a8 e5       	ldi	r26, 0x58	; 88
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e8 e5       	ldi	r30, 0x58	; 88
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	80 64       	ori	r24, 0x40	; 64
    16dc:	8c 93       	st	X, r24
    16de:	21 c0       	rjmp	.+66     	; 0x1722 <Timer_init+0x228>

		} else if (Config_ptr -> mode == CTC)
    16e0:	e9 81       	ldd	r30, Y+1	; 0x01
    16e2:	fa 81       	ldd	r31, Y+2	; 0x02
    16e4:	81 81       	ldd	r24, Z+1	; 0x01
    16e6:	82 30       	cpi	r24, 0x02	; 2
    16e8:	e1 f4       	brne	.+56     	; 0x1722 <Timer_init+0x228>
		{
			SET_BIT(TCCR0, WGM21);
    16ea:	a3 e5       	ldi	r26, 0x53	; 83
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e3 e5       	ldi	r30, 0x53	; 83
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	88 60       	ori	r24, 0x08	; 8
    16f6:	8c 93       	st	X, r24
			OCR2 = Config_ptr -> CompareValue;
    16f8:	a3 e4       	ldi	r26, 0x43	; 67
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e9 81       	ldd	r30, Y+1	; 0x01
    16fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1700:	83 81       	ldd	r24, Z+3	; 0x03
    1702:	94 81       	ldd	r25, Z+4	; 0x04
    1704:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE2); /* enable interrupts for CTC mode */
    1706:	a9 e5       	ldi	r26, 0x59	; 89
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e9 e5       	ldi	r30, 0x59	; 89
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	80 68       	ori	r24, 0x80	; 128
    1712:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF2); /* enable CTC flag */
    1714:	a8 e5       	ldi	r26, 0x58	; 88
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e8 e5       	ldi	r30, 0x58	; 88
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	80 68       	ori	r24, 0x80	; 128
    1720:	8c 93       	st	X, r24
		}
	}
}
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <Timer_deInit>:


void Timer_deInit(TIMER_ID timer_ID)
{
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	0f 92       	push	r0
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	89 83       	std	Y+1, r24	; 0x01
	if (timer_ID == Timer0)
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	88 23       	and	r24, r24
    173c:	e1 f4       	brne	.+56     	; 0x1776 <Timer_deInit+0x4a>
	{
		TCCR0 = 0;
    173e:	e3 e5       	ldi	r30, 0x53	; 83
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	10 82       	st	Z, r1
		TCNT0= 0; /* clear initial value */
    1744:	e2 e5       	ldi	r30, 0x52	; 82
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	10 82       	st	Z, r1
		OCR0 = 0; /* clear compare value for CTC mode*/
    174a:	ec e5       	ldi	r30, 0x5C	; 92
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE0); /* disable interrupts for CTC mode */
    1750:	a9 e5       	ldi	r26, 0x59	; 89
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e9 e5       	ldi	r30, 0x59	; 89
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	8d 7f       	andi	r24, 0xFD	; 253
    175c:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE0); /* disable interrupts for overflow mode */
    175e:	a9 e5       	ldi	r26, 0x59	; 89
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e9 e5       	ldi	r30, 0x59	; 89
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	8e 7f       	andi	r24, 0xFE	; 254
    176a:	8c 93       	st	X, r24
		g_Timer0CallBackPtr = NULL_PTR; /* clear the call-back function */
    176c:	10 92 76 00 	sts	0x0076, r1
    1770:	10 92 75 00 	sts	0x0075, r1
    1774:	42 c0       	rjmp	.+132    	; 0x17fa <Timer_deInit+0xce>

	}
	else if (timer_ID == Timer1)
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	81 30       	cpi	r24, 0x01	; 1
    177a:	09 f5       	brne	.+66     	; 0x17be <Timer_deInit+0x92>
	{
		TCCR1A =0;
    177c:	ef e4       	ldi	r30, 0x4F	; 79
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	10 82       	st	Z, r1
		TCCR1B = 0; /* disable clock */
    1782:	ee e4       	ldi	r30, 0x4E	; 78
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	10 82       	st	Z, r1
		TCNT1 = 0;
    1788:	ec e4       	ldi	r30, 0x4C	; 76
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	11 82       	std	Z+1, r1	; 0x01
    178e:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, TOIE1); /* disable interrupts for overflow mode */
    1790:	a9 e5       	ldi	r26, 0x59	; 89
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e9 e5       	ldi	r30, 0x59	; 89
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	8b 7f       	andi	r24, 0xFB	; 251
    179c:	8c 93       	st	X, r24
		OCR1A = 0;  /* clear compare value for CTC mode */
    179e:	ea e4       	ldi	r30, 0x4A	; 74
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	11 82       	std	Z+1, r1	; 0x01
    17a4:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE1A); /* disable interrupts for CTC mode */
    17a6:	a9 e5       	ldi	r26, 0x59	; 89
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e9 e5       	ldi	r30, 0x59	; 89
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	8f 7e       	andi	r24, 0xEF	; 239
    17b2:	8c 93       	st	X, r24
		g_Timer1CallBackPtr = NULL_PTR;
    17b4:	10 92 78 00 	sts	0x0078, r1
    17b8:	10 92 77 00 	sts	0x0077, r1
    17bc:	1e c0       	rjmp	.+60     	; 0x17fa <Timer_deInit+0xce>

	}
	else if (timer_ID == Timer2)
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	82 30       	cpi	r24, 0x02	; 2
    17c2:	d9 f4       	brne	.+54     	; 0x17fa <Timer_deInit+0xce>
	{
		TCCR2 = 0;
    17c4:	e5 e4       	ldi	r30, 0x45	; 69
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	10 82       	st	Z, r1
		TCNT2 = 0; /* clear initial value */
    17ca:	e4 e4       	ldi	r30, 0x44	; 68
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	10 82       	st	Z, r1
		OCR2 = 0; /* clear compare value for CTC mode*/
    17d0:	e3 e4       	ldi	r30, 0x43	; 67
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE2); /* disable interrupts for CTC mode */
    17d6:	a9 e5       	ldi	r26, 0x59	; 89
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e9 e5       	ldi	r30, 0x59	; 89
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	8f 77       	andi	r24, 0x7F	; 127
    17e2:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE2); /* disable interrupts for overflow mode */
    17e4:	a9 e5       	ldi	r26, 0x59	; 89
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e9 e5       	ldi	r30, 0x59	; 89
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	8f 7b       	andi	r24, 0xBF	; 191
    17f0:	8c 93       	st	X, r24
		g_Timer2CallBackPtr = NULL_PTR;
    17f2:	10 92 7a 00 	sts	0x007A, r1
    17f6:	10 92 79 00 	sts	0x0079, r1
	}
}
    17fa:	0f 90       	pop	r0
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	08 95       	ret

00001802 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	00 d0       	rcall	.+0      	; 0x1808 <EEPROM_writeByte+0x6>
    1808:	00 d0       	rcall	.+0      	; 0x180a <EEPROM_writeByte+0x8>
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	9a 83       	std	Y+2, r25	; 0x02
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1814:	0e 94 0a 10 	call	0x2014	; 0x2014 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1818:	0e 94 62 10 	call	0x20c4	; 0x20c4 <TWI_getStatus>
    181c:	88 30       	cpi	r24, 0x08	; 8
    181e:	11 f0       	breq	.+4      	; 0x1824 <EEPROM_writeByte+0x22>
        return ERROR;
    1820:	1c 82       	std	Y+4, r1	; 0x04
    1822:	28 c0       	rjmp	.+80     	; 0x1874 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700) >> 7)));
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	9a 81       	ldd	r25, Y+2	; 0x02
    1828:	80 70       	andi	r24, 0x00	; 0
    182a:	97 70       	andi	r25, 0x07	; 7
    182c:	88 0f       	add	r24, r24
    182e:	89 2f       	mov	r24, r25
    1830:	88 1f       	adc	r24, r24
    1832:	99 0b       	sbc	r25, r25
    1834:	91 95       	neg	r25
    1836:	80 6a       	ori	r24, 0xA0	; 160
    1838:	0e 94 25 10 	call	0x204a	; 0x204a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    183c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <TWI_getStatus>
    1840:	88 31       	cpi	r24, 0x18	; 24
    1842:	11 f0       	breq	.+4      	; 0x1848 <EEPROM_writeByte+0x46>
        return ERROR; 
    1844:	1c 82       	std	Y+4, r1	; 0x04
    1846:	16 c0       	rjmp	.+44     	; 0x1874 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	0e 94 25 10 	call	0x204a	; 0x204a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    184e:	0e 94 62 10 	call	0x20c4	; 0x20c4 <TWI_getStatus>
    1852:	88 32       	cpi	r24, 0x28	; 40
    1854:	11 f0       	breq	.+4      	; 0x185a <EEPROM_writeByte+0x58>
        return ERROR;
    1856:	1c 82       	std	Y+4, r1	; 0x04
    1858:	0d c0       	rjmp	.+26     	; 0x1874 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	0e 94 25 10 	call	0x204a	; 0x204a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1860:	0e 94 62 10 	call	0x20c4	; 0x20c4 <TWI_getStatus>
    1864:	88 32       	cpi	r24, 0x28	; 40
    1866:	11 f0       	breq	.+4      	; 0x186c <EEPROM_writeByte+0x6a>
        return ERROR;
    1868:	1c 82       	std	Y+4, r1	; 0x04
    186a:	04 c0       	rjmp	.+8      	; 0x1874 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    186c:	0e 94 1a 10 	call	0x2034	; 0x2034 <TWI_stop>
	
    return SUCCESS;
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	8c 83       	std	Y+4, r24	; 0x04
    1874:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	00 d0       	rcall	.+0      	; 0x188a <EEPROM_readByte+0x6>
    188a:	00 d0       	rcall	.+0      	; 0x188c <EEPROM_readByte+0x8>
    188c:	0f 92       	push	r0
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	9a 83       	std	Y+2, r25	; 0x02
    1894:	89 83       	std	Y+1, r24	; 0x01
    1896:	7c 83       	std	Y+4, r23	; 0x04
    1898:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    189a:	0e 94 0a 10 	call	0x2014	; 0x2014 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    189e:	0e 94 62 10 	call	0x20c4	; 0x20c4 <TWI_getStatus>
    18a2:	88 30       	cpi	r24, 0x08	; 8
    18a4:	11 f0       	breq	.+4      	; 0x18aa <EEPROM_readByte+0x26>
        return ERROR;
    18a6:	1d 82       	std	Y+5, r1	; 0x05
    18a8:	44 c0       	rjmp	.+136    	; 0x1932 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700) >> 7)));
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	9a 81       	ldd	r25, Y+2	; 0x02
    18ae:	80 70       	andi	r24, 0x00	; 0
    18b0:	97 70       	andi	r25, 0x07	; 7
    18b2:	88 0f       	add	r24, r24
    18b4:	89 2f       	mov	r24, r25
    18b6:	88 1f       	adc	r24, r24
    18b8:	99 0b       	sbc	r25, r25
    18ba:	91 95       	neg	r25
    18bc:	80 6a       	ori	r24, 0xA0	; 160
    18be:	0e 94 25 10 	call	0x204a	; 0x204a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    18c2:	0e 94 62 10 	call	0x20c4	; 0x20c4 <TWI_getStatus>
    18c6:	88 31       	cpi	r24, 0x18	; 24
    18c8:	11 f0       	breq	.+4      	; 0x18ce <EEPROM_readByte+0x4a>
        return ERROR;
    18ca:	1d 82       	std	Y+5, r1	; 0x05
    18cc:	32 c0       	rjmp	.+100    	; 0x1932 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	0e 94 25 10 	call	0x204a	; 0x204a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    18d4:	0e 94 62 10 	call	0x20c4	; 0x20c4 <TWI_getStatus>
    18d8:	88 32       	cpi	r24, 0x28	; 40
    18da:	11 f0       	breq	.+4      	; 0x18e0 <EEPROM_readByte+0x5c>
        return ERROR;
    18dc:	1d 82       	std	Y+5, r1	; 0x05
    18de:	29 c0       	rjmp	.+82     	; 0x1932 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    18e0:	0e 94 0a 10 	call	0x2014	; 0x2014 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    18e4:	0e 94 62 10 	call	0x20c4	; 0x20c4 <TWI_getStatus>
    18e8:	80 31       	cpi	r24, 0x10	; 16
    18ea:	11 f0       	breq	.+4      	; 0x18f0 <EEPROM_readByte+0x6c>
        return ERROR;
    18ec:	1d 82       	std	Y+5, r1	; 0x05
    18ee:	21 c0       	rjmp	.+66     	; 0x1932 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700) >> 7) | 1));
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	9a 81       	ldd	r25, Y+2	; 0x02
    18f4:	80 70       	andi	r24, 0x00	; 0
    18f6:	97 70       	andi	r25, 0x07	; 7
    18f8:	88 0f       	add	r24, r24
    18fa:	89 2f       	mov	r24, r25
    18fc:	88 1f       	adc	r24, r24
    18fe:	99 0b       	sbc	r25, r25
    1900:	91 95       	neg	r25
    1902:	81 6a       	ori	r24, 0xA1	; 161
    1904:	0e 94 25 10 	call	0x204a	; 0x204a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1908:	0e 94 62 10 	call	0x20c4	; 0x20c4 <TWI_getStatus>
    190c:	80 34       	cpi	r24, 0x40	; 64
    190e:	11 f0       	breq	.+4      	; 0x1914 <EEPROM_readByte+0x90>
        return ERROR;
    1910:	1d 82       	std	Y+5, r1	; 0x05
    1912:	0f c0       	rjmp	.+30     	; 0x1932 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1914:	0e 94 4f 10 	call	0x209e	; 0x209e <TWI_readByteWithNACK>
    1918:	eb 81       	ldd	r30, Y+3	; 0x03
    191a:	fc 81       	ldd	r31, Y+4	; 0x04
    191c:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    191e:	0e 94 62 10 	call	0x20c4	; 0x20c4 <TWI_getStatus>
    1922:	88 35       	cpi	r24, 0x58	; 88
    1924:	11 f0       	breq	.+4      	; 0x192a <EEPROM_readByte+0xa6>
        return ERROR;
    1926:	1d 82       	std	Y+5, r1	; 0x05
    1928:	04 c0       	rjmp	.+8      	; 0x1932 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    192a:	0e 94 1a 10 	call	0x2034	; 0x2034 <TWI_stop>

    return SUCCESS;
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	8d 83       	std	Y+5, r24	; 0x05
    1932:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	00 d0       	rcall	.+0      	; 0x194a <GPIO_setupPinDirection+0x6>
    194a:	00 d0       	rcall	.+0      	; 0x194c <GPIO_setupPinDirection+0x8>
    194c:	0f 92       	push	r0
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	89 83       	std	Y+1, r24	; 0x01
    1954:	6a 83       	std	Y+2, r22	; 0x02
    1956:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	88 30       	cpi	r24, 0x08	; 8
    195c:	08 f0       	brcs	.+2      	; 0x1960 <GPIO_setupPinDirection+0x1c>
    195e:	d5 c0       	rjmp	.+426    	; 0x1b0a <GPIO_setupPinDirection+0x1c6>
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	84 30       	cpi	r24, 0x04	; 4
    1964:	08 f0       	brcs	.+2      	; 0x1968 <GPIO_setupPinDirection+0x24>
    1966:	d1 c0       	rjmp	.+418    	; 0x1b0a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	28 2f       	mov	r18, r24
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	3d 83       	std	Y+5, r19	; 0x05
    1970:	2c 83       	std	Y+4, r18	; 0x04
    1972:	8c 81       	ldd	r24, Y+4	; 0x04
    1974:	9d 81       	ldd	r25, Y+5	; 0x05
    1976:	81 30       	cpi	r24, 0x01	; 1
    1978:	91 05       	cpc	r25, r1
    197a:	09 f4       	brne	.+2      	; 0x197e <GPIO_setupPinDirection+0x3a>
    197c:	43 c0       	rjmp	.+134    	; 0x1a04 <GPIO_setupPinDirection+0xc0>
    197e:	2c 81       	ldd	r18, Y+4	; 0x04
    1980:	3d 81       	ldd	r19, Y+5	; 0x05
    1982:	22 30       	cpi	r18, 0x02	; 2
    1984:	31 05       	cpc	r19, r1
    1986:	2c f4       	brge	.+10     	; 0x1992 <GPIO_setupPinDirection+0x4e>
    1988:	8c 81       	ldd	r24, Y+4	; 0x04
    198a:	9d 81       	ldd	r25, Y+5	; 0x05
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	71 f0       	breq	.+28     	; 0x19ac <GPIO_setupPinDirection+0x68>
    1990:	bc c0       	rjmp	.+376    	; 0x1b0a <GPIO_setupPinDirection+0x1c6>
    1992:	2c 81       	ldd	r18, Y+4	; 0x04
    1994:	3d 81       	ldd	r19, Y+5	; 0x05
    1996:	22 30       	cpi	r18, 0x02	; 2
    1998:	31 05       	cpc	r19, r1
    199a:	09 f4       	brne	.+2      	; 0x199e <GPIO_setupPinDirection+0x5a>
    199c:	5f c0       	rjmp	.+190    	; 0x1a5c <GPIO_setupPinDirection+0x118>
    199e:	8c 81       	ldd	r24, Y+4	; 0x04
    19a0:	9d 81       	ldd	r25, Y+5	; 0x05
    19a2:	83 30       	cpi	r24, 0x03	; 3
    19a4:	91 05       	cpc	r25, r1
    19a6:	09 f4       	brne	.+2      	; 0x19aa <GPIO_setupPinDirection+0x66>
    19a8:	85 c0       	rjmp	.+266    	; 0x1ab4 <GPIO_setupPinDirection+0x170>
    19aa:	af c0       	rjmp	.+350    	; 0x1b0a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	81 30       	cpi	r24, 0x01	; 1
    19b0:	a1 f4       	brne	.+40     	; 0x19da <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    19b2:	aa e3       	ldi	r26, 0x3A	; 58
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	ea e3       	ldi	r30, 0x3A	; 58
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	48 2f       	mov	r20, r24
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	02 2e       	mov	r0, r18
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <GPIO_setupPinDirection+0x8c>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	0a 94       	dec	r0
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <GPIO_setupPinDirection+0x88>
    19d4:	84 2b       	or	r24, r20
    19d6:	8c 93       	st	X, r24
    19d8:	98 c0       	rjmp	.+304    	; 0x1b0a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    19da:	aa e3       	ldi	r26, 0x3A	; 58
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	ea e3       	ldi	r30, 0x3A	; 58
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	48 2f       	mov	r20, r24
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	02 2e       	mov	r0, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <GPIO_setupPinDirection+0xb4>
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	0a 94       	dec	r0
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <GPIO_setupPinDirection+0xb0>
    19fc:	80 95       	com	r24
    19fe:	84 23       	and	r24, r20
    1a00:	8c 93       	st	X, r24
    1a02:	83 c0       	rjmp	.+262    	; 0x1b0a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	81 30       	cpi	r24, 0x01	; 1
    1a08:	a1 f4       	brne	.+40     	; 0x1a32 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1a0a:	a7 e3       	ldi	r26, 0x37	; 55
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e7 e3       	ldi	r30, 0x37	; 55
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	48 2f       	mov	r20, r24
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	02 2e       	mov	r0, r18
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <GPIO_setupPinDirection+0xe4>
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	0a 94       	dec	r0
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <GPIO_setupPinDirection+0xe0>
    1a2c:	84 2b       	or	r24, r20
    1a2e:	8c 93       	st	X, r24
    1a30:	6c c0       	rjmp	.+216    	; 0x1b0a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1a32:	a7 e3       	ldi	r26, 0x37	; 55
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e7 e3       	ldi	r30, 0x37	; 55
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	48 2f       	mov	r20, r24
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	02 2e       	mov	r0, r18
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <GPIO_setupPinDirection+0x10c>
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	0a 94       	dec	r0
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <GPIO_setupPinDirection+0x108>
    1a54:	80 95       	com	r24
    1a56:	84 23       	and	r24, r20
    1a58:	8c 93       	st	X, r24
    1a5a:	57 c0       	rjmp	.+174    	; 0x1b0a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	a1 f4       	brne	.+40     	; 0x1a8a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1a62:	a4 e3       	ldi	r26, 0x34	; 52
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e4 e3       	ldi	r30, 0x34	; 52
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	48 2f       	mov	r20, r24
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	02 2e       	mov	r0, r18
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <GPIO_setupPinDirection+0x13c>
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	0a 94       	dec	r0
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <GPIO_setupPinDirection+0x138>
    1a84:	84 2b       	or	r24, r20
    1a86:	8c 93       	st	X, r24
    1a88:	40 c0       	rjmp	.+128    	; 0x1b0a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1a8a:	a4 e3       	ldi	r26, 0x34	; 52
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e4 e3       	ldi	r30, 0x34	; 52
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	48 2f       	mov	r20, r24
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	02 2e       	mov	r0, r18
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <GPIO_setupPinDirection+0x164>
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	0a 94       	dec	r0
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <GPIO_setupPinDirection+0x160>
    1aac:	80 95       	com	r24
    1aae:	84 23       	and	r24, r20
    1ab0:	8c 93       	st	X, r24
    1ab2:	2b c0       	rjmp	.+86     	; 0x1b0a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	81 30       	cpi	r24, 0x01	; 1
    1ab8:	a1 f4       	brne	.+40     	; 0x1ae2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1aba:	a1 e3       	ldi	r26, 0x31	; 49
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e1 e3       	ldi	r30, 0x31	; 49
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	48 2f       	mov	r20, r24
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	28 2f       	mov	r18, r24
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	02 2e       	mov	r0, r18
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <GPIO_setupPinDirection+0x194>
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	0a 94       	dec	r0
    1ada:	e2 f7       	brpl	.-8      	; 0x1ad4 <GPIO_setupPinDirection+0x190>
    1adc:	84 2b       	or	r24, r20
    1ade:	8c 93       	st	X, r24
    1ae0:	14 c0       	rjmp	.+40     	; 0x1b0a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1ae2:	a1 e3       	ldi	r26, 0x31	; 49
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e1 e3       	ldi	r30, 0x31	; 49
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	48 2f       	mov	r20, r24
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	02 2e       	mov	r0, r18
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <GPIO_setupPinDirection+0x1bc>
    1afc:	88 0f       	add	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	0a 94       	dec	r0
    1b02:	e2 f7       	brpl	.-8      	; 0x1afc <GPIO_setupPinDirection+0x1b8>
    1b04:	80 95       	com	r24
    1b06:	84 23       	and	r24, r20
    1b08:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <GPIO_writePin+0x6>
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <GPIO_writePin+0x8>
    1b22:	0f 92       	push	r0
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	89 83       	std	Y+1, r24	; 0x01
    1b2a:	6a 83       	std	Y+2, r22	; 0x02
    1b2c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	88 30       	cpi	r24, 0x08	; 8
    1b32:	08 f0       	brcs	.+2      	; 0x1b36 <GPIO_writePin+0x1c>
    1b34:	d5 c0       	rjmp	.+426    	; 0x1ce0 <GPIO_writePin+0x1c6>
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	84 30       	cpi	r24, 0x04	; 4
    1b3a:	08 f0       	brcs	.+2      	; 0x1b3e <GPIO_writePin+0x24>
    1b3c:	d1 c0       	rjmp	.+418    	; 0x1ce0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	3d 83       	std	Y+5, r19	; 0x05
    1b46:	2c 83       	std	Y+4, r18	; 0x04
    1b48:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4c:	81 30       	cpi	r24, 0x01	; 1
    1b4e:	91 05       	cpc	r25, r1
    1b50:	09 f4       	brne	.+2      	; 0x1b54 <GPIO_writePin+0x3a>
    1b52:	43 c0       	rjmp	.+134    	; 0x1bda <GPIO_writePin+0xc0>
    1b54:	2c 81       	ldd	r18, Y+4	; 0x04
    1b56:	3d 81       	ldd	r19, Y+5	; 0x05
    1b58:	22 30       	cpi	r18, 0x02	; 2
    1b5a:	31 05       	cpc	r19, r1
    1b5c:	2c f4       	brge	.+10     	; 0x1b68 <GPIO_writePin+0x4e>
    1b5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b60:	9d 81       	ldd	r25, Y+5	; 0x05
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	71 f0       	breq	.+28     	; 0x1b82 <GPIO_writePin+0x68>
    1b66:	bc c0       	rjmp	.+376    	; 0x1ce0 <GPIO_writePin+0x1c6>
    1b68:	2c 81       	ldd	r18, Y+4	; 0x04
    1b6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b6c:	22 30       	cpi	r18, 0x02	; 2
    1b6e:	31 05       	cpc	r19, r1
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <GPIO_writePin+0x5a>
    1b72:	5f c0       	rjmp	.+190    	; 0x1c32 <GPIO_writePin+0x118>
    1b74:	8c 81       	ldd	r24, Y+4	; 0x04
    1b76:	9d 81       	ldd	r25, Y+5	; 0x05
    1b78:	83 30       	cpi	r24, 0x03	; 3
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <GPIO_writePin+0x66>
    1b7e:	85 c0       	rjmp	.+266    	; 0x1c8a <GPIO_writePin+0x170>
    1b80:	af c0       	rjmp	.+350    	; 0x1ce0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	81 30       	cpi	r24, 0x01	; 1
    1b86:	a1 f4       	brne	.+40     	; 0x1bb0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1b88:	ab e3       	ldi	r26, 0x3B	; 59
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	eb e3       	ldi	r30, 0x3B	; 59
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	48 2f       	mov	r20, r24
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	02 2e       	mov	r0, r18
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <GPIO_writePin+0x8c>
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	0a 94       	dec	r0
    1ba8:	e2 f7       	brpl	.-8      	; 0x1ba2 <GPIO_writePin+0x88>
    1baa:	84 2b       	or	r24, r20
    1bac:	8c 93       	st	X, r24
    1bae:	98 c0       	rjmp	.+304    	; 0x1ce0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1bb0:	ab e3       	ldi	r26, 0x3B	; 59
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	eb e3       	ldi	r30, 0x3B	; 59
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	48 2f       	mov	r20, r24
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	02 2e       	mov	r0, r18
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <GPIO_writePin+0xb4>
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	0a 94       	dec	r0
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <GPIO_writePin+0xb0>
    1bd2:	80 95       	com	r24
    1bd4:	84 23       	and	r24, r20
    1bd6:	8c 93       	st	X, r24
    1bd8:	83 c0       	rjmp	.+262    	; 0x1ce0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	81 30       	cpi	r24, 0x01	; 1
    1bde:	a1 f4       	brne	.+40     	; 0x1c08 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1be0:	a8 e3       	ldi	r26, 0x38	; 56
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e8 e3       	ldi	r30, 0x38	; 56
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	48 2f       	mov	r20, r24
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	02 2e       	mov	r0, r18
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <GPIO_writePin+0xe4>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	0a 94       	dec	r0
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <GPIO_writePin+0xe0>
    1c02:	84 2b       	or	r24, r20
    1c04:	8c 93       	st	X, r24
    1c06:	6c c0       	rjmp	.+216    	; 0x1ce0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1c08:	a8 e3       	ldi	r26, 0x38	; 56
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e8 e3       	ldi	r30, 0x38	; 56
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 2e       	mov	r0, r18
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <GPIO_writePin+0x10c>
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	0a 94       	dec	r0
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <GPIO_writePin+0x108>
    1c2a:	80 95       	com	r24
    1c2c:	84 23       	and	r24, r20
    1c2e:	8c 93       	st	X, r24
    1c30:	57 c0       	rjmp	.+174    	; 0x1ce0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	81 30       	cpi	r24, 0x01	; 1
    1c36:	a1 f4       	brne	.+40     	; 0x1c60 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1c38:	a5 e3       	ldi	r26, 0x35	; 53
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e5 e3       	ldi	r30, 0x35	; 53
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	48 2f       	mov	r20, r24
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	02 2e       	mov	r0, r18
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <GPIO_writePin+0x13c>
    1c52:	88 0f       	add	r24, r24
    1c54:	99 1f       	adc	r25, r25
    1c56:	0a 94       	dec	r0
    1c58:	e2 f7       	brpl	.-8      	; 0x1c52 <GPIO_writePin+0x138>
    1c5a:	84 2b       	or	r24, r20
    1c5c:	8c 93       	st	X, r24
    1c5e:	40 c0       	rjmp	.+128    	; 0x1ce0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1c60:	a5 e3       	ldi	r26, 0x35	; 53
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	e5 e3       	ldi	r30, 0x35	; 53
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	48 2f       	mov	r20, r24
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	02 2e       	mov	r0, r18
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <GPIO_writePin+0x164>
    1c7a:	88 0f       	add	r24, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	0a 94       	dec	r0
    1c80:	e2 f7       	brpl	.-8      	; 0x1c7a <GPIO_writePin+0x160>
    1c82:	80 95       	com	r24
    1c84:	84 23       	and	r24, r20
    1c86:	8c 93       	st	X, r24
    1c88:	2b c0       	rjmp	.+86     	; 0x1ce0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	81 30       	cpi	r24, 0x01	; 1
    1c8e:	a1 f4       	brne	.+40     	; 0x1cb8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1c90:	a2 e3       	ldi	r26, 0x32	; 50
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	e2 e3       	ldi	r30, 0x32	; 50
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	48 2f       	mov	r20, r24
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	02 2e       	mov	r0, r18
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <GPIO_writePin+0x194>
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	0a 94       	dec	r0
    1cb0:	e2 f7       	brpl	.-8      	; 0x1caa <GPIO_writePin+0x190>
    1cb2:	84 2b       	or	r24, r20
    1cb4:	8c 93       	st	X, r24
    1cb6:	14 c0       	rjmp	.+40     	; 0x1ce0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1cb8:	a2 e3       	ldi	r26, 0x32	; 50
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e2 e3       	ldi	r30, 0x32	; 50
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	48 2f       	mov	r20, r24
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	02 2e       	mov	r0, r18
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <GPIO_writePin+0x1bc>
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	0a 94       	dec	r0
    1cd8:	e2 f7       	brpl	.-8      	; 0x1cd2 <GPIO_writePin+0x1b8>
    1cda:	80 95       	com	r24
    1cdc:	84 23       	and	r24, r20
    1cde:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	00 d0       	rcall	.+0      	; 0x1cf6 <GPIO_readPin+0x6>
    1cf6:	00 d0       	rcall	.+0      	; 0x1cf8 <GPIO_readPin+0x8>
    1cf8:	0f 92       	push	r0
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	8a 83       	std	Y+2, r24	; 0x02
    1d00:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1d02:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	88 30       	cpi	r24, 0x08	; 8
    1d08:	08 f0       	brcs	.+2      	; 0x1d0c <GPIO_readPin+0x1c>
    1d0a:	84 c0       	rjmp	.+264    	; 0x1e14 <GPIO_readPin+0x124>
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	84 30       	cpi	r24, 0x04	; 4
    1d10:	08 f0       	brcs	.+2      	; 0x1d14 <GPIO_readPin+0x24>
    1d12:	80 c0       	rjmp	.+256    	; 0x1e14 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	3d 83       	std	Y+5, r19	; 0x05
    1d1c:	2c 83       	std	Y+4, r18	; 0x04
    1d1e:	4c 81       	ldd	r20, Y+4	; 0x04
    1d20:	5d 81       	ldd	r21, Y+5	; 0x05
    1d22:	41 30       	cpi	r20, 0x01	; 1
    1d24:	51 05       	cpc	r21, r1
    1d26:	79 f1       	breq	.+94     	; 0x1d86 <GPIO_readPin+0x96>
    1d28:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d2c:	82 30       	cpi	r24, 0x02	; 2
    1d2e:	91 05       	cpc	r25, r1
    1d30:	34 f4       	brge	.+12     	; 0x1d3e <GPIO_readPin+0x4e>
    1d32:	2c 81       	ldd	r18, Y+4	; 0x04
    1d34:	3d 81       	ldd	r19, Y+5	; 0x05
    1d36:	21 15       	cp	r18, r1
    1d38:	31 05       	cpc	r19, r1
    1d3a:	69 f0       	breq	.+26     	; 0x1d56 <GPIO_readPin+0x66>
    1d3c:	6b c0       	rjmp	.+214    	; 0x1e14 <GPIO_readPin+0x124>
    1d3e:	4c 81       	ldd	r20, Y+4	; 0x04
    1d40:	5d 81       	ldd	r21, Y+5	; 0x05
    1d42:	42 30       	cpi	r20, 0x02	; 2
    1d44:	51 05       	cpc	r21, r1
    1d46:	b9 f1       	breq	.+110    	; 0x1db6 <GPIO_readPin+0xc6>
    1d48:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4c:	83 30       	cpi	r24, 0x03	; 3
    1d4e:	91 05       	cpc	r25, r1
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <GPIO_readPin+0x64>
    1d52:	49 c0       	rjmp	.+146    	; 0x1de6 <GPIO_readPin+0xf6>
    1d54:	5f c0       	rjmp	.+190    	; 0x1e14 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1d56:	e9 e3       	ldi	r30, 0x39	; 57
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	88 2f       	mov	r24, r24
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	a9 01       	movw	r20, r18
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <GPIO_readPin+0x7e>
    1d6a:	55 95       	asr	r21
    1d6c:	47 95       	ror	r20
    1d6e:	8a 95       	dec	r24
    1d70:	e2 f7       	brpl	.-8      	; 0x1d6a <GPIO_readPin+0x7a>
    1d72:	ca 01       	movw	r24, r20
    1d74:	81 70       	andi	r24, 0x01	; 1
    1d76:	90 70       	andi	r25, 0x00	; 0
    1d78:	88 23       	and	r24, r24
    1d7a:	19 f0       	breq	.+6      	; 0x1d82 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	89 83       	std	Y+1, r24	; 0x01
    1d80:	49 c0       	rjmp	.+146    	; 0x1e14 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d82:	19 82       	std	Y+1, r1	; 0x01
    1d84:	47 c0       	rjmp	.+142    	; 0x1e14 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1d86:	e6 e3       	ldi	r30, 0x36	; 54
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	88 2f       	mov	r24, r24
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	a9 01       	movw	r20, r18
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <GPIO_readPin+0xae>
    1d9a:	55 95       	asr	r21
    1d9c:	47 95       	ror	r20
    1d9e:	8a 95       	dec	r24
    1da0:	e2 f7       	brpl	.-8      	; 0x1d9a <GPIO_readPin+0xaa>
    1da2:	ca 01       	movw	r24, r20
    1da4:	81 70       	andi	r24, 0x01	; 1
    1da6:	90 70       	andi	r25, 0x00	; 0
    1da8:	88 23       	and	r24, r24
    1daa:	19 f0       	breq	.+6      	; 0x1db2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	89 83       	std	Y+1, r24	; 0x01
    1db0:	31 c0       	rjmp	.+98     	; 0x1e14 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1db2:	19 82       	std	Y+1, r1	; 0x01
    1db4:	2f c0       	rjmp	.+94     	; 0x1e14 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1db6:	e3 e3       	ldi	r30, 0x33	; 51
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	88 2f       	mov	r24, r24
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	a9 01       	movw	r20, r18
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <GPIO_readPin+0xde>
    1dca:	55 95       	asr	r21
    1dcc:	47 95       	ror	r20
    1dce:	8a 95       	dec	r24
    1dd0:	e2 f7       	brpl	.-8      	; 0x1dca <GPIO_readPin+0xda>
    1dd2:	ca 01       	movw	r24, r20
    1dd4:	81 70       	andi	r24, 0x01	; 1
    1dd6:	90 70       	andi	r25, 0x00	; 0
    1dd8:	88 23       	and	r24, r24
    1dda:	19 f0       	breq	.+6      	; 0x1de2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	89 83       	std	Y+1, r24	; 0x01
    1de0:	19 c0       	rjmp	.+50     	; 0x1e14 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1de2:	19 82       	std	Y+1, r1	; 0x01
    1de4:	17 c0       	rjmp	.+46     	; 0x1e14 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1de6:	e0 e3       	ldi	r30, 0x30	; 48
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	88 2f       	mov	r24, r24
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	a9 01       	movw	r20, r18
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <GPIO_readPin+0x10e>
    1dfa:	55 95       	asr	r21
    1dfc:	47 95       	ror	r20
    1dfe:	8a 95       	dec	r24
    1e00:	e2 f7       	brpl	.-8      	; 0x1dfa <GPIO_readPin+0x10a>
    1e02:	ca 01       	movw	r24, r20
    1e04:	81 70       	andi	r24, 0x01	; 1
    1e06:	90 70       	andi	r25, 0x00	; 0
    1e08:	88 23       	and	r24, r24
    1e0a:	19 f0       	breq	.+6      	; 0x1e12 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	89 83       	std	Y+1, r24	; 0x01
    1e10:	01 c0       	rjmp	.+2      	; 0x1e14 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e12:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <GPIO_setupPortDirection+0x6>
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <GPIO_setupPortDirection+0x8>
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	89 83       	std	Y+1, r24	; 0x01
    1e34:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	84 30       	cpi	r24, 0x04	; 4
    1e3a:	90 f5       	brcc	.+100    	; 0x1ea0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	3c 83       	std	Y+4, r19	; 0x04
    1e44:	2b 83       	std	Y+3, r18	; 0x03
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4a:	81 30       	cpi	r24, 0x01	; 1
    1e4c:	91 05       	cpc	r25, r1
    1e4e:	d1 f0       	breq	.+52     	; 0x1e84 <GPIO_setupPortDirection+0x5e>
    1e50:	2b 81       	ldd	r18, Y+3	; 0x03
    1e52:	3c 81       	ldd	r19, Y+4	; 0x04
    1e54:	22 30       	cpi	r18, 0x02	; 2
    1e56:	31 05       	cpc	r19, r1
    1e58:	2c f4       	brge	.+10     	; 0x1e64 <GPIO_setupPortDirection+0x3e>
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	61 f0       	breq	.+24     	; 0x1e7a <GPIO_setupPortDirection+0x54>
    1e62:	1e c0       	rjmp	.+60     	; 0x1ea0 <GPIO_setupPortDirection+0x7a>
    1e64:	2b 81       	ldd	r18, Y+3	; 0x03
    1e66:	3c 81       	ldd	r19, Y+4	; 0x04
    1e68:	22 30       	cpi	r18, 0x02	; 2
    1e6a:	31 05       	cpc	r19, r1
    1e6c:	81 f0       	breq	.+32     	; 0x1e8e <GPIO_setupPortDirection+0x68>
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	9c 81       	ldd	r25, Y+4	; 0x04
    1e72:	83 30       	cpi	r24, 0x03	; 3
    1e74:	91 05       	cpc	r25, r1
    1e76:	81 f0       	breq	.+32     	; 0x1e98 <GPIO_setupPortDirection+0x72>
    1e78:	13 c0       	rjmp	.+38     	; 0x1ea0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1e7a:	ea e3       	ldi	r30, 0x3A	; 58
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	80 83       	st	Z, r24
    1e82:	0e c0       	rjmp	.+28     	; 0x1ea0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1e84:	e7 e3       	ldi	r30, 0x37	; 55
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	80 83       	st	Z, r24
    1e8c:	09 c0       	rjmp	.+18     	; 0x1ea0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1e8e:	e4 e3       	ldi	r30, 0x34	; 52
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	80 83       	st	Z, r24
    1e96:	04 c0       	rjmp	.+8      	; 0x1ea0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1e98:	e1 e3       	ldi	r30, 0x31	; 49
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <GPIO_writePort+0x6>
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <GPIO_writePort+0x8>
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	89 83       	std	Y+1, r24	; 0x01
    1ebc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	84 30       	cpi	r24, 0x04	; 4
    1ec2:	90 f5       	brcc	.+100    	; 0x1f28 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	3c 83       	std	Y+4, r19	; 0x04
    1ecc:	2b 83       	std	Y+3, r18	; 0x03
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed2:	81 30       	cpi	r24, 0x01	; 1
    1ed4:	91 05       	cpc	r25, r1
    1ed6:	d1 f0       	breq	.+52     	; 0x1f0c <GPIO_writePort+0x5e>
    1ed8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eda:	3c 81       	ldd	r19, Y+4	; 0x04
    1edc:	22 30       	cpi	r18, 0x02	; 2
    1ede:	31 05       	cpc	r19, r1
    1ee0:	2c f4       	brge	.+10     	; 0x1eec <GPIO_writePort+0x3e>
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	61 f0       	breq	.+24     	; 0x1f02 <GPIO_writePort+0x54>
    1eea:	1e c0       	rjmp	.+60     	; 0x1f28 <GPIO_writePort+0x7a>
    1eec:	2b 81       	ldd	r18, Y+3	; 0x03
    1eee:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef0:	22 30       	cpi	r18, 0x02	; 2
    1ef2:	31 05       	cpc	r19, r1
    1ef4:	81 f0       	breq	.+32     	; 0x1f16 <GPIO_writePort+0x68>
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	9c 81       	ldd	r25, Y+4	; 0x04
    1efa:	83 30       	cpi	r24, 0x03	; 3
    1efc:	91 05       	cpc	r25, r1
    1efe:	81 f0       	breq	.+32     	; 0x1f20 <GPIO_writePort+0x72>
    1f00:	13 c0       	rjmp	.+38     	; 0x1f28 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1f02:	eb e3       	ldi	r30, 0x3B	; 59
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	8a 81       	ldd	r24, Y+2	; 0x02
    1f08:	80 83       	st	Z, r24
    1f0a:	0e c0       	rjmp	.+28     	; 0x1f28 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1f0c:	e8 e3       	ldi	r30, 0x38	; 56
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	80 83       	st	Z, r24
    1f14:	09 c0       	rjmp	.+18     	; 0x1f28 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1f16:	e5 e3       	ldi	r30, 0x35	; 53
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	80 83       	st	Z, r24
    1f1e:	04 c0       	rjmp	.+8      	; 0x1f28 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1f20:	e2 e3       	ldi	r30, 0x32	; 50
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	8a 81       	ldd	r24, Y+2	; 0x02
    1f26:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <GPIO_readPort+0x6>
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <GPIO_readPort+0x8>
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
    1f42:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1f44:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	84 30       	cpi	r24, 0x04	; 4
    1f4a:	90 f5       	brcc	.+100    	; 0x1fb0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	3c 83       	std	Y+4, r19	; 0x04
    1f54:	2b 83       	std	Y+3, r18	; 0x03
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	91 05       	cpc	r25, r1
    1f5e:	d1 f0       	breq	.+52     	; 0x1f94 <GPIO_readPort+0x5e>
    1f60:	2b 81       	ldd	r18, Y+3	; 0x03
    1f62:	3c 81       	ldd	r19, Y+4	; 0x04
    1f64:	22 30       	cpi	r18, 0x02	; 2
    1f66:	31 05       	cpc	r19, r1
    1f68:	2c f4       	brge	.+10     	; 0x1f74 <GPIO_readPort+0x3e>
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	61 f0       	breq	.+24     	; 0x1f8a <GPIO_readPort+0x54>
    1f72:	1e c0       	rjmp	.+60     	; 0x1fb0 <GPIO_readPort+0x7a>
    1f74:	2b 81       	ldd	r18, Y+3	; 0x03
    1f76:	3c 81       	ldd	r19, Y+4	; 0x04
    1f78:	22 30       	cpi	r18, 0x02	; 2
    1f7a:	31 05       	cpc	r19, r1
    1f7c:	81 f0       	breq	.+32     	; 0x1f9e <GPIO_readPort+0x68>
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	9c 81       	ldd	r25, Y+4	; 0x04
    1f82:	83 30       	cpi	r24, 0x03	; 3
    1f84:	91 05       	cpc	r25, r1
    1f86:	81 f0       	breq	.+32     	; 0x1fa8 <GPIO_readPort+0x72>
    1f88:	13 c0       	rjmp	.+38     	; 0x1fb0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1f8a:	e9 e3       	ldi	r30, 0x39	; 57
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	89 83       	std	Y+1, r24	; 0x01
    1f92:	0e c0       	rjmp	.+28     	; 0x1fb0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1f94:	e6 e3       	ldi	r30, 0x36	; 54
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	89 83       	std	Y+1, r24	; 0x01
    1f9c:	09 c0       	rjmp	.+18     	; 0x1fb0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1f9e:	e3 e3       	ldi	r30, 0x33	; 51
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	89 83       	std	Y+1, r24	; 0x01
    1fa6:	04 c0       	rjmp	.+8      	; 0x1fb0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1fa8:	e0 e3       	ldi	r30, 0x30	; 48
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(TWIconfig * TWIconfig)
{
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <TWI_init+0x6>
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	9a 83       	std	Y+2, r25	; 0x02
    1fcc:	89 83       	std	Y+1, r24	; 0x01
	TWBR = TWIconfig -> BitRate ;
    1fce:	a0 e2       	ldi	r26, 0x20	; 32
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd6:	80 81       	ld	r24, Z
    1fd8:	8c 93       	st	X, r24

	TWCR = (1<<TWINT) | (1<<TWEN);    /*Clear the interrupt flag & enable the TWI module*/
    1fda:	e6 e5       	ldi	r30, 0x56	; 86
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	84 e8       	ldi	r24, 0x84	; 132
    1fe0:	80 83       	st	Z, r24
	TWSR = (TWSR & 0xF8) | (TWIconfig -> preScaler & 0x03); /*Set the prescaler */
    1fe2:	a1 e2       	ldi	r26, 0x21	; 33
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	e1 e2       	ldi	r30, 0x21	; 33
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	98 2f       	mov	r25, r24
    1fee:	98 7f       	andi	r25, 0xF8	; 248
    1ff0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff4:	81 81       	ldd	r24, Z+1	; 0x01
    1ff6:	83 70       	andi	r24, 0x03	; 3
    1ff8:	89 2b       	or	r24, r25
    1ffa:	8c 93       	st	X, r24
	TWAR = (TWIconfig -> SlaveAddress) << 1;	/*Set the slave address (shift is used because the 7 bit address 7-1)*/
    1ffc:	a2 e2       	ldi	r26, 0x22	; 34
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e9 81       	ldd	r30, Y+1	; 0x01
    2002:	fa 81       	ldd	r31, Y+2	; 0x02
    2004:	82 81       	ldd	r24, Z+2	; 0x02
    2006:	88 0f       	add	r24, r24
    2008:	8c 93       	st	X, r24
}
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <TWI_start>:

void TWI_start(void)
{
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    201c:	e6 e5       	ldi	r30, 0x56	; 86
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	84 ea       	ldi	r24, 0xA4	; 164
    2022:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2024:	e6 e5       	ldi	r30, 0x56	; 86
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	88 23       	and	r24, r24
    202c:	dc f7       	brge	.-10     	; 0x2024 <TWI_start+0x10>
}
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <TWI_stop>:

void TWI_stop(void)
{
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    203c:	e6 e5       	ldi	r30, 0x56	; 86
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	84 e9       	ldi	r24, 0x94	; 148
    2042:	80 83       	st	Z, r24
}
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	0f 92       	push	r0
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    2056:	e3 e2       	ldi	r30, 0x23	; 35
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN);
    205e:	e6 e5       	ldi	r30, 0x56	; 86
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	84 e8       	ldi	r24, 0x84	; 132
    2064:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2066:	e6 e5       	ldi	r30, 0x56	; 86
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	88 23       	and	r24, r24
    206e:	dc f7       	brge	.-10     	; 0x2066 <TWI_writeByte+0x1c>
}
    2070:	0f 90       	pop	r0
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2080:	e6 e5       	ldi	r30, 0x56	; 86
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	84 ec       	ldi	r24, 0xC4	; 196
    2086:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2088:	e6 e5       	ldi	r30, 0x56	; 86
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	88 23       	and	r24, r24
    2090:	dc f7       	brge	.-10     	; 0x2088 <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
    2092:	e3 e2       	ldi	r30, 0x23	; 35
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
}
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	08 95       	ret

0000209e <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    209e:	df 93       	push	r29
    20a0:	cf 93       	push	r28
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    20a6:	e6 e5       	ldi	r30, 0x56	; 86
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	84 e8       	ldi	r24, 0x84	; 132
    20ac:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    20ae:	e6 e5       	ldi	r30, 0x56	; 86
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	88 23       	and	r24, r24
    20b6:	dc f7       	brge	.-10     	; 0x20ae <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
    20b8:	e3 e2       	ldi	r30, 0x23	; 35
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
}
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	08 95       	ret

000020c4 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	0f 92       	push	r0
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    20ce:	e1 e2       	ldi	r30, 0x21	; 33
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	88 7f       	andi	r24, 0xF8	; 248
    20d6:	89 83       	std	Y+1, r24	; 0x01
	return status;
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    20da:	0f 90       	pop	r0
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <UART_init>:
#include <avr/io.h>
#include "common_macros.h"


void UART_init(uint32 baud_rate, Uart_Config *Config_ptr)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    20ea:	28 97       	sbiw	r28, 0x08	; 8
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
    20f6:	6b 83       	std	Y+3, r22	; 0x03
    20f8:	7c 83       	std	Y+4, r23	; 0x04
    20fa:	8d 83       	std	Y+5, r24	; 0x05
    20fc:	9e 83       	std	Y+6, r25	; 0x06
    20fe:	58 87       	std	Y+8, r21	; 0x08
    2100:	4f 83       	std	Y+7, r20	; 0x07
	uint16 ubrr_value = 0;
    2102:	1a 82       	std	Y+2, r1	; 0x02
    2104:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2106:	eb e2       	ldi	r30, 0x2B	; 43
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	82 e0       	ldi	r24, 0x02	; 2
    210c:	80 83       	st	Z, r24

	 /* RXEN  = 1 Receiver Enable
     * RXEN  = 1 Transmitter Enable */

	UCSRB = (1<<RXEN) | (1<<TXEN);
    210e:	ea e2       	ldi	r30, 0x2A	; 42
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	88 e1       	ldi	r24, 0x18	; 24
    2114:	80 83       	st	Z, r24

	UCSRC = (UCSRC & 0xF9) | ((Config_ptr -> Bit_Data) << UCSZ0);
    2116:	a0 e4       	ldi	r26, 0x40	; 64
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	e0 e4       	ldi	r30, 0x40	; 64
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	28 2f       	mov	r18, r24
    2122:	29 7f       	andi	r18, 0xF9	; 249
    2124:	ef 81       	ldd	r30, Y+7	; 0x07
    2126:	f8 85       	ldd	r31, Y+8	; 0x08
    2128:	80 81       	ld	r24, Z
    212a:	88 2f       	mov	r24, r24
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	88 0f       	add	r24, r24
    2130:	99 1f       	adc	r25, r25
    2132:	82 2b       	or	r24, r18
    2134:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xCF) | ((Config_ptr -> ParityType) << UPM0);
    2136:	a0 e4       	ldi	r26, 0x40	; 64
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e0 e4       	ldi	r30, 0x40	; 64
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	28 2f       	mov	r18, r24
    2142:	2f 7c       	andi	r18, 0xCF	; 207
    2144:	ef 81       	ldd	r30, Y+7	; 0x07
    2146:	f8 85       	ldd	r31, Y+8	; 0x08
    2148:	81 81       	ldd	r24, Z+1	; 0x01
    214a:	88 2f       	mov	r24, r24
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	82 95       	swap	r24
    2150:	92 95       	swap	r25
    2152:	90 7f       	andi	r25, 0xF0	; 240
    2154:	98 27       	eor	r25, r24
    2156:	80 7f       	andi	r24, 0xF0	; 240
    2158:	98 27       	eor	r25, r24
    215a:	82 2b       	or	r24, r18
    215c:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF7) | ((Config_ptr -> Stop_Bit_Num) << USBS);
    215e:	a0 e4       	ldi	r26, 0x40	; 64
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e0 e4       	ldi	r30, 0x40	; 64
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	28 2f       	mov	r18, r24
    216a:	27 7f       	andi	r18, 0xF7	; 247
    216c:	ef 81       	ldd	r30, Y+7	; 0x07
    216e:	f8 85       	ldd	r31, Y+8	; 0x08
    2170:	82 81       	ldd	r24, Z+2	; 0x02
    2172:	88 2f       	mov	r24, r24
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	88 0f       	add	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	82 2b       	or	r24, r18
    2184:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	9c 81       	ldd	r25, Y+4	; 0x04
    218a:	ad 81       	ldd	r26, Y+5	; 0x05
    218c:	be 81       	ldd	r27, Y+6	; 0x06
    218e:	88 0f       	add	r24, r24
    2190:	99 1f       	adc	r25, r25
    2192:	aa 1f       	adc	r26, r26
    2194:	bb 1f       	adc	r27, r27
    2196:	88 0f       	add	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	aa 1f       	adc	r26, r26
    219c:	bb 1f       	adc	r27, r27
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	aa 1f       	adc	r26, r26
    21a4:	bb 1f       	adc	r27, r27
    21a6:	9c 01       	movw	r18, r24
    21a8:	ad 01       	movw	r20, r26
    21aa:	80 e4       	ldi	r24, 0x40	; 64
    21ac:	92 e4       	ldi	r25, 0x42	; 66
    21ae:	af e0       	ldi	r26, 0x0F	; 15
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	bc 01       	movw	r22, r24
    21b4:	cd 01       	movw	r24, r26
    21b6:	0e 94 88 11 	call	0x2310	; 0x2310 <__udivmodsi4>
    21ba:	da 01       	movw	r26, r20
    21bc:	c9 01       	movw	r24, r18
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	9a 83       	std	Y+2, r25	; 0x02
    21c2:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
		UBRRH = ubrr_value >> 8;
    21c4:	e0 e4       	ldi	r30, 0x40	; 64
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	9a 81       	ldd	r25, Y+2	; 0x02
    21cc:	89 2f       	mov	r24, r25
    21ce:	99 27       	eor	r25, r25
    21d0:	80 83       	st	Z, r24
		UBRRL = ubrr_value;
    21d2:	e9 e2       	ldi	r30, 0x29	; 41
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	80 83       	st	Z, r24
}
    21da:	28 96       	adiw	r28, 0x08	; 8
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	0f 92       	push	r0
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    21f8:	eb e2       	ldi	r30, 0x2B	; 43
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	88 2f       	mov	r24, r24
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	80 72       	andi	r24, 0x20	; 32
    2204:	90 70       	andi	r25, 0x00	; 0
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	b9 f3       	breq	.-18     	; 0x21f8 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    220a:	ec e2       	ldi	r30, 0x2C	; 44
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2212:	0f 90       	pop	r0
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	08 95       	ret

0000221a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2222:	eb e2       	ldi	r30, 0x2B	; 43
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	88 23       	and	r24, r24
    222a:	dc f7       	brge	.-10     	; 0x2222 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    222c:	ec e2       	ldi	r30, 0x2C	; 44
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
}
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	00 d0       	rcall	.+0      	; 0x223e <UART_sendString+0x6>
    223e:	0f 92       	push	r0
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	9b 83       	std	Y+3, r25	; 0x03
    2246:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2248:	19 82       	std	Y+1, r1	; 0x01
    224a:	0e c0       	rjmp	.+28     	; 0x2268 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	28 2f       	mov	r18, r24
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	9b 81       	ldd	r25, Y+3	; 0x03
    2256:	fc 01       	movw	r30, r24
    2258:	e2 0f       	add	r30, r18
    225a:	f3 1f       	adc	r31, r19
    225c:	80 81       	ld	r24, Z
    225e:	0e 94 f6 10 	call	0x21ec	; 0x21ec <UART_sendByte>
		i++;
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	8f 5f       	subi	r24, 0xFF	; 255
    2266:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	8a 81       	ldd	r24, Y+2	; 0x02
    2270:	9b 81       	ldd	r25, Y+3	; 0x03
    2272:	fc 01       	movw	r30, r24
    2274:	e2 0f       	add	r30, r18
    2276:	f3 1f       	adc	r31, r19
    2278:	80 81       	ld	r24, Z
    227a:	88 23       	and	r24, r24
    227c:	39 f7       	brne	.-50     	; 0x224c <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    228a:	0f 93       	push	r16
    228c:	1f 93       	push	r17
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	00 d0       	rcall	.+0      	; 0x2294 <UART_receiveString+0xa>
    2294:	0f 92       	push	r0
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    229a:	9b 83       	std	Y+3, r25	; 0x03
    229c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    229e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	28 2f       	mov	r18, r24
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	8a 81       	ldd	r24, Y+2	; 0x02
    22a8:	9b 81       	ldd	r25, Y+3	; 0x03
    22aa:	8c 01       	movw	r16, r24
    22ac:	02 0f       	add	r16, r18
    22ae:	13 1f       	adc	r17, r19
    22b0:	0e 94 0d 11 	call	0x221a	; 0x221a <UART_recieveByte>
    22b4:	f8 01       	movw	r30, r16
    22b6:	80 83       	st	Z, r24
    22b8:	0f c0       	rjmp	.+30     	; 0x22d8 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	8f 5f       	subi	r24, 0xFF	; 255
    22be:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	9b 81       	ldd	r25, Y+3	; 0x03
    22ca:	8c 01       	movw	r16, r24
    22cc:	02 0f       	add	r16, r18
    22ce:	13 1f       	adc	r17, r19
    22d0:	0e 94 0d 11 	call	0x221a	; 0x221a <UART_recieveByte>
    22d4:	f8 01       	movw	r30, r16
    22d6:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	28 2f       	mov	r18, r24
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	9b 81       	ldd	r25, Y+3	; 0x03
    22e2:	fc 01       	movw	r30, r24
    22e4:	e2 0f       	add	r30, r18
    22e6:	f3 1f       	adc	r31, r19
    22e8:	80 81       	ld	r24, Z
    22ea:	83 32       	cpi	r24, 0x23	; 35
    22ec:	31 f7       	brne	.-52     	; 0x22ba <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	28 2f       	mov	r18, r24
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	9b 81       	ldd	r25, Y+3	; 0x03
    22f8:	fc 01       	movw	r30, r24
    22fa:	e2 0f       	add	r30, r18
    22fc:	f3 1f       	adc	r31, r19
    22fe:	10 82       	st	Z, r1
}
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	1f 91       	pop	r17
    230c:	0f 91       	pop	r16
    230e:	08 95       	ret

00002310 <__udivmodsi4>:
    2310:	a1 e2       	ldi	r26, 0x21	; 33
    2312:	1a 2e       	mov	r1, r26
    2314:	aa 1b       	sub	r26, r26
    2316:	bb 1b       	sub	r27, r27
    2318:	fd 01       	movw	r30, r26
    231a:	0d c0       	rjmp	.+26     	; 0x2336 <__udivmodsi4_ep>

0000231c <__udivmodsi4_loop>:
    231c:	aa 1f       	adc	r26, r26
    231e:	bb 1f       	adc	r27, r27
    2320:	ee 1f       	adc	r30, r30
    2322:	ff 1f       	adc	r31, r31
    2324:	a2 17       	cp	r26, r18
    2326:	b3 07       	cpc	r27, r19
    2328:	e4 07       	cpc	r30, r20
    232a:	f5 07       	cpc	r31, r21
    232c:	20 f0       	brcs	.+8      	; 0x2336 <__udivmodsi4_ep>
    232e:	a2 1b       	sub	r26, r18
    2330:	b3 0b       	sbc	r27, r19
    2332:	e4 0b       	sbc	r30, r20
    2334:	f5 0b       	sbc	r31, r21

00002336 <__udivmodsi4_ep>:
    2336:	66 1f       	adc	r22, r22
    2338:	77 1f       	adc	r23, r23
    233a:	88 1f       	adc	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	1a 94       	dec	r1
    2340:	69 f7       	brne	.-38     	; 0x231c <__udivmodsi4_loop>
    2342:	60 95       	com	r22
    2344:	70 95       	com	r23
    2346:	80 95       	com	r24
    2348:	90 95       	com	r25
    234a:	9b 01       	movw	r18, r22
    234c:	ac 01       	movw	r20, r24
    234e:	bd 01       	movw	r22, r26
    2350:	cf 01       	movw	r24, r30
    2352:	08 95       	ret

00002354 <__prologue_saves__>:
    2354:	2f 92       	push	r2
    2356:	3f 92       	push	r3
    2358:	4f 92       	push	r4
    235a:	5f 92       	push	r5
    235c:	6f 92       	push	r6
    235e:	7f 92       	push	r7
    2360:	8f 92       	push	r8
    2362:	9f 92       	push	r9
    2364:	af 92       	push	r10
    2366:	bf 92       	push	r11
    2368:	cf 92       	push	r12
    236a:	df 92       	push	r13
    236c:	ef 92       	push	r14
    236e:	ff 92       	push	r15
    2370:	0f 93       	push	r16
    2372:	1f 93       	push	r17
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	ca 1b       	sub	r28, r26
    237e:	db 0b       	sbc	r29, r27
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	09 94       	ijmp

0000238c <__epilogue_restores__>:
    238c:	2a 88       	ldd	r2, Y+18	; 0x12
    238e:	39 88       	ldd	r3, Y+17	; 0x11
    2390:	48 88       	ldd	r4, Y+16	; 0x10
    2392:	5f 84       	ldd	r5, Y+15	; 0x0f
    2394:	6e 84       	ldd	r6, Y+14	; 0x0e
    2396:	7d 84       	ldd	r7, Y+13	; 0x0d
    2398:	8c 84       	ldd	r8, Y+12	; 0x0c
    239a:	9b 84       	ldd	r9, Y+11	; 0x0b
    239c:	aa 84       	ldd	r10, Y+10	; 0x0a
    239e:	b9 84       	ldd	r11, Y+9	; 0x09
    23a0:	c8 84       	ldd	r12, Y+8	; 0x08
    23a2:	df 80       	ldd	r13, Y+7	; 0x07
    23a4:	ee 80       	ldd	r14, Y+6	; 0x06
    23a6:	fd 80       	ldd	r15, Y+5	; 0x05
    23a8:	0c 81       	ldd	r16, Y+4	; 0x04
    23aa:	1b 81       	ldd	r17, Y+3	; 0x03
    23ac:	aa 81       	ldd	r26, Y+2	; 0x02
    23ae:	b9 81       	ldd	r27, Y+1	; 0x01
    23b0:	ce 0f       	add	r28, r30
    23b2:	d1 1d       	adc	r29, r1
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	f8 94       	cli
    23b8:	de bf       	out	0x3e, r29	; 62
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	cd bf       	out	0x3d, r28	; 61
    23be:	ed 01       	movw	r28, r26
    23c0:	08 95       	ret

000023c2 <_exit>:
    23c2:	f8 94       	cli

000023c4 <__stop_program>:
    23c4:	ff cf       	rjmp	.-2      	; 0x23c4 <__stop_program>
